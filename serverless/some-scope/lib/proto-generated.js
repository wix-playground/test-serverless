const Long = require('long');

const $root = {};

(
$root.__options = {
  'stringEnums': false
});
$root.__lookup = function(pbjs) {
  const root = pbjs.Root.fromJSON({
    'nested': {
      'com': {
        'nested': {
          'wixpress': {
            'nested': {
              'premium': {
                'nested': {
                  'subscriptionsmanager': {
                    'nested': {
                      'api': {
                        'nested': {
                          'v1': {
                            'nested': {
                              'BillingReference': {
                                'fields': {
                                  'providerName': {
                                    'type': 'ProviderName',
                                    'id': 1
                                  },
                                  'providerReferenceId': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 2
                                  },
                                  'previousProviderReferenceIds': {
                                    'rule': 'repeated',
                                    'type': 'string',
                                    'id': 3
                                  }
                                },
                                'nested': {
                                  'ProviderName': {
                                    'values': {
                                      'UNKNOWN': 0,
                                      'SBS': 1
                                    }
                                  }
                                }
                              },
                              'CancellationFlowEnum': {
                                'fields': {},
                                'nested': {
                                  'CancellationFlow': {
                                    'values': {
                                      'UNKNOWN': 0,
                                      'REQUESTED_BY_USER': 100,
                                      'BACKOFFICE_CANCEL': 101,
                                      'PAYMENT_PROBLEMS': 102,
                                      'CHARGEBACK': 103,
                                      'SUPPORT_AUTOMATED_CANCEL_AND_REFUND': 104,
                                      'CHANGE_PLAN': 105,
                                      'TRANSFER_SITE': 106,
                                      'MANUAL_RECURRING_EXPIRED': 107,
                                      'SITE_DELETION': 108
                                    }
                                  }
                                }
                              },
                              'UserCancellationReason': {
                                'fields': {
                                  'cancellationCode': {
                                    'type': 'int32',
                                    'id': 1
                                  },
                                  'cancellationReason': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 2
                                  }
                                }
                              },
                              'SubscriptionsManagerEvents': {
                                'options': {
                                  '(wix.api.event).topic': 'subscription_manager_events',
                                  '(wix.api.event).payload': 'SubscriptionEvent'
                                },
                                'methods': {}
                              },
                              'SubscriptionCreated': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'deliveryInfo': {
                                    'keyType': 'string',
                                    'type': 'string',
                                    'id': 2
                                  }
                                }
                              },
                              'SubscriptionCancelled': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'cancellationDetails': {
                                    'type': 'CancellationDetails',
                                    'id': 2
                                  }
                                }
                              },
                              'SubscriptionAutoRenewTurnedOn': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  }
                                }
                              },
                              'SubscriptionAutoRenewTurnedOff': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'cancellationDetails': {
                                    'type': 'CancellationDetails',
                                    'id': 2
                                  }
                                }
                              },
                              'CancellationDetails': {
                                'fields': {
                                  'cancellationCode': {
                                    'type': 'google.protobuf.Int32Value',
                                    'id': 1
                                  },
                                  'cancellationReason': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 2
                                  }
                                }
                              },
                              'SubscriptionAssigned': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'previousMetaSiteId': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 2,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'SubscriptionUnassigned': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'previousMetaSiteId': {
                                    'type': 'string',
                                    'id': 2,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'SubscriptionTransferred': {
                                'fields': {
                                  'originSubscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'targetSubscription': {
                                    'type': 'Subscription',
                                    'id': 2
                                  }
                                }
                              },
                              'RecurringChargeSucceeded': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  }
                                }
                              },
                              'ContractSwitched': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  },
                                  'previousCycle': {
                                    'type': 'com.wixpress.billing.api.v1.Cycle',
                                    'id': 2
                                  },
                                  'previousProductId': {
                                    'type': 'string',
                                    'id': 3,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'previousProductTypeId': {
                                    'type': 'string',
                                    'id': 4,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'SubscriptionEvent': {
                                'oneofs': {
                                  'event': {
                                    'oneof': [
                                      'created',
                                      'assigned',
                                      'cancelled',
                                      'autoRenewTurnedOn',
                                      'autoRenewTurnedOff',
                                      'unassigned',
                                      'transferred',
                                      'recurringChargeSucceeded',
                                      'contractSwitched'
                                    ]
                                  }
                                },
                                'fields': {
                                  'eventId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'eventDate': {
                                    'type': 'google.protobuf.Timestamp',
                                    'id': 3
                                  },
                                  'created': {
                                    'type': 'SubscriptionCreated',
                                    'id': 4
                                  },
                                  'assigned': {
                                    'type': 'SubscriptionAssigned',
                                    'id': 5
                                  },
                                  'cancelled': {
                                    'type': 'SubscriptionCancelled',
                                    'id': 6
                                  },
                                  'autoRenewTurnedOn': {
                                    'type': 'SubscriptionAutoRenewTurnedOn',
                                    'id': 7
                                  },
                                  'autoRenewTurnedOff': {
                                    'type': 'SubscriptionAutoRenewTurnedOff',
                                    'id': 8
                                  },
                                  'unassigned': {
                                    'type': 'SubscriptionUnassigned',
                                    'id': 9
                                  },
                                  'transferred': {
                                    'type': 'SubscriptionTransferred',
                                    'id': 10
                                  },
                                  'recurringChargeSucceeded': {
                                    'type': 'RecurringChargeSucceeded',
                                    'id': 11
                                  },
                                  'contractSwitched': {
                                    'type': 'ContractSwitched',
                                    'id': 12
                                  }
                                }
                              },
                              'Subscription': {
                                'fields': {
                                  'id': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'userId': {
                                    'type': 'string',
                                    'id': 2,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'productId': {
                                    'type': 'string',
                                    'id': 3,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'createdAt': {
                                    'type': 'google.protobuf.Timestamp',
                                    'id': 4
                                  },
                                  'updatedAt': {
                                    'type': 'google.protobuf.Timestamp',
                                    'id': 5
                                  },
                                  'metaSiteId': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 6,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'billingReference': {
                                    'type': 'BillingReference',
                                    'id': 7
                                  },
                                  'cycle': {
                                    'type': 'com.wixpress.billing.api.v1.Cycle',
                                    'id': 8
                                  },
                                  'status': {
                                    'type': 'SubscriptionStatusEnum.SubscriptionStatus',
                                    'id': 9
                                  },
                                  'transferredAt': {
                                    'type': 'google.protobuf.Timestamp',
                                    'id': 10
                                  },
                                  'productTypeId': {
                                    'type': 'string',
                                    'id': 11,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'version': {
                                    'type': 'int32',
                                    'id': 12
                                  },
                                  'active': {
                                    'type': 'bool',
                                    'id': 13
                                  }
                                }
                              },
                              'SubscriptionStatusEnum': {
                                'fields': {},
                                'nested': {
                                  'SubscriptionStatus': {
                                    'values': {
                                      'UNKNOWN': 0,
                                      'AUTO_RENEW_ON': 1,
                                      'AUTO_RENEW_OFF': 2,
                                      'MANUAL_RECURRING': 3,
                                      'CANCELLED': 4,
                                      'TRANSFERRED': 5
                                    }
                                  }
                                }
                              },
                              'SubscriptionsManager': {
                                'options': {
                                  '(wix.api.service_maturity)': 'ALPHA',
                                  '(wix.api.service_exposure)': 'PRIVATE'
                                },
                                'methods': {
                                  'ListSubscriptions': {
                                    'requestType': 'ListSubscriptionsRequest',
                                    'responseType': 'ListSubscriptionsResponse',
                                    'options': {
                                      '(google.api.http).get': '/api/v1/subscriptions'
                                    }
                                  },
                                  'GetSubscription': {
                                    'requestType': 'GetSubscriptionRequest',
                                    'responseType': 'GetSubscriptionResponse',
                                    'options': {
                                      '(google.api.http).get': '/api/v1/subscriptions/{id}'
                                    }
                                  },
                                  'GetByBillingReference': {
                                    'requestType': 'GetByBillingReferenceRequest',
                                    'responseType': 'GetByBillingReferenceResponse'
                                  },
                                  'ListCancellationRequests': {
                                    'requestType': 'ListCancellationsRequestsRequest',
                                    'responseType': 'ListCancellationsRequestsResponse',
                                    'options': {
                                      '(google.api.http).get': '/api/v1/subscriptions/{subscription_id}/cancellationRequests'
                                    }
                                  },
                                  'AssignToSite': {
                                    'requestType': 'AssignToSiteRequest',
                                    'responseType': 'AssignToSiteResponse',
                                    'options': {
                                      '(google.api.http).patch': '/api/v1/subscriptions/{subscription_id}/assignToSite'
                                    }
                                  },
                                  'UnassignFromSite': {
                                    'requestType': 'UnassignFromSiteRequest',
                                    'responseType': 'UnassignFromSiteResponse',
                                    'options': {
                                      '(google.api.http).patch': '/api/v1/subscriptions/{subscription_id}/unassignFromSite'
                                    }
                                  },
                                  'CancelImmediately': {
                                    'requestType': 'CancellationRequest',
                                    'responseType': 'CancellationResponse',
                                    'options': {
                                      '(google.api.http).post': '/api/v1/subscriptions/{subscription_id}/cancelImmediately'
                                    }
                                  },
                                  'TurnAutoRenewOff': {
                                    'requestType': 'TurnAutoRenewOffRequest',
                                    'responseType': 'TurnAutoRenewOffResponse',
                                    'options': {
                                      '(google.api.http).post': '/api/v1/subscriptions/{subscription_id}/turnAutoRenewOff'
                                    }
                                  },
                                  'TurnAutoRenewOn': {
                                    'requestType': 'TurnAutoRenewOnRequest',
                                    'responseType': 'TurnAutoRenewOnResponse',
                                    'options': {
                                      '(google.api.http).post': '/api/v1/subscriptions/{subscription_id}/turnAutoRenewOn'
                                    }
                                  },
                                  'TransferFromAnotherUser': {
                                    'requestType': 'TransferFromAnotherUserRequest',
                                    'responseType': 'TransferFromAnotherUserResponse'
                                  }
                                }
                              },
                              'ListSubscriptionsRequest': {
                                'fields': {
                                  'filter': {
                                    'type': 'ListSubscriptionsFilter',
                                    'id': 1
                                  },
                                  'paging': {
                                    'type': 'wix.common.Paging',
                                    'id': 2
                                  }
                                }
                              },
                              'ListSubscriptionsFilter': {
                                'fields': {
                                  'metaSiteId': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'statuses': {
                                    'rule': 'repeated',
                                    'type': 'SubscriptionStatusEnum.SubscriptionStatus',
                                    'id': 2
                                  }
                                }
                              },
                              'ListSubscriptionsResponse': {
                                'fields': {
                                  'subscriptions': {
                                    'rule': 'repeated',
                                    'type': 'Subscription',
                                    'id': 1
                                  }
                                }
                              },
                              'GetSubscriptionRequest': {
                                'fields': {
                                  'id': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'GetSubscriptionResponse': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  }
                                }
                              },
                              'GetByBillingReferenceRequest': {
                                'fields': {
                                  'billingReferenceId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'GetByBillingReferenceResponse': {
                                'fields': {
                                  'subscription': {
                                    'type': 'Subscription',
                                    'id': 1
                                  }
                                }
                              },
                              'ListCancellationsRequestsRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'ListCancellationsRequestsResponse': {
                                'fields': {
                                  'cancellationRequests': {
                                    'rule': 'repeated',
                                    'type': 'CancellationRequest',
                                    'id': 1
                                  }
                                }
                              },
                              'AssignToSiteRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'metaSiteId': {
                                    'type': 'string',
                                    'id': 2,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'AssignToSiteResponse': {
                                'fields': {}
                              },
                              'UnassignFromSiteRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'UnassignFromSiteResponse': {
                                'fields': {}
                              },
                              'CancellationRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'cancellationFlow': {
                                    'type': 'CancellationFlowEnum.CancellationFlow',
                                    'id': 2
                                  },
                                  'reason': {
                                    'type': 'UserCancellationReason',
                                    'id': 3
                                  },
                                  'voided': {
                                    'type': 'bool',
                                    'id': 4
                                  }
                                }
                              },
                              'CancellationResponse': {
                                'fields': {}
                              },
                              'TurnAutoRenewOffRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'cancellationFlow': {
                                    'type': 'CancellationFlowEnum.CancellationFlow',
                                    'id': 2
                                  },
                                  'reason': {
                                    'type': 'UserCancellationReason',
                                    'id': 3
                                  }
                                }
                              },
                              'TurnAutoRenewOffResponse': {
                                'fields': {}
                              },
                              'TurnAutoRenewOnRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  }
                                }
                              },
                              'TurnAutoRenewOnResponse': {
                                'fields': {}
                              },
                              'TransferFromAnotherUserRequest': {
                                'fields': {
                                  'subscriptionId': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'newBillingReference': {
                                    'type': 'BillingReference',
                                    'id': 2
                                  }
                                }
                              },
                              'TransferFromAnotherUserResponse': {
                                'fields': {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              'billing': {
                'nested': {
                  'api': {
                    'nested': {
                      'v1': {
                        'nested': {
                          'Interval': {
                            'fields': {
                              'unit': {
                                'type': 'IntervalUnit',
                                'id': 1
                              },
                              'count': {
                                'type': 'int32',
                                'id': 2
                              }
                            },
                            'nested': {
                              'IntervalUnit': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'DAY': 1,
                                  'WEEK': 2,
                                  'MONTH': 3,
                                  'YEAR': 4
                                }
                              }
                            }
                          },
                          'OneTime': {
                            'fields': {}
                          },
                          'Cycle': {
                            'oneofs': {
                              'cycleSelector': {
                                'oneof': [
                                  'interval',
                                  'oneTime'
                                ]
                              }
                            },
                            'fields': {
                              'interval': {
                                'type': 'Interval',
                                'id': 1
                              },
                              'oneTime': {
                                'type': 'OneTime',
                                'id': 2
                              }
                            }
                          },
                          'BillingAccountType': {
                            'values': {
                              'CREDIT_CARD': 0,
                              'E_CHECK': 1,
                              'BANK_DRAFT_ACCOUNT': 2,
                              'MANUAL_PAYMENT_ACCOUNT': 3,
                              'PAY_PAL': 4,
                              'WIRE_TRANSFER_ACCOUNT': 5,
                              'WALLET_YANDEX': 6,
                              'MERCADO_PAGO_RECURRING': 7,
                              'CREDITS_PREPAID_CARD': 8,
                              'REG_DOT_RU': 9,
                              'SEPA_DIRECT_DEBIT': 10,
                              'VIRTUAL_MONEY': 11,
                              'ACCOUNT_CREDIT': 12,
                              'CASH': 13,
                              'BANK_TRANSFER': 14,
                              'LOCAL_CREDIT_DEBIT_CARD': 15
                            }
                          },
                          'CreditCardType': {
                            'values': {
                              'Visa': 0,
                              'MasterCard': 1,
                              'AMEX': 2,
                              'Discover': 3,
                              'JCB': 4,
                              'ENROUTE': 5,
                              'Diners': 6,
                              'SOLO': 7,
                              'MASTERO': 8,
                              'VISA_DELTA': 9,
                              'BANCARD': 10,
                              'ELECTRON': 11,
                              'MAESTR_UK': 12,
                              'CARTE_BLUE': 13,
                              'ELO': 14,
                              'SBI_MAESTRO': 15,
                              'UnionPay': 16
                            }
                          },
                          'BillingCycle': {
                            'values': {
                              'ONE_TIME': 0,
                              'DAILY': 1,
                              'WEEKLY': 2,
                              'MONTHLY': 3,
                              'QUARTERLY': 4,
                              'SEMI_ANNUALLY': 5,
                              'YEARLY': 6,
                              'TWO_YEARS': 7,
                              'THREE_YEARS': 8,
                              'FOUR_YEARS': 9,
                              'FIVE_YEARS': 10
                            }
                          },
                          'PaymentMethodSubType': {
                            'values': {
                              'MP_OXXO': 0,
                              'MP_BANAMEX': 1,
                              'MP_BANCOMER': 2,
                              'MP_SERFIN': 3,
                              'AP_BOLETO': 4,
                              'PAYU_CREDIT_CARD': 5,
                              'PAYU_DEBIT_CARD': 6,
                              'PAYU_NET_BANKING': 7
                            }
                          },
                          'Address': {
                            'fields': {
                              'fullName': {
                                'type': 'FullName',
                                'id': 1
                              },
                              'country': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'COUNTRY'
                                }
                              },
                              'stateCode': {
                                'type': 'google.protobuf.StringValue',
                                'id': 3,
                                'options': {
                                  '(wix.api.minLength)': 5,
                                  '(wix.api.maxLength)': 5
                                }
                              },
                              'city': {
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.maxLength)': 100
                                }
                              },
                              'zipCode': {
                                'type': 'string',
                                'id': 5,
                                'options': {
                                  '(wix.api.maxLength)': 50
                                }
                              },
                              'phoneNumber': {
                                'type': 'string',
                                'id': 6,
                                'options': {
                                  '(wix.api.format)': 'PHONE'
                                }
                              },
                              'company': {
                                'type': 'string',
                                'id': 7,
                                'options': {
                                  '(wix.api.maxLength)': 100
                                }
                              },
                              'street': {
                                'type': 'Street',
                                'id': 8
                              },
                              'taxInfo': {
                                'type': 'TaxInfo',
                                'id': 9
                              },
                              'email': {
                                'type': 'google.protobuf.StringValue',
                                'id': 10,
                                'options': {
                                  '(wix.api.format)': 'EMAIL'
                                }
                              }
                            }
                          },
                          'FullName': {
                            'fields': {
                              'firstName': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.maxLength)': 100
                                }
                              },
                              'lastName': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.maxLength)': 100
                                }
                              }
                            }
                          },
                          'Street': {
                            'fields': {
                              'name': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.maxLength)': 100
                                }
                              },
                              'number': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.maxLength)': 10
                                }
                              }
                            }
                          },
                          'TaxInfo': {
                            'fields': {
                              'taxId': {
                                'type': 'string',
                                'id': 1
                              },
                              'taxType': {
                                'type': 'string',
                                'id': 2
                              }
                            }
                          },
                          'Shipping': {
                            'oneofs': {
                              'shippingSelector': {
                                'oneof': [
                                  'shippingDetails',
                                  'selfPickup'
                                ]
                              }
                            },
                            'fields': {
                              'shippingDetails': {
                                'type': 'ShippingDetails',
                                'id': 1
                              },
                              'selfPickup': {
                                'type': 'SelfPickup',
                                'id': 2
                              }
                            },
                            'nested': {
                              'ShippingDetails': {
                                'fields': {
                                  'address': {
                                    'type': 'Address',
                                    'id': 1
                                  },
                                  'trackingNumber': {
                                    'type': 'string',
                                    'id': 2
                                  }
                                }
                              },
                              'SelfPickup': {
                                'fields': {}
                              }
                            }
                          },
                          'YearMonth': {
                            'fields': {
                              'year': {
                                'type': 'int32',
                                'id': 1,
                                'options': {
                                  '(wix.api.min)': 2019,
                                  '(wix.api.max)': 2099
                                }
                              },
                              'month': {
                                'type': 'int32',
                                'id': 2,
                                'options': {
                                  '(wix.api.min)': 1,
                                  '(wix.api.max)': 12
                                }
                              }
                            }
                          },
                          'Amounts': {
                            'fields': {
                              'subTotalAmount': {
                                'type': 'int64',
                                'id': 1
                              },
                              'creditAmount': {
                                'type': 'int64',
                                'id': 2
                              },
                              'discountAmount': {
                                'type': 'int64',
                                'id': 3
                              },
                              'beforeTaxAmount': {
                                'type': 'int64',
                                'id': 4
                              },
                              'taxAmounts': {
                                'rule': 'repeated',
                                'type': 'TaxAmount',
                                'id': 6
                              },
                              'totalAmount': {
                                'type': 'int64',
                                'id': 7
                              }
                            }
                          },
                          'TaxAmount': {
                            'fields': {
                              'tax': {
                                'type': 'Tax',
                                'id': 1
                              },
                              'amount': {
                                'type': 'int64',
                                'id': 2
                              }
                            }
                          },
                          'RecurringPayment': {
                            'fields': {
                              'date': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 1
                              },
                              'amounts': {
                                'type': 'Amounts',
                                'id': 2
                              }
                            }
                          },
                          'Tax': {
                            'fields': {
                              'name': {
                                'type': 'string',
                                'id': 1
                              },
                              'percent': {
                                'type': 'double',
                                'id': 2,
                                'options': {
                                  '(wix.api.min)': 0,
                                  '(wix.api.max)': 100
                                }
                              }
                            }
                          },
                          'OrderTaxContext': {
                            'oneofs': {
                              'orderTaxContextSelector': {
                                'oneof': [
                                  'taxDetails',
                                  'paymentSourceId'
                                ]
                              }
                            },
                            'fields': {
                              'taxDetails': {
                                'type': 'TaxDetails',
                                'id': 1
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            },
                            'nested': {
                              'TaxDetails': {
                                'fields': {
                                  'country': {
                                    'type': 'string',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'COUNTRY'
                                    }
                                  },
                                  'taxInfo': {
                                    'type': 'TaxInfo',
                                    'id': 2
                                  }
                                }
                              }
                            }
                          },
                          'Invoice': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'shipping': {
                                'type': 'Shipping',
                                'id': 2,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 3,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'createdOn': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 4,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'currency': {
                                'type': 'string',
                                'id': 5,
                                'options': {
                                  '(wix.api.readOnly)': true,
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'invoiceLineItems': {
                                'rule': 'repeated',
                                'type': 'InvoiceLineItem',
                                'id': 6,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'invoiceStatus': {
                                'type': 'InvoiceStatus',
                                'id': 7,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 8,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              }
                            },
                            'nested': {
                              'InvoiceStatus': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'DRAFT': 1,
                                  'PAID': 2,
                                  'VOID': 3,
                                  'REFUNDED': 4,
                                  'DECLINED': 5,
                                  'PAYMENT_IN_PROGRESS': 6
                                }
                              }
                            }
                          },
                          'InvoiceLineItem': {
                            'fields': {
                              'invoiceLineItemId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'productId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'cycle': {
                                'type': 'Cycle',
                                'id': 3,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'unitAmount': {
                                'type': 'int64',
                                'id': 4,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'quantity': {
                                'type': 'int32',
                                'id': 5,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'beforeTaxesAmount': {
                                'type': 'int64',
                                'id': 6,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'totalAmount': {
                                'type': 'int64',
                                'id': 7,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'serviceId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 8,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'taxes': {
                                'rule': 'repeated',
                                'type': 'Tax',
                                'id': 9,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 10,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              }
                            }
                          },
                          'InvoiceService': {
                            'methods': {
                              'ListInvoices': {
                                'requestType': 'ListInvoicesRequest',
                                'responseType': 'ListInvoicesResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/invoices',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_INVOICES'
                                }
                              },
                              'GetInvoice': {
                                'requestType': 'GetInvoiceRequest',
                                'responseType': 'GetInvoiceResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/invoices/{invoice_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_INVOICES'
                                }
                              },
                              'PayInvoice': {
                                'requestType': 'PayInvoiceRequest',
                                'responseType': 'PayInvoiceResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/invoices/{invoice_id}/pay',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'PayInvoiceRequest.three_ds_data.three_ds_data_selector.v1_fallback_data.data',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_INVOICES'
                                }
                              },
                              'CaptureInvoice': {
                                'requestType': 'CaptureInvoiceRequest',
                                'responseType': 'CaptureInvoiceResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/invoices/{invoice_id}/capture',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_INVOICES'
                                }
                              },
                              'RefundInvoice': {
                                'requestType': 'RefundInvoiceRequest',
                                'responseType': 'RefundInvoiceResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/invoices/{invoice_id}/refund',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_INVOICES'
                                }
                              },
                              'CaptureInvoiceLineItem': {
                                'requestType': 'CaptureInvoiceLineItemRequest',
                                'responseType': 'CaptureInvoiceLineItemResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/invoices/{invoice_id}/invoice-line-items/{invoice_line_item_id}/capture',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_INVOICES'
                                }
                              },
                              'RefundInvoiceLineItem': {
                                'requestType': 'RefundInvoiceLineItemRequest',
                                'responseType': 'RefundInvoiceLineItemResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/invoices/{invoice_id}/invoice-line-items/{invoice_line_item_id}/refund',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_INVOICES'
                                }
                              }
                            }
                          },
                          'ListInvoicesRequest': {
                            'fields': {
                              'paging': {
                                'type': 'wix.common.Paging',
                                'id': 1
                              }
                            }
                          },
                          'ListInvoicesResponse': {
                            'fields': {
                              'invoices': {
                                'rule': 'repeated',
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'GetInvoiceRequest': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              }
                            }
                          },
                          'GetInvoiceResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'PayInvoiceRequest': {
                            'oneofs': {
                              'paymentSourceSelector': {
                                'oneof': [
                                  'paymentSource',
                                  'paymentSourceId'
                                ]
                              }
                            },
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              },
                              'riskSessionId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 2
                              },
                              'paymentSource': {
                                'type': 'PaymentSourceDetails',
                                'id': 3
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'idempotencyKey': {
                                'type': 'string',
                                'id': 5,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'threeDsData': {
                                'type': 'ThreeDsData',
                                'id': 6
                              }
                            }
                          },
                          'PayInvoiceResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 2
                              },
                              'threeDsNextAction': {
                                'type': 'ThreeDsNextAction',
                                'id': 3
                              }
                            }
                          },
                          'CaptureInvoiceRequest': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              }
                            }
                          },
                          'CaptureInvoiceResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'RefundReasonEnum': {
                            'fields': {},
                            'nested': {
                              'RefundReason': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'FRAUDULENT': 1,
                                  'REQUESTED_BY_CUSTOMER': 2
                                }
                              }
                            }
                          },
                          'RefundInvoiceRequest': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              },
                              'reason': {
                                'type': 'RefundReasonEnum.RefundReason',
                                'id': 2
                              },
                              'description': {
                                'type': 'string',
                                'id': 3
                              }
                            }
                          },
                          'RefundInvoiceResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'CaptureInvoiceLineItemRequest': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              },
                              'invoiceLineItemId': {
                                'type': 'string',
                                'id': 2
                              }
                            }
                          },
                          'CaptureInvoiceLineItemResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'RefundInvoiceLineItemRequest': {
                            'fields': {
                              'invoiceId': {
                                'type': 'string',
                                'id': 1
                              },
                              'invoiceLineItemId': {
                                'type': 'string',
                                'id': 2
                              },
                              'reason': {
                                'type': 'RefundReasonEnum.RefundReason',
                                'id': 3
                              },
                              'description': {
                                'type': 'string',
                                'id': 4
                              }
                            }
                          },
                          'RefundInvoiceLineItemResponse': {
                            'fields': {
                              'invoice': {
                                'type': 'Invoice',
                                'id': 1
                              }
                            }
                          },
                          'ThreeDsProvider': {
                            'fields': {
                              'providerType': {
                                'type': 'ThreeDsProviderEnum',
                                'id': 1
                              },
                              'hash': {
                                'type': 'string',
                                'id': 2
                              }
                            },
                            'nested': {
                              'ThreeDsProviderEnum': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'ADYEN': 1,
                                  'WORLDPAY': 2
                                }
                              }
                            }
                          },
                          'ThreeDsChallengeDisplaySize': {
                            'fields': {},
                            'nested': {
                              'ThreeDsChallengeDisplaySizeEnum': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'SMALL': 1,
                                  'MEDIUM': 2,
                                  'LARGE': 3
                                }
                              }
                            }
                          },
                          'ThreeDsInitialData': {
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'challengeDisplaySize': {
                                'type': 'ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum',
                                'id': 2
                              },
                              'browserInfo': {
                                'type': 'BrowserInfo',
                                'id': 3
                              }
                            },
                            'nested': {
                              'BrowserInfo': {
                                'fields': {
                                  'userAgent': {
                                    'type': 'string',
                                    'id': 1
                                  },
                                  'acceptHeader': {
                                    'type': 'string',
                                    'id': 2
                                  },
                                  'language': {
                                    'type': 'string',
                                    'id': 3
                                  },
                                  'colorDepth': {
                                    'type': 'int32',
                                    'id': 4
                                  },
                                  'screenHeight': {
                                    'type': 'int32',
                                    'id': 5
                                  },
                                  'screenWidth': {
                                    'type': 'int32',
                                    'id': 6
                                  },
                                  'timeZoneOffset': {
                                    'type': 'int32',
                                    'id': 7
                                  },
                                  'javaEnabled': {
                                    'type': 'bool',
                                    'id': 8
                                  }
                                }
                              }
                            }
                          },
                          'ThreeDsDeviceFingerprintData': {
                            'oneofs': {
                              'threeDsStatusSelect': {
                                'oneof': [
                                  'received',
                                  'notReceived'
                                ]
                              }
                            },
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'challengeDisplaySize': {
                                'type': 'ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum',
                                'id': 2
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 3,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              },
                              'received': {
                                'type': 'ThreeDsReceived',
                                'id': 4
                              },
                              'notReceived': {
                                'type': 'ThreeDsNotReceived',
                                'id': 5
                              }
                            }
                          },
                          'ThreeDsChallengeData': {
                            'oneofs': {
                              'threeDsStatusSelect': {
                                'oneof': [
                                  'received',
                                  'notReceived'
                                ]
                              }
                            },
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'challengeDisplaySize': {
                                'type': 'ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum',
                                'id': 2
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 3,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              },
                              'received': {
                                'type': 'ThreeDsReceived',
                                'id': 4
                              },
                              'notReceived': {
                                'type': 'ThreeDsNotReceived',
                                'id': 5
                              }
                            }
                          },
                          'ThreeDsV1FallbackData': {
                            'oneofs': {
                              'threeDsStatusSelect': {
                                'oneof': [
                                  'received',
                                  'notReceived'
                                ]
                              }
                            },
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              },
                              'received': {
                                'type': 'ThreeDsReceived',
                                'id': 3
                              },
                              'notReceived': {
                                'type': 'ThreeDsNotReceived',
                                'id': 4
                              }
                            }
                          },
                          'ThreeDsReceived': {
                            'fields': {}
                          },
                          'ThreeDsNotReceived': {
                            'fields': {
                              'error': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1
                              }
                            }
                          },
                          'ThreeDsInitialAction': {
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              }
                            }
                          },
                          'ThreeDsDeviceFingerprintAction': {
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'methodUrl': {
                                'type': 'string',
                                'id': 2
                              },
                              'notificationUrl': {
                                'type': 'string',
                                'id': 3
                              },
                              'bin': {
                                'type': 'string',
                                'id': 4
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 5,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              }
                            }
                          },
                          'ThreeDsChallengeAction': {
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'methodUrl': {
                                'type': 'string',
                                'id': 2
                              },
                              'notificationUrl': {
                                'type': 'string',
                                'id': 3
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              }
                            }
                          },
                          'ThreeDsV1FallbackAction': {
                            'fields': {
                              'provider': {
                                'type': 'ThreeDsProvider',
                                'id': 1
                              },
                              'methodUrl': {
                                'type': 'string',
                                'id': 2
                              },
                              'notificationUrl': {
                                'type': 'string',
                                'id': 3
                              },
                              'data': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.maxSize)': 32
                                }
                              }
                            }
                          },
                          'ThreeDsNextAction': {
                            'oneofs': {
                              'threeDsActionSelector': {
                                'oneof': [
                                  'retry',
                                  'deviceFingerprint',
                                  'challenge',
                                  'v1Fallback'
                                ]
                              }
                            },
                            'fields': {
                              'retry': {
                                'type': 'ThreeDsInitialAction',
                                'id': 1
                              },
                              'deviceFingerprint': {
                                'type': 'ThreeDsDeviceFingerprintAction',
                                'id': 2
                              },
                              'challenge': {
                                'type': 'ThreeDsChallengeAction',
                                'id': 3
                              },
                              'v1Fallback': {
                                'type': 'ThreeDsV1FallbackAction',
                                'id': 4
                              }
                            }
                          },
                          'ThreeDsData': {
                            'oneofs': {
                              'threeDsDataSelector': {
                                'oneof': [
                                  'initialData',
                                  'fingerprintData',
                                  'challengeData',
                                  'v1FallbackData'
                                ]
                              }
                            },
                            'fields': {
                              'initialData': {
                                'type': 'ThreeDsInitialData',
                                'id': 1
                              },
                              'fingerprintData': {
                                'type': 'ThreeDsDeviceFingerprintData',
                                'id': 2
                              },
                              'challengeData': {
                                'type': 'ThreeDsChallengeData',
                                'id': 3
                              },
                              'v1FallbackData': {
                                'type': 'ThreeDsV1FallbackData',
                                'id': 4
                              }
                            }
                          },
                          'PaymentSource': {
                            'fields': {
                              'paymentSourceId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'paymentMethod': {
                                'type': 'PaymentMethod',
                                'id': 2
                              },
                              'billingContact': {
                                'type': 'Address',
                                'id': 3
                              },
                              'isDefault': {
                                'type': 'bool',
                                'id': 4
                              }
                            },
                            'nested': {
                              'PaymentMethod': {
                                'oneofs': {
                                  'paymentMethodSelector': {
                                    'oneof': [
                                      'publicCreditCard',
                                      'publicSepaDetails'
                                    ]
                                  }
                                },
                                'fields': {
                                  'publicCreditCard': {
                                    'type': 'PublicCreditCard',
                                    'id': 1
                                  },
                                  'publicSepaDetails': {
                                    'type': 'PublicSepaDetails',
                                    'id': 2
                                  }
                                }
                              }
                            }
                          },
                          'PublicCreditCard': {
                            'fields': {
                              'holderName': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'lastDigits': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'expiration': {
                                'type': 'YearMonth',
                                'id': 3,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'cardBrand': {
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'bin': {
                                'type': 'string',
                                'id': 5,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              }
                            }
                          },
                          'PublicSepaDetails': {
                            'fields': {
                              'accountHolderName': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'ibanCountryCode': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'COUNTRY',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'ibanLastChars': {
                                'type': 'string',
                                'id': 3,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              }
                            }
                          },
                          'PaymentSourceDetails': {
                            'oneofs': {
                              'paymentMethodSelector': {
                                'oneof': [
                                  'creditCardDetails',
                                  'sepaDetails'
                                ]
                              }
                            },
                            'fields': {
                              'creditCardDetails': {
                                'type': 'CreditCardDetails',
                                'id': 1
                              },
                              'sepaDetails': {
                                'type': 'SepaDetails',
                                'id': 4
                              },
                              'billingContact': {
                                'type': 'Address',
                                'id': 2
                              },
                              'isDefault': {
                                'type': 'bool',
                                'id': 3
                              }
                            }
                          },
                          'CreditCardDetails': {
                            'fields': {
                              'billingToken': {
                                'type': 'string',
                                'id': 1
                              },
                              'expiration': {
                                'type': 'YearMonth',
                                'id': 2
                              },
                              'cardBrand': {
                                'type': 'string',
                                'id': 3
                              }
                            }
                          },
                          'SepaDetails': {
                            'fields': {
                              'iban': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.minLength)': 4,
                                  '(wix.api.maxLength)': 34
                                }
                              },
                              'accountHolderName': {
                                'type': 'string',
                                'id': 2
                              }
                            }
                          },
                          'LocalPaymentMethods': {
                            'fields': {
                              'currency': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'country': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'COUNTRY'
                                }
                              },
                              'minCycle': {
                                'type': 'Cycle',
                                'id': 3
                              },
                              'availablePaymentMethod': {
                                'type': 'PaymentMethodType',
                                'id': 4
                              }
                            }
                          },
                          'PaymentMethodType': {
                            'oneofs': {
                              'type_Selector': {
                                'oneof': [
                                  'card',
                                  'directDebit'
                                ]
                              }
                            },
                            'fields': {
                              'card': {
                                'type': 'Card',
                                'id': 1
                              },
                              'directDebit': {
                                'type': 'DirectDebit',
                                'id': 2
                              }
                            },
                            'nested': {
                              'Card': {
                                'fields': {
                                  'brand': {
                                    'type': 'CardBrand',
                                    'id': 1
                                  }
                                },
                                'nested': {
                                  'CardBrand': {
                                    'values': {
                                      'UNKNOWN': 0,
                                      'VISA_ELECTRON': 1,
                                      'MASTERCARD_MAESTRO': 2,
                                      'MASTERCARD': 3,
                                      'VISA': 4,
                                      'DINERS': 5,
                                      'DISCOVER': 6,
                                      'INTERACT': 7,
                                      'JCB': 8,
                                      'PIN_ONLY': 9,
                                      'ELO': 10,
                                      'UNION_PAY': 11
                                    }
                                  }
                                }
                              },
                              'DirectDebit': {
                                'fields': {
                                  'brand': {
                                    'type': 'DirectDebitBrand',
                                    'id': 1
                                  }
                                },
                                'nested': {
                                  'DirectDebitBrand': {
                                    'values': {
                                      'UNKNOWN': 0,
                                      'SEPA': 1
                                    }
                                  }
                                }
                              }
                            }
                          },
                          'Order': {
                            'fields': {
                              'orderId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'invoiceId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'shipping': {
                                'type': 'Shipping',
                                'id': 3
                              },
                              'currency': {
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'capture': {
                                'type': 'bool',
                                'id': 5
                              },
                              'orderLineItems': {
                                'rule': 'repeated',
                                'type': 'OrderLineItem',
                                'id': 6,
                                'options': {
                                  '(wix.api.minSize)': 1
                                }
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 7
                              }
                            }
                          },
                          'OrderLineItem': {
                            'fields': {
                              'orderLineItemId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'productPricePlanId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'description': {
                                'type': 'string',
                                'id': 3
                              },
                              'quantity': {
                                'type': 'int32',
                                'id': 4
                              },
                              'overrideAmount': {
                                'type': 'google.protobuf.Int64Value',
                                'id': 5
                              },
                              'taxes': {
                                'rule': 'repeated',
                                'type': 'Tax',
                                'id': 6
                              },
                              'taxIncluded': {
                                'type': 'google.protobuf.BoolValue',
                                'id': 7
                              },
                              'couponCode': {
                                'type': 'google.protobuf.StringValue',
                                'id': 8
                              },
                              'serviceId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 9,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'overridePeriodStart': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 10
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 11
                              }
                            }
                          },
                          'OrderPreview': {
                            'fields': {
                              'currency': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'items': {
                                'rule': 'repeated',
                                'type': 'OrderPreviewItem',
                                'id': 2
                              },
                              'amounts': {
                                'type': 'Amounts',
                                'id': 3
                              }
                            }
                          },
                          'OrderPreviewItem': {
                            'fields': {
                              'orderPreviewItemId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'productId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'quantity': {
                                'type': 'int32',
                                'id': 3
                              },
                              'unitPrice': {
                                'type': 'int64',
                                'id': 4
                              },
                              'cycle': {
                                'type': 'Cycle',
                                'id': 5
                              },
                              'amounts': {
                                'type': 'Amounts',
                                'id': 6
                              },
                              'nextRecurringPayment': {
                                'type': 'RecurringPayment',
                                'id': 7
                              },
                              'coupon': {
                                'type': 'Coupon',
                                'id': 8
                              },
                              'overridePeriodStart': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 9
                              }
                            },
                            'nested': {
                              'Coupon': {
                                'fields': {
                                  'couponId': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 1,
                                    'options': {
                                      '(wix.api.format)': 'GUID'
                                    }
                                  },
                                  'couponDisplayName': {
                                    'type': 'google.protobuf.StringValue',
                                    'id': 2
                                  }
                                }
                              }
                            }
                          },
                          'OrderService': {
                            'methods': {
                              'CreateOrder': {
                                'requestType': 'CreateOrderRequest',
                                'responseType': 'CreateOrderResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/orders',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'CreateOrderRequest.order.order_line_items',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_ORDERS'
                                }
                              },
                              'PreviewOrder': {
                                'requestType': 'PreviewOrderRequest',
                                'responseType': 'PreviewOrderResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/orders/preview',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'PreviewOrderRequest.order.order_line_items',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_ORDERS'
                                }
                              }
                            }
                          },
                          'CreateOrderRequest': {
                            'fields': {
                              'order': {
                                'type': 'Order',
                                'id': 1
                              },
                              'orderTaxContext': {
                                'type': 'OrderTaxContext',
                                'id': 2
                              },
                              'idempotencyKey': {
                                'type': 'google.protobuf.StringValue',
                                'id': 3
                              }
                            }
                          },
                          'CreateOrderResponse': {
                            'fields': {
                              'order': {
                                'type': 'Order',
                                'id': 1
                              }
                            }
                          },
                          'PreviewOrderRequest': {
                            'fields': {
                              'order': {
                                'type': 'Order',
                                'id': 1
                              },
                              'orderTaxContext': {
                                'type': 'OrderTaxContext',
                                'id': 2
                              }
                            }
                          },
                          'PreviewOrderResponse': {
                            'fields': {
                              'orderPreview': {
                                'type': 'OrderPreview',
                                'id': 1
                              }
                            }
                          },
                          'PaymentMethodService': {
                            'methods': {
                              'ListPaymentMethods': {
                                'requestType': 'ListPaymentMethodsRequest',
                                'responseType': 'ListPaymentMethodsResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/payment-methods',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'ListPaymentMethodsRequest.min_cycle',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PAYMENT_METHODS'
                                }
                              }
                            }
                          },
                          'ListPaymentMethodsRequest': {
                            'fields': {
                              'currency': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'country': {
                                'type': 'google.protobuf.StringValue',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'COUNTRY'
                                }
                              },
                              'minCycle': {
                                'type': 'Cycle',
                                'id': 3
                              }
                            }
                          },
                          'ListPaymentMethodsResponse': {
                            'fields': {
                              'localPaymentMethods': {
                                'rule': 'repeated',
                                'type': 'LocalPaymentMethods',
                                'id': 1
                              }
                            }
                          },
                          'PaymentSourceService': {
                            'methods': {
                              'ListPaymentSources': {
                                'requestType': 'ListPaymentSourcesRequest',
                                'responseType': 'ListPaymentSourcesResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/payment-sources',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PAYMENT_SOURCES'
                                }
                              },
                              'GetPaymentSource': {
                                'requestType': 'GetPaymentSourceRequest',
                                'responseType': 'GetPaymentSourceResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/payment-sources/{payment_source_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PAYMENT_SOURCES'
                                }
                              },
                              'CreatePaymentSource': {
                                'requestType': 'CreatePaymentSourceRequest',
                                'responseType': 'CreatePaymentSourceResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/payment-sources',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'CreatePaymentSourceRequest.payment_source_details.payment_method_selector.sepa_details.account_holder_name',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PAYMENT_SOURCES'
                                }
                              },
                              'UpdatePaymentSource': {
                                'requestType': 'UpdatePaymentSourceRequest',
                                'responseType': 'UpdatePaymentSourceResponse',
                                'options': {
                                  '(google.api.http).patch': '/api/v1/payment-sources/{paymentSource.payment_source_id}',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'UpdatePaymentSourceRequest.field_mask',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PAYMENT_SOURCES'
                                }
                              },
                              'DeletePaymentSource': {
                                'requestType': 'DeletePaymentSourceRequest',
                                'responseType': 'DeletePaymentSourceResponse',
                                'options': {
                                  '(google.api.http).delete': '/api/v1/payment-sources/{payment_source_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PAYMENT_SOURCES'
                                }
                              }
                            }
                          },
                          'ListPaymentSourcesRequest': {
                            'fields': {
                              'query': {
                                'type': 'wix.common.Query',
                                'id': 1
                              }
                            }
                          },
                          'ListPaymentSourcesResponse': {
                            'fields': {
                              'paymentSources': {
                                'rule': 'repeated',
                                'type': 'PaymentSource',
                                'id': 1
                              }
                            }
                          },
                          'GetPaymentSourceRequest': {
                            'fields': {
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'GetPaymentSourceResponse': {
                            'fields': {
                              'paymentSource': {
                                'type': 'PaymentSource',
                                'id': 1
                              }
                            }
                          },
                          'CreatePaymentSourceRequest': {
                            'fields': {
                              'paymentSourceDetails': {
                                'type': 'PaymentSourceDetails',
                                'id': 1
                              }
                            }
                          },
                          'CreatePaymentSourceResponse': {
                            'fields': {
                              'paymentSource': {
                                'type': 'PaymentSource',
                                'id': 1
                              }
                            }
                          },
                          'UpdatePaymentSourceRequest': {
                            'fields': {
                              'paymentSource': {
                                'type': 'PaymentSource',
                                'id': 1
                              },
                              'fieldMask': {
                                'type': 'google.protobuf.FieldMask',
                                'id': 2
                              }
                            }
                          },
                          'UpdatePaymentSourceResponse': {
                            'fields': {
                              'paymentSource': {
                                'type': 'PaymentSource',
                                'id': 1
                              }
                            }
                          },
                          'DeletePaymentSourceRequest': {
                            'fields': {
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'DeletePaymentSourceResponse': {
                            'fields': {}
                          },
                          'Product': {
                            'fields': {
                              'productId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'vendorId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'name': {
                                'type': 'string',
                                'id': 3
                              },
                              'shippable': {
                                'type': 'bool',
                                'id': 4
                              },
                              'active': {
                                'type': 'bool',
                                'id': 5
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 6
                              }
                            }
                          },
                          'ProductPricePlan': {
                            'fields': {
                              'productPricePlanId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'productId': {
                                'type': 'string',
                                'id': 3,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'currency': {
                                'type': 'string',
                                'id': 4,
                                'options': {
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'amount': {
                                'type': 'int64',
                                'id': 5
                              },
                              'cycle': {
                                'type': 'Cycle',
                                'id': 6
                              }
                            }
                          },
                          'ProductPricePlanService': {
                            'methods': {
                              'ListProductPricePlans': {
                                'requestType': 'ListProductPricePlansRequest',
                                'responseType': 'ListProductPricePlansResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/products/{product_id}/product-price-plans',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PRODUCT_PRICE_PLANS'
                                }
                              },
                              'CreateProductPricePlan': {
                                'requestType': 'CreateProductPricePlanRequest',
                                'responseType': 'CreateProductPricePlanResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/products/{productPricePlan.product_id}/product-price-plans',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'CreateProductPricePlanRequest.product_price_plan.cycle',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCT_PRICE_PLANS'
                                }
                              },
                              'UpdateProductPricePlan': {
                                'requestType': 'UpdateProductPricePlanRequest',
                                'responseType': 'UpdateProductPricePlanResponse',
                                'options': {
                                  '(google.api.http).patch': '/api/v1/products/{productPricePlan.product_id}/product-price-plans/{productPricePlan.product_price_plan_id}',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'UpdateProductPricePlanRequest.field_mask',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCT_PRICE_PLANS'
                                }
                              },
                              'DeleteProductPricePlan': {
                                'requestType': 'DeleteProductPricePlanRequest',
                                'responseType': 'DeleteProductPricePlanResponse',
                                'options': {
                                  '(google.api.http).delete': '/api/v1/products/{product_id}/product-price-plans/{product_price_plan_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCT_PRICE_PLANS'
                                }
                              }
                            }
                          },
                          'ListProductPricePlansRequest': {
                            'fields': {
                              'productId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'ListProductPricePlansResponse': {
                            'fields': {
                              'productPricePlans': {
                                'rule': 'repeated',
                                'type': 'ProductPricePlan',
                                'id': 1
                              }
                            }
                          },
                          'CreateProductPricePlanRequest': {
                            'fields': {
                              'productPricePlan': {
                                'type': 'ProductPricePlan',
                                'id': 1
                              }
                            }
                          },
                          'CreateProductPricePlanResponse': {
                            'fields': {
                              'productPricePlan': {
                                'type': 'ProductPricePlan',
                                'id': 1
                              }
                            }
                          },
                          'UpdateProductPricePlanRequest': {
                            'fields': {
                              'productPricePlan': {
                                'type': 'ProductPricePlan',
                                'id': 1
                              },
                              'fieldMask': {
                                'type': 'google.protobuf.FieldMask',
                                'id': 2
                              }
                            }
                          },
                          'UpdateProductPricePlanResponse': {
                            'fields': {
                              'productPricePlan': {
                                'type': 'ProductPricePlan',
                                'id': 1
                              }
                            }
                          },
                          'DeleteProductPricePlanRequest': {
                            'fields': {
                              'productId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'productPricePlanId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'DeleteProductPricePlanResponse': {
                            'fields': {}
                          },
                          'ProductService': {
                            'methods': {
                              'ListProducts': {
                                'requestType': 'ListProductsRequest',
                                'responseType': 'ListProductsResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/products',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PRODUCTS'
                                }
                              },
                              'GetProduct': {
                                'requestType': 'GetProductRequest',
                                'responseType': 'GetProductResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/products/{product_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_PRODUCTS'
                                }
                              },
                              'CreateProduct': {
                                'requestType': 'CreateProductRequest',
                                'responseType': 'CreateProductResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/products',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'CreateProductRequest.product.name',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCTS'
                                }
                              },
                              'UpdateProduct': {
                                'requestType': 'UpdateProductRequest',
                                'responseType': 'UpdateProductResponse',
                                'options': {
                                  '(google.api.http).patch': '/api/v1/products/{product.product_id}',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'UpdateProductRequest.field_mask',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCTS'
                                }
                              },
                              'DeleteProduct': {
                                'requestType': 'DeleteProductRequest',
                                'responseType': 'DeleteProductResponse',
                                'options': {
                                  '(google.api.http).delete': '/api/v1/products/{product_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_PRODUCTS'
                                }
                              }
                            }
                          },
                          'ListProductsRequest': {
                            'fields': {}
                          },
                          'ListProductsResponse': {
                            'fields': {
                              'products': {
                                'rule': 'repeated',
                                'type': 'Product',
                                'id': 1
                              }
                            }
                          },
                          'GetProductRequest': {
                            'fields': {
                              'productId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'GetProductResponse': {
                            'fields': {
                              'product': {
                                'type': 'Product',
                                'id': 1
                              }
                            }
                          },
                          'CreateProductRequest': {
                            'fields': {
                              'product': {
                                'type': 'Product',
                                'id': 1
                              }
                            }
                          },
                          'CreateProductResponse': {
                            'fields': {
                              'product': {
                                'type': 'Product',
                                'id': 1
                              }
                            }
                          },
                          'UpdateProductRequest': {
                            'fields': {
                              'product': {
                                'type': 'Product',
                                'id': 1
                              },
                              'fieldMask': {
                                'type': 'google.protobuf.FieldMask',
                                'id': 2
                              }
                            }
                          },
                          'UpdateProductResponse': {
                            'fields': {
                              'product': {
                                'type': 'Product',
                                'id': 1
                              }
                            }
                          },
                          'DeleteProductRequest': {
                            'fields': {
                              'productId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'DeleteProductResponse': {
                            'fields': {}
                          },
                          'Service': {
                            'fields': {
                              'serviceId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'lastInvoiceId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'productId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 3,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'createdOn': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 4,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'endOfPeriod': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 5,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'nextRenewal': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 6,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'lastRenewal': {
                                'type': 'google.protobuf.Timestamp',
                                'id': 7,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'status': {
                                'type': 'ServiceStatus',
                                'id': 8,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'currency': {
                                'type': 'string',
                                'id': 9,
                                'options': {
                                  '(wix.api.readOnly)': true,
                                  '(wix.api.format)': 'CURRENCY'
                                }
                              },
                              'cycle': {
                                'type': 'Cycle',
                                'id': 10,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'quantity': {
                                'type': 'int32',
                                'id': 11,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 12,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'metadata': {
                                'keyType': 'string',
                                'type': 'string',
                                'id': 13,
                                'options': {
                                  '(wix.api.readOnly)': true
                                }
                              }
                            },
                            'nested': {
                              'ServiceStatus': {
                                'values': {
                                  'UNKNOWN': 0,
                                  'ACTIVE': 1,
                                  'CANCELED': 2,
                                  'FRAUDULENT': 3,
                                  'SUSPENDED': 4,
                                  'UNPAID': 5
                                }
                              }
                            }
                          },
                          'ServiceService': {
                            'methods': {
                              'ListServices': {
                                'requestType': 'ListServicesRequest',
                                'responseType': 'ListServicesResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/services',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_SERVICES'
                                }
                              },
                              'GetService': {
                                'requestType': 'GetServiceRequest',
                                'responseType': 'GetServiceResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/services/{service_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_SERVICES'
                                }
                              },
                              'UpdateService': {
                                'requestType': 'UpdateServiceRequest',
                                'responseType': 'UpdateServiceResponse',
                                'options': {
                                  '(google.api.http).patch': '/api/v1/services/{service.service_id}',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'UpdateServiceRequest.field_mask',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_SERVICES'
                                }
                              },
                              'BulkUpdatePaymentSource': {
                                'requestType': 'BulkUpdatePaymentSourceRequest',
                                'responseType': 'BulkUpdatePaymentSourceResponse',
                                'options': {
                                  '(google.api.http).post': '/api/v1/services/bulkUpdatePaymentSource',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'BulkUpdatePaymentSourceRequest.service_ids',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_SERVICES'
                                }
                              }
                            }
                          },
                          'ListServicesRequest': {
                            'fields': {
                              'paging': {
                                'type': 'wix.common.Paging',
                                'id': 1
                              }
                            }
                          },
                          'ListServicesResponse': {
                            'fields': {
                              'services': {
                                'rule': 'repeated',
                                'type': 'Service',
                                'id': 1
                              }
                            }
                          },
                          'GetServiceRequest': {
                            'fields': {
                              'serviceId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'GetServiceResponse': {
                            'fields': {
                              'service': {
                                'type': 'Service',
                                'id': 1
                              }
                            }
                          },
                          'UpdateServiceRequest': {
                            'fields': {
                              'service': {
                                'type': 'Service',
                                'id': 1
                              },
                              'fieldMask': {
                                'type': 'google.protobuf.FieldMask',
                                'id': 2
                              }
                            }
                          },
                          'UpdateServiceResponse': {
                            'fields': {
                              'service': {
                                'type': 'Service',
                                'id': 1
                              }
                            }
                          },
                          'BulkUpdatePaymentSourceRequest': {
                            'fields': {
                              'serviceIds': {
                                'rule': 'repeated',
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.minLength)': 1
                                }
                              },
                              'paymentSourceId': {
                                'type': 'string',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              },
                              'autoCreateVerificationInvoice': {
                                'type': 'bool',
                                'id': 3
                              }
                            }
                          },
                          'BulkUpdatePaymentSourceResponse': {
                            'fields': {
                              'services': {
                                'rule': 'repeated',
                                'type': 'Service',
                                'id': 1
                              },
                              'verificationInvoiceId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 2,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'TaxService': {
                            'methods': {
                              'GetTax': {
                                'requestType': 'GetTaxRequest',
                                'responseType': 'GetTaxResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/taxes/{country}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_TAXES'
                                }
                              }
                            }
                          },
                          'GetTaxRequest': {
                            'fields': {
                              'country': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'COUNTRY'
                                }
                              }
                            }
                          },
                          'GetTaxResponse': {
                            'fields': {
                              'tax': {
                                'type': 'Tax',
                                'id': 1
                              }
                            }
                          },
                          'Vendor': {
                            'fields': {
                              'vendorId': {
                                'type': 'google.protobuf.StringValue',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID',
                                  '(wix.api.readOnly)': true
                                }
                              },
                              'name': {
                                'type': 'string',
                                'id': 2
                              }
                            }
                          },
                          'VendorService': {
                            'methods': {
                              'GetVendor': {
                                'requestType': 'GetVendorRequest',
                                'responseType': 'GetVendorResponse',
                                'options': {
                                  '(google.api.http).get': '/api/v1/vendors/{vendor_id}',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.permission).name': 'BILLING.ORG_READ_VENDORS'
                                }
                              },
                              'UpdateVendor': {
                                'requestType': 'UpdateVendorRequest',
                                'responseType': 'UpdateVendorResponse',
                                'options': {
                                  '(google.api.http).patch': '/api/v1/vendors/{vendor.vendor_id}',
                                  '(google.api.http).body': '*',
                                  '(wix.api.maturity)': 'ALPHA',
                                  '(wix.api.exposure)': 'PUBLIC',
                                  '(wix.api.required)': 'UpdateVendorRequest.field_mask',
                                  '(wix.api.permission).name': 'BILLING.ORG_MANAGE_VENDORS'
                                }
                              }
                            }
                          },
                          'GetVendorRequest': {
                            'fields': {
                              'vendorId': {
                                'type': 'string',
                                'id': 1,
                                'options': {
                                  '(wix.api.format)': 'GUID'
                                }
                              }
                            }
                          },
                          'GetVendorResponse': {
                            'fields': {
                              'vendor': {
                                'type': 'Vendor',
                                'id': 1
                              }
                            }
                          },
                          'UpdateVendorRequest': {
                            'fields': {
                              'vendor': {
                                'type': 'Vendor',
                                'id': 1
                              },
                              'fieldMask': {
                                'type': 'google.protobuf.FieldMask',
                                'id': 2
                              }
                            }
                          },
                          'UpdateVendorResponse': {
                            'fields': {
                              'vendor': {
                                'type': 'Vendor',
                                'id': 1
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      'wix': {
        'nested': {
          'api': {
            'options': {
              'java_multiple_files': true,
              'java_outer_classname': 'PermissionsProto',
              'java_package': 'com.wix.api'
            },
            'nested': {
              'serviceMaturity': {
                'type': 'Maturity',
                'id': 50104,
                'extend': 'google.protobuf.ServiceOptions'
              },
              'serviceExposure': {
                'type': 'Exposure',
                'id': 50105,
                'extend': 'google.protobuf.ServiceOptions'
              },
              'exposure': {
                'type': 'Exposure',
                'id': 50101,
                'extend': 'google.protobuf.MethodOptions'
              },
              'maturity': {
                'type': 'Maturity',
                'id': 50102,
                'extend': 'google.protobuf.MethodOptions'
              },
              'Exposure': {
                'values': {
                  'PRIVATE': 0,
                  'INTERNAL': 1,
                  'PUBLIC': 2
                }
              },
              'Maturity': {
                'values': {
                  'ALPHA': 0,
                  'BETA': 1,
                  'IA': 2,
                  'GA': 3
                }
              },
              'max': {
                'type': 'double',
                'id': 50201,
                'extend': 'google.protobuf.FieldOptions'
              },
              'min': {
                'type': 'double',
                'id': 50202,
                'extend': 'google.protobuf.FieldOptions'
              },
              'maxLength': {
                'type': 'int32',
                'id': 50203,
                'extend': 'google.protobuf.FieldOptions'
              },
              'minLength': {
                'type': 'int32',
                'id': 50204,
                'extend': 'google.protobuf.FieldOptions'
              },
              'maxSize': {
                'type': 'int32',
                'id': 50209,
                'extend': 'google.protobuf.FieldOptions'
              },
              'minSize': {
                'type': 'int32',
                'id': 50210,
                'extend': 'google.protobuf.FieldOptions'
              },
              'format': {
                'type': 'Format',
                'id': 50205,
                'extend': 'google.protobuf.FieldOptions'
              },
              'readOnly': {
                'type': 'bool',
                'id': 50208,
                'extend': 'google.protobuf.FieldOptions'
              },
              'required': {
                'rule': 'repeated',
                'type': 'string',
                'id': 50200,
                'extend': 'google.protobuf.MethodOptions'
              },
              'Format': {
                'values': {
                  'EMAIL': 0,
                  'HOSTNAME': 1,
                  'IPV4': 2,
                  'IPV6': 3,
                  'URI': 4,
                  'PHONE': 7,
                  'CREDIT_CARD': 8,
                  'GUID': 9,
                  'COUNTRY': 10,
                  'LANGUAGE': 11,
                  'DECIMAL_VALUE': 12,
                  'CURRENCY': 13
                }
              },
              'callback': {
                'rule': 'repeated',
                'type': 'Callback',
                'id': 50000,
                'extend': 'google.protobuf.MethodOptions',
                'options': {
                  'packed': false
                }
              },
              'event': {
                'rule': 'repeated',
                'type': 'Callback',
                'id': 50000,
                'extend': 'google.protobuf.ServiceOptions',
                'options': {
                  'packed': false
                }
              },
              'Callback': {
                'fields': {
                  'topic': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 1
                  },
                  'payload': {
                    'rule': 'required',
                    'type': 'string',
                    'id': 2
                  },
                  'permission': {
                    'type': 'string',
                    'id': 3
                  }
                }
              },
              'permission': {
                'type': 'PermissionRule',
                'id': 50301,
                'extend': 'google.protobuf.MethodOptions'
              },
              'PermissionRule': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  }
                }
              }
            }
          },
          'common': {
            'options': {
              'java_multiple_files': true,
              'java_package': 'com.wix.common',
              'java_outer_classname': 'WixLinkProto'
            },
            'nested': {
              'Paging': {
                'fields': {
                  'limit': {
                    'type': 'google.protobuf.Int32Value',
                    'id': 1,
                    'options': {
                      '(wix.api.min)': 0
                    }
                  },
                  'offset': {
                    'type': 'google.protobuf.Int32Value',
                    'id': 2,
                    'options': {
                      '(wix.api.min)': 0
                    }
                  }
                }
              },
              'CursorPaging': {
                'fields': {
                  'limit': {
                    'type': 'google.protobuf.Int32Value',
                    'id': 1,
                    'options': {
                      '(wix.api.min)': 0
                    }
                  },
                  'cursor': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  }
                }
              },
              'Query': {
                'fields': {
                  'filter': {
                    'type': 'google.protobuf.Value',
                    'id': 1
                  },
                  'sort': {
                    'rule': 'repeated',
                    'type': 'Sorting',
                    'id': 2
                  },
                  'paging': {
                    'type': 'Paging',
                    'id': 3
                  },
                  'fields': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 4
                  },
                  'fieldsets': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 5
                  }
                }
              },
              'Sorting': {
                'fields': {
                  'fieldName': {
                    'type': 'string',
                    'id': 1
                  },
                  'order': {
                    'type': 'SortOrder',
                    'id': 2
                  }
                }
              },
              'SortOrder': {
                'values': {
                  'ASC': 0,
                  'DESC': 1
                }
              },
              'Address': {
                'oneofs': {
                  'street': {
                    'oneof': [
                      'streetAddress',
                      'addressLine'
                    ]
                  }
                },
                'fields': {
                  'country': {
                    'type': 'google.protobuf.StringValue',
                    'id': 1,
                    'options': {
                      '(wix.api.format)': 'COUNTRY'
                    }
                  },
                  'subdivision': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  },
                  'city': {
                    'type': 'google.protobuf.StringValue',
                    'id': 3
                  },
                  'postalCode': {
                    'type': 'google.protobuf.StringValue',
                    'id': 4
                  },
                  'streetAddress': {
                    'type': 'StreetAddress',
                    'id': 5
                  },
                  'addressLine': {
                    'type': 'google.protobuf.StringValue',
                    'id': 6
                  },
                  'addressLine_2': {
                    'type': 'google.protobuf.StringValue',
                    'id': 7
                  }
                }
              },
              'StreetAddress': {
                'fields': {
                  'number': {
                    'type': 'string',
                    'id': 1
                  },
                  'name': {
                    'type': 'string',
                    'id': 2
                  }
                }
              },
              'AddressContactDetails': {
                'fields': {
                  'fullName': {
                    'type': 'google.protobuf.StringValue',
                    'id': 1
                  },
                  'phone': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2,
                    'options': {
                      '(wix.api.format)': 'PHONE'
                    }
                  },
                  'company': {
                    'type': 'google.protobuf.StringValue',
                    'id': 3
                  },
                  'email': {
                    'type': 'google.protobuf.StringValue',
                    'id': 4,
                    'options': {
                      '(wix.api.format)': 'EMAIL'
                    }
                  }
                }
              },
              'FullAddressContactDetails': {
                'fields': {
                  'firstName': {
                    'type': 'google.protobuf.StringValue',
                    'id': 1
                  },
                  'lastName': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  },
                  'phone': {
                    'type': 'google.protobuf.StringValue',
                    'id': 3,
                    'options': {
                      '(wix.api.format)': 'PHONE'
                    }
                  },
                  'company': {
                    'type': 'google.protobuf.StringValue',
                    'id': 4
                  },
                  'email': {
                    'type': 'google.protobuf.StringValue',
                    'id': 5,
                    'options': {
                      '(wix.api.format)': 'EMAIL'
                    }
                  },
                  'vatId': {
                    'type': 'VatId',
                    'id': 7
                  }
                }
              },
              'VatId': {
                'fields': {
                  'id': {
                    'type': 'string',
                    'id': 1
                  },
                  'type': {
                    'type': 'VatType',
                    'id': 2
                  }
                }
              },
              'VatType': {
                'values': {
                  'UNSPECIFIED': 0,
                  'CPF': 1,
                  'CNPJ': 2
                }
              },
              'AddressLocation': {
                'fields': {
                  'latitude': {
                    'type': 'google.protobuf.DoubleValue',
                    'id': 1
                  },
                  'longitude': {
                    'type': 'google.protobuf.DoubleValue',
                    'id': 2
                  }
                }
              },
              'Image': {
                'fields': {
                  'id': {
                    'type': 'string',
                    'id': 1
                  },
                  'url': {
                    'type': 'string',
                    'id': 2
                  },
                  'height': {
                    'type': 'int32',
                    'id': 3
                  },
                  'width': {
                    'type': 'int32',
                    'id': 4
                  }
                }
              },
              'Video': {
                'fields': {
                  'id': {
                    'type': 'string',
                    'id': 1
                  },
                  'url': {
                    'type': 'string',
                    'id': 2
                  },
                  'height': {
                    'type': 'int32',
                    'id': 3
                  },
                  'width': {
                    'type': 'int32',
                    'id': 4
                  },
                  'thumbnail': {
                    'type': 'Image',
                    'id': 5
                  }
                }
              },
              'Document': {
                'fields': {
                  'id': {
                    'type': 'string',
                    'id': 1
                  },
                  'url': {
                    'type': 'string',
                    'id': 2
                  }
                }
              },
              'MediaItem': {
                'oneofs': {
                  'media': {
                    'oneof': [
                      'image',
                      'video',
                      'document'
                    ]
                  }
                },
                'fields': {
                  'image': {
                    'type': 'Image',
                    'id': 1
                  },
                  'video': {
                    'type': 'Video',
                    'id': 2
                  },
                  'document': {
                    'type': 'Document',
                    'id': 3
                  }
                }
              },
              'PageUrl': {
                'fields': {
                  'base': {
                    'type': 'string',
                    'id': 1
                  },
                  'path': {
                    'type': 'string',
                    'id': 2
                  }
                }
              },
              'WixLink': {
                'oneofs': {
                  'Link': {
                    'oneof': [
                      'external',
                      'page',
                      'anchor',
                      'dynamicPage',
                      'document',
                      'email',
                      'phone',
                      'address',
                      'whatsApp'
                    ]
                  }
                },
                'fields': {
                  'external': {
                    'type': 'ExternalLink',
                    'id': 1
                  },
                  'page': {
                    'type': 'PageLink',
                    'id': 2
                  },
                  'anchor': {
                    'type': 'AnchorLink',
                    'id': 3
                  },
                  'dynamicPage': {
                    'type': 'DynamicPageLink',
                    'id': 4
                  },
                  'document': {
                    'type': 'DocumentLink',
                    'id': 5
                  },
                  'email': {
                    'type': 'EmailLink',
                    'id': 6
                  },
                  'phone': {
                    'type': 'PhoneLink',
                    'id': 7
                  },
                  'address': {
                    'type': 'AddressLink',
                    'id': 8
                  },
                  'whatsApp': {
                    'type': 'WhatsAppLink',
                    'id': 9
                  }
                }
              },
              'ExternalLink': {
                'fields': {
                  'url': {
                    'type': 'string',
                    'id': 1,
                    'options': {
                      '(wix.api.format)': 'URI'
                    }
                  },
                  'target': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  }
                }
              },
              'PageLink': {
                'fields': {
                  'pageId': {
                    'type': 'string',
                    'id': 1
                  },
                  'target': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  }
                }
              },
              'AnchorLink': {
                'fields': {
                  'anchorName': {
                    'type': 'string',
                    'id': 1
                  },
                  'anchorDataId': {
                    'type': 'string',
                    'id': 2
                  },
                  'pageId': {
                    'type': 'string',
                    'id': 3
                  }
                }
              },
              'DynamicPageLink': {
                'fields': {
                  'routerId': {
                    'type': 'string',
                    'id': 1
                  },
                  'innerRoute': {
                    'type': 'string',
                    'id': 2
                  },
                  'anchorDataId': {
                    'type': 'google.protobuf.StringValue',
                    'id': 3
                  }
                }
              },
              'DocumentLink': {
                'fields': {
                  'docId': {
                    'type': 'string',
                    'id': 1
                  },
                  'name': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  },
                  'indexable': {
                    'type': 'bool',
                    'id': 3
                  }
                }
              },
              'EmailLink': {
                'fields': {
                  'recipient': {
                    'type': 'string',
                    'id': 1,
                    'options': {
                      '(wix.api.format)': 'EMAIL'
                    }
                  },
                  'subject': {
                    'type': 'google.protobuf.StringValue',
                    'id': 2
                  },
                  'body': {
                    'type': 'google.protobuf.StringValue',
                    'id': 3
                  }
                }
              },
              'PhoneLink': {
                'fields': {
                  'phoneNumber': {
                    'type': 'string',
                    'id': 1,
                    'options': {
                      '(wix.api.format)': 'PHONE',
                      '(wix.api.maxLength)': 100
                    }
                  }
                }
              },
              'AddressLink': {
                'fields': {
                  'address': {
                    'type': 'string',
                    'id': 1
                  }
                }
              },
              'WhatsAppLink': {
                'fields': {
                  'phoneNumber': {
                    'type': 'string',
                    'id': 1,
                    'options': {
                      '(wix.api.format)': 'PHONE'
                    }
                  }
                }
              }
            }
          }
        }
      },
      'google': {
        'nested': {
          'protobuf': {
            'options': {
              'go_package': 'github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor',
              'java_package': 'com.google.protobuf',
              'java_outer_classname': 'DescriptorProtos',
              'csharp_namespace': 'Google.Protobuf.Reflection',
              'objc_class_prefix': 'GPB',
              'cc_enable_arenas': true,
              'optimize_for': 'SPEED'
            },
            'nested': {
              'DoubleValue': {
                'fields': {
                  'value': {
                    'type': 'double',
                    'id': 1
                  }
                }
              },
              'FloatValue': {
                'fields': {
                  'value': {
                    'type': 'float',
                    'id': 1
                  }
                }
              },
              'Int64Value': {
                'fields': {
                  'value': {
                    'type': 'int64',
                    'id': 1
                  }
                }
              },
              'UInt64Value': {
                'fields': {
                  'value': {
                    'type': 'uint64',
                    'id': 1
                  }
                }
              },
              'Int32Value': {
                'fields': {
                  'value': {
                    'type': 'int32',
                    'id': 1
                  }
                }
              },
              'UInt32Value': {
                'fields': {
                  'value': {
                    'type': 'uint32',
                    'id': 1
                  }
                }
              },
              'BoolValue': {
                'fields': {
                  'value': {
                    'type': 'bool',
                    'id': 1
                  }
                }
              },
              'StringValue': {
                'fields': {
                  'value': {
                    'type': 'string',
                    'id': 1
                  }
                }
              },
              'BytesValue': {
                'fields': {
                  'value': {
                    'type': 'bytes',
                    'id': 1
                  }
                }
              },
              'FileDescriptorSet': {
                'fields': {
                  'file': {
                    'rule': 'repeated',
                    'type': 'FileDescriptorProto',
                    'id': 1
                  }
                }
              },
              'FileDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'package': {
                    'type': 'string',
                    'id': 2
                  },
                  'dependency': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 3
                  },
                  'publicDependency': {
                    'rule': 'repeated',
                    'type': 'int32',
                    'id': 10,
                    'options': {
                      'packed': false
                    }
                  },
                  'weakDependency': {
                    'rule': 'repeated',
                    'type': 'int32',
                    'id': 11,
                    'options': {
                      'packed': false
                    }
                  },
                  'messageType': {
                    'rule': 'repeated',
                    'type': 'DescriptorProto',
                    'id': 4
                  },
                  'enumType': {
                    'rule': 'repeated',
                    'type': 'EnumDescriptorProto',
                    'id': 5
                  },
                  'service': {
                    'rule': 'repeated',
                    'type': 'ServiceDescriptorProto',
                    'id': 6
                  },
                  'extension': {
                    'rule': 'repeated',
                    'type': 'FieldDescriptorProto',
                    'id': 7
                  },
                  'options': {
                    'type': 'FileOptions',
                    'id': 8
                  },
                  'sourceCodeInfo': {
                    'type': 'SourceCodeInfo',
                    'id': 9
                  },
                  'syntax': {
                    'type': 'string',
                    'id': 12
                  }
                }
              },
              'DescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'field': {
                    'rule': 'repeated',
                    'type': 'FieldDescriptorProto',
                    'id': 2
                  },
                  'extension': {
                    'rule': 'repeated',
                    'type': 'FieldDescriptorProto',
                    'id': 6
                  },
                  'nestedType': {
                    'rule': 'repeated',
                    'type': 'DescriptorProto',
                    'id': 3
                  },
                  'enumType': {
                    'rule': 'repeated',
                    'type': 'EnumDescriptorProto',
                    'id': 4
                  },
                  'extensionRange': {
                    'rule': 'repeated',
                    'type': 'ExtensionRange',
                    'id': 5
                  },
                  'oneofDecl': {
                    'rule': 'repeated',
                    'type': 'OneofDescriptorProto',
                    'id': 8
                  },
                  'options': {
                    'type': 'MessageOptions',
                    'id': 7
                  },
                  'reservedRange': {
                    'rule': 'repeated',
                    'type': 'ReservedRange',
                    'id': 9
                  },
                  'reservedName': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 10
                  }
                },
                'nested': {
                  'ExtensionRange': {
                    'fields': {
                      'start': {
                        'type': 'int32',
                        'id': 1
                      },
                      'end': {
                        'type': 'int32',
                        'id': 2
                      },
                      'options': {
                        'type': 'ExtensionRangeOptions',
                        'id': 3
                      }
                    }
                  },
                  'ReservedRange': {
                    'fields': {
                      'start': {
                        'type': 'int32',
                        'id': 1
                      },
                      'end': {
                        'type': 'int32',
                        'id': 2
                      }
                    }
                  }
                }
              },
              'ExtensionRangeOptions': {
                'fields': {
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]]
              },
              'FieldDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'number': {
                    'type': 'int32',
                    'id': 3
                  },
                  'label': {
                    'type': 'Label',
                    'id': 4
                  },
                  'type': {
                    'type': 'Type',
                    'id': 5
                  },
                  'typeName': {
                    'type': 'string',
                    'id': 6
                  },
                  'extendee': {
                    'type': 'string',
                    'id': 2
                  },
                  'defaultValue': {
                    'type': 'string',
                    'id': 7
                  },
                  'oneofIndex': {
                    'type': 'int32',
                    'id': 9
                  },
                  'jsonName': {
                    'type': 'string',
                    'id': 10
                  },
                  'options': {
                    'type': 'FieldOptions',
                    'id': 8
                  }
                },
                'nested': {
                  'Type': {
                    'values': {
                      'TYPE_DOUBLE': 1,
                      'TYPE_FLOAT': 2,
                      'TYPE_INT64': 3,
                      'TYPE_UINT64': 4,
                      'TYPE_INT32': 5,
                      'TYPE_FIXED64': 6,
                      'TYPE_FIXED32': 7,
                      'TYPE_BOOL': 8,
                      'TYPE_STRING': 9,
                      'TYPE_GROUP': 10,
                      'TYPE_MESSAGE': 11,
                      'TYPE_BYTES': 12,
                      'TYPE_UINT32': 13,
                      'TYPE_ENUM': 14,
                      'TYPE_SFIXED32': 15,
                      'TYPE_SFIXED64': 16,
                      'TYPE_SINT32': 17,
                      'TYPE_SINT64': 18
                    }
                  },
                  'Label': {
                    'values': {
                      'LABEL_OPTIONAL': 1,
                      'LABEL_REQUIRED': 2,
                      'LABEL_REPEATED': 3
                    }
                  }
                }
              },
              'OneofDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'options': {
                    'type': 'OneofOptions',
                    'id': 2
                  }
                }
              },
              'EnumDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'value': {
                    'rule': 'repeated',
                    'type': 'EnumValueDescriptorProto',
                    'id': 2
                  },
                  'options': {
                    'type': 'EnumOptions',
                    'id': 3
                  },
                  'reservedRange': {
                    'rule': 'repeated',
                    'type': 'EnumReservedRange',
                    'id': 4
                  },
                  'reservedName': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 5
                  }
                },
                'nested': {
                  'EnumReservedRange': {
                    'fields': {
                      'start': {
                        'type': 'int32',
                        'id': 1
                      },
                      'end': {
                        'type': 'int32',
                        'id': 2
                      }
                    }
                  }
                }
              },
              'EnumValueDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'number': {
                    'type': 'int32',
                    'id': 2
                  },
                  'options': {
                    'type': 'EnumValueOptions',
                    'id': 3
                  }
                }
              },
              'ServiceDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'method': {
                    'rule': 'repeated',
                    'type': 'MethodDescriptorProto',
                    'id': 2
                  },
                  'options': {
                    'type': 'ServiceOptions',
                    'id': 3
                  }
                }
              },
              'MethodDescriptorProto': {
                'fields': {
                  'name': {
                    'type': 'string',
                    'id': 1
                  },
                  'inputType': {
                    'type': 'string',
                    'id': 2
                  },
                  'outputType': {
                    'type': 'string',
                    'id': 3
                  },
                  'options': {
                    'type': 'MethodOptions',
                    'id': 4
                  },
                  'clientStreaming': {
                    'type': 'bool',
                    'id': 5,
                    'options': {
                      'default': false
                    }
                  },
                  'serverStreaming': {
                    'type': 'bool',
                    'id': 6,
                    'options': {
                      'default': false
                    }
                  }
                }
              },
              'FileOptions': {
                'fields': {
                  'javaPackage': {
                    'type': 'string',
                    'id': 1
                  },
                  'javaOuterClassname': {
                    'type': 'string',
                    'id': 8
                  },
                  'javaMultipleFiles': {
                    'type': 'bool',
                    'id': 10,
                    'options': {
                      'default': false
                    }
                  },
                  'javaGenerateEqualsAndHash': {
                    'type': 'bool',
                    'id': 20,
                    'options': {
                      'deprecated': true
                    }
                  },
                  'javaStringCheckUtf8': {
                    'type': 'bool',
                    'id': 27,
                    'options': {
                      'default': false
                    }
                  },
                  'optimizeFor': {
                    'type': 'OptimizeMode',
                    'id': 9,
                    'options': {
                      'default': 'SPEED'
                    }
                  },
                  'goPackage': {
                    'type': 'string',
                    'id': 11
                  },
                  'ccGenericServices': {
                    'type': 'bool',
                    'id': 16,
                    'options': {
                      'default': false
                    }
                  },
                  'javaGenericServices': {
                    'type': 'bool',
                    'id': 17,
                    'options': {
                      'default': false
                    }
                  },
                  'pyGenericServices': {
                    'type': 'bool',
                    'id': 18,
                    'options': {
                      'default': false
                    }
                  },
                  'phpGenericServices': {
                    'type': 'bool',
                    'id': 42,
                    'options': {
                      'default': false
                    }
                  },
                  'deprecated': {
                    'type': 'bool',
                    'id': 23,
                    'options': {
                      'default': false
                    }
                  },
                  'ccEnableArenas': {
                    'type': 'bool',
                    'id': 31,
                    'options': {
                      'default': false
                    }
                  },
                  'objcClassPrefix': {
                    'type': 'string',
                    'id': 36
                  },
                  'csharpNamespace': {
                    'type': 'string',
                    'id': 37
                  },
                  'swiftPrefix': {
                    'type': 'string',
                    'id': 39
                  },
                  'phpClassPrefix': {
                    'type': 'string',
                    'id': 40
                  },
                  'phpNamespace': {
                    'type': 'string',
                    'id': 41
                  },
                  'phpMetadataNamespace': {
                    'type': 'string',
                    'id': 44
                  },
                  'rubyPackage': {
                    'type': 'string',
                    'id': 45
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]],
                'reserved': [[
                  38,
                  38
                ]],
                'nested': {
                  'OptimizeMode': {
                    'values': {
                      'SPEED': 1,
                      'CODE_SIZE': 2,
                      'LITE_RUNTIME': 3
                    }
                  }
                }
              },
              'MessageOptions': {
                'fields': {
                  'messageSetWireFormat': {
                    'type': 'bool',
                    'id': 1,
                    'options': {
                      'default': false
                    }
                  },
                  'noStandardDescriptorAccessor': {
                    'type': 'bool',
                    'id': 2,
                    'options': {
                      'default': false
                    }
                  },
                  'deprecated': {
                    'type': 'bool',
                    'id': 3,
                    'options': {
                      'default': false
                    }
                  },
                  'mapEntry': {
                    'type': 'bool',
                    'id': 7
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]],
                'reserved': [
                  [
                    8,
                    8
                  ],
                  [
                    9,
                    9
                  ]
                ]
              },
              'FieldOptions': {
                'fields': {
                  'ctype': {
                    'type': 'CType',
                    'id': 1,
                    'options': {
                      'default': 'STRING'
                    }
                  },
                  'packed': {
                    'type': 'bool',
                    'id': 2
                  },
                  'jstype': {
                    'type': 'JSType',
                    'id': 6,
                    'options': {
                      'default': 'JS_NORMAL'
                    }
                  },
                  'lazy': {
                    'type': 'bool',
                    'id': 5,
                    'options': {
                      'default': false
                    }
                  },
                  'deprecated': {
                    'type': 'bool',
                    'id': 3,
                    'options': {
                      'default': false
                    }
                  },
                  'weak': {
                    'type': 'bool',
                    'id': 10,
                    'options': {
                      'default': false
                    }
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]],
                'reserved': [[
                  4,
                  4
                ]],
                'nested': {
                  'CType': {
                    'values': {
                      'STRING': 0,
                      'CORD': 1,
                      'STRING_PIECE': 2
                    }
                  },
                  'JSType': {
                    'values': {
                      'JS_NORMAL': 0,
                      'JS_STRING': 1,
                      'JS_NUMBER': 2
                    }
                  }
                }
              },
              'OneofOptions': {
                'fields': {
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]]
              },
              'EnumOptions': {
                'fields': {
                  'allowAlias': {
                    'type': 'bool',
                    'id': 2
                  },
                  'deprecated': {
                    'type': 'bool',
                    'id': 3,
                    'options': {
                      'default': false
                    }
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]],
                'reserved': [[
                  5,
                  5
                ]]
              },
              'EnumValueOptions': {
                'fields': {
                  'deprecated': {
                    'type': 'bool',
                    'id': 1,
                    'options': {
                      'default': false
                    }
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]]
              },
              'ServiceOptions': {
                'fields': {
                  'deprecated': {
                    'type': 'bool',
                    'id': 33,
                    'options': {
                      'default': false
                    }
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]]
              },
              'MethodOptions': {
                'fields': {
                  'deprecated': {
                    'type': 'bool',
                    'id': 33,
                    'options': {
                      'default': false
                    }
                  },
                  'idempotencyLevel': {
                    'type': 'IdempotencyLevel',
                    'id': 34,
                    'options': {
                      'default': 'IDEMPOTENCY_UNKNOWN'
                    }
                  },
                  'uninterpretedOption': {
                    'rule': 'repeated',
                    'type': 'UninterpretedOption',
                    'id': 999
                  }
                },
                'extensions': [[
                  1000,
                  536870911
                ]],
                'nested': {
                  'IdempotencyLevel': {
                    'values': {
                      'IDEMPOTENCY_UNKNOWN': 0,
                      'NO_SIDE_EFFECTS': 1,
                      'IDEMPOTENT': 2
                    }
                  }
                }
              },
              'UninterpretedOption': {
                'fields': {
                  'name': {
                    'rule': 'repeated',
                    'type': 'NamePart',
                    'id': 2
                  },
                  'identifierValue': {
                    'type': 'string',
                    'id': 3
                  },
                  'positiveIntValue': {
                    'type': 'uint64',
                    'id': 4
                  },
                  'negativeIntValue': {
                    'type': 'int64',
                    'id': 5
                  },
                  'doubleValue': {
                    'type': 'double',
                    'id': 6
                  },
                  'stringValue': {
                    'type': 'bytes',
                    'id': 7
                  },
                  'aggregateValue': {
                    'type': 'string',
                    'id': 8
                  }
                },
                'nested': {
                  'NamePart': {
                    'fields': {
                      'namePart': {
                        'rule': 'required',
                        'type': 'string',
                        'id': 1
                      },
                      'isExtension': {
                        'rule': 'required',
                        'type': 'bool',
                        'id': 2
                      }
                    }
                  }
                }
              },
              'SourceCodeInfo': {
                'fields': {
                  'location': {
                    'rule': 'repeated',
                    'type': 'Location',
                    'id': 1
                  }
                },
                'nested': {
                  'Location': {
                    'fields': {
                      'path': {
                        'rule': 'repeated',
                        'type': 'int32',
                        'id': 1
                      },
                      'span': {
                        'rule': 'repeated',
                        'type': 'int32',
                        'id': 2
                      },
                      'leadingComments': {
                        'type': 'string',
                        'id': 3
                      },
                      'trailingComments': {
                        'type': 'string',
                        'id': 4
                      },
                      'leadingDetachedComments': {
                        'rule': 'repeated',
                        'type': 'string',
                        'id': 6
                      }
                    }
                  }
                }
              },
              'GeneratedCodeInfo': {
                'fields': {
                  'annotation': {
                    'rule': 'repeated',
                    'type': 'Annotation',
                    'id': 1
                  }
                },
                'nested': {
                  'Annotation': {
                    'fields': {
                      'path': {
                        'rule': 'repeated',
                        'type': 'int32',
                        'id': 1
                      },
                      'sourceFile': {
                        'type': 'string',
                        'id': 2
                      },
                      'begin': {
                        'type': 'int32',
                        'id': 3
                      },
                      'end': {
                        'type': 'int32',
                        'id': 4
                      }
                    }
                  }
                }
              },
              'Timestamp': {
                'fields': {
                  'seconds': {
                    'type': 'int64',
                    'id': 1
                  },
                  'nanos': {
                    'type': 'int32',
                    'id': 2
                  }
                }
              },
              'FieldMask': {
                'fields': {
                  'paths': {
                    'rule': 'repeated',
                    'type': 'string',
                    'id': 1
                  }
                }
              },
              'Struct': {
                'fields': {
                  'fields': {
                    'keyType': 'string',
                    'type': 'Value',
                    'id': 1
                  }
                }
              },
              'Value': {
                'oneofs': {
                  'kind': {
                    'oneof': [
                      'nullValue',
                      'numberValue',
                      'stringValue',
                      'boolValue',
                      'structValue',
                      'listValue'
                    ]
                  }
                },
                'fields': {
                  'nullValue': {
                    'type': 'NullValue',
                    'id': 1
                  },
                  'numberValue': {
                    'type': 'double',
                    'id': 2
                  },
                  'stringValue': {
                    'type': 'string',
                    'id': 3
                  },
                  'boolValue': {
                    'type': 'bool',
                    'id': 4
                  },
                  'structValue': {
                    'type': 'Struct',
                    'id': 5
                  },
                  'listValue': {
                    'type': 'ListValue',
                    'id': 6
                  }
                }
              },
              'NullValue': {
                'values': {
                  'NULL_VALUE': 0
                }
              },
              'ListValue': {
                'fields': {
                  'values': {
                    'rule': 'repeated',
                    'type': 'Value',
                    'id': 1
                  }
                }
              }
            }
          },
          'api': {
            'options': {
              'go_package': 'google.golang.org/genproto/googleapis/api/annotations;annotations',
              'java_multiple_files': true,
              'java_outer_classname': 'HttpProto',
              'java_package': 'com.google.api',
              'objc_class_prefix': 'GAPI',
              'cc_enable_arenas': true
            },
            'nested': {
              'http': {
                'type': 'HttpRule',
                'id': 72295728,
                'extend': 'google.protobuf.MethodOptions'
              },
              'Http': {
                'fields': {
                  'rules': {
                    'rule': 'repeated',
                    'type': 'HttpRule',
                    'id': 1
                  }
                }
              },
              'HttpRule': {
                'oneofs': {
                  'pattern': {
                    'oneof': [
                      'get',
                      'put',
                      'post',
                      'delete',
                      'patch',
                      'custom'
                    ]
                  }
                },
                'fields': {
                  'selector': {
                    'type': 'string',
                    'id': 1
                  },
                  'get': {
                    'type': 'string',
                    'id': 2
                  },
                  'put': {
                    'type': 'string',
                    'id': 3
                  },
                  'post': {
                    'type': 'string',
                    'id': 4
                  },
                  'delete': {
                    'type': 'string',
                    'id': 5
                  },
                  'patch': {
                    'type': 'string',
                    'id': 6
                  },
                  'custom': {
                    'type': 'CustomHttpPattern',
                    'id': 8
                  },
                  'body': {
                    'type': 'string',
                    'id': 7
                  },
                  'additionalBindings': {
                    'rule': 'repeated',
                    'type': 'HttpRule',
                    'id': 11
                  }
                }
              },
              'CustomHttpPattern': {
                'fields': {
                  'kind': {
                    'type': 'string',
                    'id': 1
                  },
                  'path': {
                    'type': 'string',
                    'id': 2
                  }
                }
              }
            }
          }
        }
      }
    }
  });

  $root.__lookup = function() {
    return path => {
      return root.lookup(path);
    };
  };
  return $root.__lookup();
};
$root.com = (function() {
  const com = {};

  com.wixpress = (function() {
    const wixpress = {};

    wixpress.premium = (function() {
      const premium = {};

      premium.subscriptionsmanager = (function() {
        const subscriptionsmanager = {};

        subscriptionsmanager.api = (function() {
          const api = {};

          api.v1 = (function() {
            const v1 = {};

            v1.BillingReference = (function() {

              class BillingReference {

                constructor(props) {
                  this.providerName = props && props.providerName;
                  this.providerReferenceId = props && props.providerReferenceId;
                  this.previousProviderReferenceIds = props && props.previousProviderReferenceIds;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.providerName != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.ProviderName.verify(msg.providerName, helper, errors.field('providerName'));
                    }
                    if (msg.providerReferenceId != null) {
                      $root.google.protobuf.StringValue.verify(msg.providerReferenceId, helper, errors.field('providerReferenceId'));
                    }
                    if (msg.previousProviderReferenceIds != null) {
                      const fieldErrors = errors.field('previousProviderReferenceIds');

                      if (!Array.isArray(msg.previousProviderReferenceIds)) {
                        fieldErrors.error('array expected');
                      } else {
                        msg.previousProviderReferenceIds.forEach((value, index) => {
                          if (typeof value !== 'string') {
                            fieldErrors.index(index).error('string expected');
                          }
                        });
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.providerName != null) {
                      json.providerName = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.ProviderName[obj.providerName];
                    }
                    if (obj.providerReferenceId != null) {
                      json.providerReferenceId = $root.google.protobuf.StringValue.toJSON(obj.providerReferenceId, helper);
                    }
                    if (obj.previousProviderReferenceIds != null) {
                      json.previousProviderReferenceIds = obj.previousProviderReferenceIds.map(e => {
                        return e;
                      });
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference();

                  if (json.providerName != null) {
                    result.providerName = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.ProviderName[json.providerName];
                  } else {
                    result.providerName = 0;
                  }
                  if (json.providerReferenceId != null) {
                    result.providerReferenceId = $root.google.protobuf.StringValue.fromJSON(json.providerReferenceId, helper);
                  } else {
                    delete result.providerReferenceId;
                  }
                  if (json.previousProviderReferenceIds != null) {
                    result.previousProviderReferenceIds = json.previousProviderReferenceIds.map(e => {
                      return e;
                    });
                  } else {
                    result.previousProviderReferenceIds = [];
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.providerName != null) {
                      grpc.providerName = obj.providerName;
                    }
                    if (obj.providerReferenceId != null) {
                      grpc.providerReferenceId = $root.google.protobuf.StringValue.toGRPC(obj.providerReferenceId, helper);
                    }
                    if (obj.previousProviderReferenceIds != null) {
                      grpc.previousProviderReferenceIds = obj.previousProviderReferenceIds.map(e => {
                        return e;
                      });
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference();

                    if (grpc.providerName != null) {
                      result.providerName = grpc.providerName;
                    } else {
                      result.providerName = 0;
                    }
                    if (grpc.providerReferenceId != null) {
                      result.providerReferenceId = $root.google.protobuf.StringValue.fromGRPC(grpc.providerReferenceId, helper);
                    } else {
                      delete result.providerReferenceId;
                    }
                    if (grpc.previousProviderReferenceIds != null) {
                      result.previousProviderReferenceIds = grpc.previousProviderReferenceIds.map(e => {
                        return e;
                      });
                    } else {
                      result.previousProviderReferenceIds = [];
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'providerName': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.ProviderName,
                        'id': 1
                      },
                      'providerReferenceId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2
                      },
                      'previousProviderReferenceIds': {
                        'rule': 'repeated',
                        'type': 'string',
                        'id': 3
                      }
                    },
                    'nested': {
                      'ProviderName': {
                        'values': {
                          'UNKNOWN': 0,
                          'SBS': 1
                        }
                      }
                    }
                  };
                }
              }

              BillingReference.ProviderName = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SBS': 1,
                1: 'SBS'
              };
              BillingReference.ProviderName = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SBS': 1,
                1: 'SBS'
              };
              Object.defineProperty(BillingReference.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference');
                },
                enumerable: false,
                configurable: false
              });
              return BillingReference;
            }());
            v1.CancellationFlowEnum = (function() {

              class CancellationFlowEnum {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {},
                    'nested': {
                      'CancellationFlow': {
                        'values': {
                          'UNKNOWN': 0,
                          'REQUESTED_BY_USER': 100,
                          'BACKOFFICE_CANCEL': 101,
                          'PAYMENT_PROBLEMS': 102,
                          'CHARGEBACK': 103,
                          'SUPPORT_AUTOMATED_CANCEL_AND_REFUND': 104,
                          'CHANGE_PLAN': 105,
                          'TRANSFER_SITE': 106,
                          'MANUAL_RECURRING_EXPIRED': 107,
                          'SITE_DELETION': 108
                        }
                      }
                    }
                  };
                }
              }

              CancellationFlowEnum.CancellationFlow = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'REQUESTED_BY_USER': 100,
                100: 'REQUESTED_BY_USER',
                'BACKOFFICE_CANCEL': 101,
                101: 'BACKOFFICE_CANCEL',
                'PAYMENT_PROBLEMS': 102,
                102: 'PAYMENT_PROBLEMS',
                'CHARGEBACK': 103,
                103: 'CHARGEBACK',
                'SUPPORT_AUTOMATED_CANCEL_AND_REFUND': 104,
                104: 'SUPPORT_AUTOMATED_CANCEL_AND_REFUND',
                'CHANGE_PLAN': 105,
                105: 'CHANGE_PLAN',
                'TRANSFER_SITE': 106,
                106: 'TRANSFER_SITE',
                'MANUAL_RECURRING_EXPIRED': 107,
                107: 'MANUAL_RECURRING_EXPIRED',
                'SITE_DELETION': 108,
                108: 'SITE_DELETION'
              };
              CancellationFlowEnum.CancellationFlow = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'REQUESTED_BY_USER': 100,
                100: 'REQUESTED_BY_USER',
                'BACKOFFICE_CANCEL': 101,
                101: 'BACKOFFICE_CANCEL',
                'PAYMENT_PROBLEMS': 102,
                102: 'PAYMENT_PROBLEMS',
                'CHARGEBACK': 103,
                103: 'CHARGEBACK',
                'SUPPORT_AUTOMATED_CANCEL_AND_REFUND': 104,
                104: 'SUPPORT_AUTOMATED_CANCEL_AND_REFUND',
                'CHANGE_PLAN': 105,
                105: 'CHANGE_PLAN',
                'TRANSFER_SITE': 106,
                106: 'TRANSFER_SITE',
                'MANUAL_RECURRING_EXPIRED': 107,
                107: 'MANUAL_RECURRING_EXPIRED',
                'SITE_DELETION': 108,
                108: 'SITE_DELETION'
              };
              Object.defineProperty(CancellationFlowEnum.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum');
                },
                enumerable: false,
                configurable: false
              });
              return CancellationFlowEnum;
            }());
            v1.UserCancellationReason = (function() {

              class UserCancellationReason {

                constructor(props) {
                  this.cancellationCode = props && props.cancellationCode;
                  this.cancellationReason = props && props.cancellationReason;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.cancellationCode != null) {
                      if (!Number.isInteger(msg.cancellationCode)) {
                        errors.field('cancellationCode').error('integer expected');
                      }
                    }
                    if (msg.cancellationReason != null) {
                      $root.google.protobuf.StringValue.verify(msg.cancellationReason, helper, errors.field('cancellationReason'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.cancellationCode != null) {
                      json.cancellationCode = obj.cancellationCode;
                    }
                    if (obj.cancellationReason != null) {
                      json.cancellationReason = $root.google.protobuf.StringValue.toJSON(obj.cancellationReason, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason();

                  if (json.cancellationCode != null) {
                    result.cancellationCode = json.cancellationCode;
                  } else {
                    result.cancellationCode = 0;
                  }
                  if (json.cancellationReason != null) {
                    result.cancellationReason = $root.google.protobuf.StringValue.fromJSON(json.cancellationReason, helper);
                  } else {
                    delete result.cancellationReason;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.cancellationCode != null) {
                      grpc.cancellationCode = obj.cancellationCode;
                    }
                    if (obj.cancellationReason != null) {
                      grpc.cancellationReason = $root.google.protobuf.StringValue.toGRPC(obj.cancellationReason, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason();

                    if (grpc.cancellationCode != null) {
                      result.cancellationCode = grpc.cancellationCode;
                    } else {
                      result.cancellationCode = 0;
                    }
                    if (grpc.cancellationReason != null) {
                      result.cancellationReason = $root.google.protobuf.StringValue.fromGRPC(grpc.cancellationReason, helper);
                    } else {
                      delete result.cancellationReason;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'cancellationCode': {
                        'type': 'int32',
                        'id': 1
                      },
                      'cancellationReason': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(UserCancellationReason.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason');
                },
                enumerable: false,
                configurable: false
              });
              return UserCancellationReason;
            }());
            v1.SubscriptionsManagerEvents = (function() {

              class SubscriptionsManagerEvents {

                constructor() {
                  if (this.constructor.name === SubscriptionsManagerEvents.name) {
                    throw new TypeError('class SubscriptionsManagerEvents is abstract');
                  }
                }
              }

              Object.defineProperty(SubscriptionsManagerEvents.prototype, '__isRpcService__', {
                value: true,
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManagerEvents.prototype, '__fqn__', {
                value: 'com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManagerEvents',
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManagerEvents.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManagerEvents');
                },
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManagerEvents.prototype, '__options__', {
                value: $root.__options,
                enumerable: false,
                configurable: false
              });
              return SubscriptionsManagerEvents;
            }());
            v1.SubscriptionCreated = (function() {

              class SubscriptionCreated {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.deliveryInfo = props && props.deliveryInfo;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.deliveryInfo != null) {
                      const fieldErrors = errors.field('deliveryInfo');

                      if (msg.deliveryInfo != null && (!(typeof msg.deliveryInfo === 'object') || Array.isArray(msg.deliveryInfo))) {
                        fieldErrors.error('object expected');
                      } else {
                        for (let key in msg.deliveryInfo) {
                          const keyErrors = fieldErrors.index(key);
                          if (typeof msg.deliveryInfo[key] !== 'string') {
                            keyErrors.field('value').error('string expected');
                          }
                        }
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.deliveryInfo != null) {
                      json.deliveryInfo = Object.entries(obj.deliveryInfo).reduce((acc, [k, v]) => {
                        acc[k] = v;
                        return acc;
                      }, {});
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.deliveryInfo != null) {
                    result.deliveryInfo = Object.entries(json.deliveryInfo).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.deliveryInfo;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.deliveryInfo != null) {
                      grpc.deliveryInfo = Object.entries(obj.deliveryInfo).reduce((acc, [k, v]) => {
                        acc[k] = v;
                        return acc;
                      }, {});
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.deliveryInfo != null) {
                      result.deliveryInfo = Object.entries(grpc.deliveryInfo).reduce((acc, [k, v]) => {
                        acc[k] = v;
                        return acc;
                      }, {});
                    } else {
                      delete result.deliveryInfo;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'deliveryInfo': {
                        'keyType': 'string',
                        'type': 'string',
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionCreated.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionCreated;
            }());
            v1.SubscriptionCancelled = (function() {

              class SubscriptionCancelled {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.cancellationDetails = props && props.cancellationDetails;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.cancellationDetails != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.verify(msg.cancellationDetails, helper, errors.field('cancellationDetails'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.cancellationDetails != null) {
                      json.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.toJSON(obj.cancellationDetails, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.cancellationDetails != null) {
                    result.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.fromJSON(json.cancellationDetails, helper);
                  } else {
                    delete result.cancellationDetails;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.cancellationDetails != null) {
                      grpc.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.toGRPC(obj.cancellationDetails, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.cancellationDetails != null) {
                      result.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.fromGRPC(grpc.cancellationDetails, helper);
                    } else {
                      delete result.cancellationDetails;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'cancellationDetails': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionCancelled.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionCancelled;
            }());
            v1.SubscriptionAutoRenewTurnedOn = (function() {

              class SubscriptionAutoRenewTurnedOn {

                constructor(props) {
                  this.subscription = props && props.subscription;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionAutoRenewTurnedOn.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionAutoRenewTurnedOn;
            }());
            v1.SubscriptionAutoRenewTurnedOff = (function() {

              class SubscriptionAutoRenewTurnedOff {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.cancellationDetails = props && props.cancellationDetails;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.cancellationDetails != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.verify(msg.cancellationDetails, helper, errors.field('cancellationDetails'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.cancellationDetails != null) {
                      json.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.toJSON(obj.cancellationDetails, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.cancellationDetails != null) {
                    result.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.fromJSON(json.cancellationDetails, helper);
                  } else {
                    delete result.cancellationDetails;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.cancellationDetails != null) {
                      grpc.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.toGRPC(obj.cancellationDetails, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.cancellationDetails != null) {
                      result.cancellationDetails = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails.fromGRPC(grpc.cancellationDetails, helper);
                    } else {
                      delete result.cancellationDetails;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'cancellationDetails': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionAutoRenewTurnedOff.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionAutoRenewTurnedOff;
            }());
            v1.CancellationDetails = (function() {

              class CancellationDetails {

                constructor(props) {
                  this.cancellationCode = props && props.cancellationCode;
                  this.cancellationReason = props && props.cancellationReason;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.cancellationCode != null) {
                      $root.google.protobuf.Int32Value.verify(msg.cancellationCode, helper, errors.field('cancellationCode'));
                    }
                    if (msg.cancellationReason != null) {
                      $root.google.protobuf.StringValue.verify(msg.cancellationReason, helper, errors.field('cancellationReason'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.cancellationCode != null) {
                      json.cancellationCode = $root.google.protobuf.Int32Value.toJSON(obj.cancellationCode, helper);
                    }
                    if (obj.cancellationReason != null) {
                      json.cancellationReason = $root.google.protobuf.StringValue.toJSON(obj.cancellationReason, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails();

                  if (json.cancellationCode != null) {
                    result.cancellationCode = $root.google.protobuf.Int32Value.fromJSON(json.cancellationCode, helper);
                  } else {
                    delete result.cancellationCode;
                  }
                  if (json.cancellationReason != null) {
                    result.cancellationReason = $root.google.protobuf.StringValue.fromJSON(json.cancellationReason, helper);
                  } else {
                    delete result.cancellationReason;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.cancellationCode != null) {
                      grpc.cancellationCode = $root.google.protobuf.Int32Value.toGRPC(obj.cancellationCode, helper);
                    }
                    if (obj.cancellationReason != null) {
                      grpc.cancellationReason = $root.google.protobuf.StringValue.toGRPC(obj.cancellationReason, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails();

                    if (grpc.cancellationCode != null) {
                      result.cancellationCode = $root.google.protobuf.Int32Value.fromGRPC(grpc.cancellationCode, helper);
                    } else {
                      delete result.cancellationCode;
                    }
                    if (grpc.cancellationReason != null) {
                      result.cancellationReason = $root.google.protobuf.StringValue.fromGRPC(grpc.cancellationReason, helper);
                    } else {
                      delete result.cancellationReason;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'cancellationCode': {
                        'type': $root.google.protobuf.Int32Value,
                        'id': 1
                      },
                      'cancellationReason': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(CancellationDetails.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.CancellationDetails');
                },
                enumerable: false,
                configurable: false
              });
              return CancellationDetails;
            }());
            v1.SubscriptionAssigned = (function() {

              class SubscriptionAssigned {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.previousMetaSiteId = props && props.previousMetaSiteId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.previousMetaSiteId != null) {
                      $root.google.protobuf.StringValue.verify(msg.previousMetaSiteId, helper, errors.field('previousMetaSiteId'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.previousMetaSiteId != null) {
                      json.previousMetaSiteId = $root.google.protobuf.StringValue.toJSON(obj.previousMetaSiteId, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.previousMetaSiteId != null) {
                    result.previousMetaSiteId = $root.google.protobuf.StringValue.fromJSON(json.previousMetaSiteId, helper);
                  } else {
                    delete result.previousMetaSiteId;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.previousMetaSiteId != null) {
                      grpc.previousMetaSiteId = $root.google.protobuf.StringValue.toGRPC(obj.previousMetaSiteId, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.previousMetaSiteId != null) {
                      result.previousMetaSiteId = $root.google.protobuf.StringValue.fromGRPC(grpc.previousMetaSiteId, helper);
                    } else {
                      delete result.previousMetaSiteId;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'previousMetaSiteId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionAssigned.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionAssigned;
            }());
            v1.SubscriptionUnassigned = (function() {

              class SubscriptionUnassigned {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.previousMetaSiteId = props && props.previousMetaSiteId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.previousMetaSiteId != null) {
                      if (typeof msg.previousMetaSiteId !== 'string') {
                        errors.field('previousMetaSiteId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.previousMetaSiteId != null) {
                      json.previousMetaSiteId = obj.previousMetaSiteId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.previousMetaSiteId != null) {
                    result.previousMetaSiteId = json.previousMetaSiteId;
                  } else {
                    result.previousMetaSiteId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.previousMetaSiteId != null) {
                      grpc.previousMetaSiteId = obj.previousMetaSiteId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.previousMetaSiteId != null) {
                      result.previousMetaSiteId = grpc.previousMetaSiteId;
                    } else {
                      result.previousMetaSiteId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'previousMetaSiteId': {
                        'type': 'string',
                        'id': 2,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionUnassigned.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionUnassigned;
            }());
            v1.SubscriptionTransferred = (function() {

              class SubscriptionTransferred {

                constructor(props) {
                  this.originSubscription = props && props.originSubscription;
                  this.targetSubscription = props && props.targetSubscription;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.originSubscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.originSubscription, helper, errors.field('originSubscription'));
                    }
                    if (msg.targetSubscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.targetSubscription, helper, errors.field('targetSubscription'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.originSubscription != null) {
                      json.originSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.originSubscription, helper);
                    }
                    if (obj.targetSubscription != null) {
                      json.targetSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.targetSubscription, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred();

                  if (json.originSubscription != null) {
                    result.originSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.originSubscription, helper);
                  } else {
                    delete result.originSubscription;
                  }
                  if (json.targetSubscription != null) {
                    result.targetSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.targetSubscription, helper);
                  } else {
                    delete result.targetSubscription;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.originSubscription != null) {
                      grpc.originSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.originSubscription, helper);
                    }
                    if (obj.targetSubscription != null) {
                      grpc.targetSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.targetSubscription, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred();

                    if (grpc.originSubscription != null) {
                      result.originSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.originSubscription, helper);
                    } else {
                      delete result.originSubscription;
                    }
                    if (grpc.targetSubscription != null) {
                      result.targetSubscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.targetSubscription, helper);
                    } else {
                      delete result.targetSubscription;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'originSubscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'targetSubscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionTransferred.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionTransferred;
            }());
            v1.RecurringChargeSucceeded = (function() {

              class RecurringChargeSucceeded {

                constructor(props) {
                  this.subscription = props && props.subscription;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(RecurringChargeSucceeded.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded');
                },
                enumerable: false,
                configurable: false
              });
              return RecurringChargeSucceeded;
            }());
            v1.ContractSwitched = (function() {

              class ContractSwitched {

                constructor(props) {
                  this.subscription = props && props.subscription;
                  this.previousCycle = props && props.previousCycle;
                  this.previousProductId = props && props.previousProductId;
                  this.previousProductTypeId = props && props.previousProductTypeId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                    if (msg.previousCycle != null) {
                      $root.com.wixpress.billing.api.v1.Cycle.verify(msg.previousCycle, helper, errors.field('previousCycle'));
                    }
                    if (msg.previousProductId != null) {
                      if (typeof msg.previousProductId !== 'string') {
                        errors.field('previousProductId').error('string expected');
                      }
                    }
                    if (msg.previousProductTypeId != null) {
                      if (typeof msg.previousProductTypeId !== 'string') {
                        errors.field('previousProductTypeId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    if (obj.previousCycle != null) {
                      json.previousCycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.previousCycle, helper);
                    }
                    if (obj.previousProductId != null) {
                      json.previousProductId = obj.previousProductId;
                    }
                    if (obj.previousProductTypeId != null) {
                      json.previousProductTypeId = obj.previousProductTypeId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  if (json.previousCycle != null) {
                    result.previousCycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.previousCycle, helper);
                  } else {
                    delete result.previousCycle;
                  }
                  if (json.previousProductId != null) {
                    result.previousProductId = json.previousProductId;
                  } else {
                    result.previousProductId = '';
                  }
                  if (json.previousProductTypeId != null) {
                    result.previousProductTypeId = json.previousProductTypeId;
                  } else {
                    result.previousProductTypeId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    if (obj.previousCycle != null) {
                      grpc.previousCycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.previousCycle, helper);
                    }
                    if (obj.previousProductId != null) {
                      grpc.previousProductId = obj.previousProductId;
                    }
                    if (obj.previousProductTypeId != null) {
                      grpc.previousProductTypeId = obj.previousProductTypeId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    if (grpc.previousCycle != null) {
                      result.previousCycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.previousCycle, helper);
                    } else {
                      delete result.previousCycle;
                    }
                    if (grpc.previousProductId != null) {
                      result.previousProductId = grpc.previousProductId;
                    } else {
                      result.previousProductId = '';
                    }
                    if (grpc.previousProductTypeId != null) {
                      result.previousProductTypeId = grpc.previousProductTypeId;
                    } else {
                      result.previousProductTypeId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      },
                      'previousCycle': {
                        'type': $root.com.wixpress.billing.api.v1.Cycle,
                        'id': 2
                      },
                      'previousProductId': {
                        'type': 'string',
                        'id': 3,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'previousProductTypeId': {
                        'type': 'string',
                        'id': 4,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ContractSwitched.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched');
                },
                enumerable: false,
                configurable: false
              });
              return ContractSwitched;
            }());
            v1.SubscriptionEvent = (function() {

              class SubscriptionEvent {

                constructor(props) {
                  this.eventId = props && props.eventId;
                  this.eventDate = props && props.eventDate;
                  this.created = props && props.created;
                  this.assigned = props && props.assigned;
                  this.cancelled = props && props.cancelled;
                  this.autoRenewTurnedOn = props && props.autoRenewTurnedOn;
                  this.autoRenewTurnedOff = props && props.autoRenewTurnedOff;
                  this.unassigned = props && props.unassigned;
                  this.transferred = props && props.transferred;
                  this.recurringChargeSucceeded = props && props.recurringChargeSucceeded;
                  this.contractSwitched = props && props.contractSwitched;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    const oneOfMutex = {};

                    if (msg.eventId != null) {
                      if (typeof msg.eventId !== 'string') {
                        errors.field('eventId').error('string expected');
                      }
                    }
                    if (msg.eventDate != null) {
                      $root.google.protobuf.Timestamp.verify(msg.eventDate, helper, errors.field('eventDate'));
                    }
                    if (msg.created != null) {
                      if (oneOfMutex['event']) {
                        errors.field('created').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated.verify(msg.created, helper, errors.field('created'));
                      }
                    }
                    if (msg.assigned != null) {
                      if (oneOfMutex['event']) {
                        errors.field('assigned').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned.verify(msg.assigned, helper, errors.field('assigned'));
                      }
                    }
                    if (msg.cancelled != null) {
                      if (oneOfMutex['event']) {
                        errors.field('cancelled').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled.verify(msg.cancelled, helper, errors.field('cancelled'));
                      }
                    }
                    if (msg.autoRenewTurnedOn != null) {
                      if (oneOfMutex['event']) {
                        errors.field('autoRenewTurnedOn').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn.verify(msg.autoRenewTurnedOn, helper, errors.field('autoRenewTurnedOn'));
                      }
                    }
                    if (msg.autoRenewTurnedOff != null) {
                      if (oneOfMutex['event']) {
                        errors.field('autoRenewTurnedOff').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff.verify(msg.autoRenewTurnedOff, helper, errors.field('autoRenewTurnedOff'));
                      }
                    }
                    if (msg.unassigned != null) {
                      if (oneOfMutex['event']) {
                        errors.field('unassigned').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned.verify(msg.unassigned, helper, errors.field('unassigned'));
                      }
                    }
                    if (msg.transferred != null) {
                      if (oneOfMutex['event']) {
                        errors.field('transferred').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred.verify(msg.transferred, helper, errors.field('transferred'));
                      }
                    }
                    if (msg.recurringChargeSucceeded != null) {
                      if (oneOfMutex['event']) {
                        errors.field('recurringChargeSucceeded').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded.verify(msg.recurringChargeSucceeded, helper, errors.field('recurringChargeSucceeded'));
                      }
                    }
                    if (msg.contractSwitched != null) {
                      if (oneOfMutex['event']) {
                        errors.field('contractSwitched').up().field('event').error('multiple values');
                      } else {
                        oneOfMutex['event'] = true;
                        $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched.verify(msg.contractSwitched, helper, errors.field('contractSwitched'));
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.eventId != null) {
                      json.eventId = obj.eventId;
                    }
                    if (obj.eventDate != null) {
                      json.eventDate = $root.google.protobuf.Timestamp.toJSON(obj.eventDate, helper);
                    }
                    if (obj.created != null) {
                      json.created = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated.toJSON(obj.created, helper);
                    }
                    if (obj.assigned != null) {
                      json.assigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned.toJSON(obj.assigned, helper);
                    }
                    if (obj.cancelled != null) {
                      json.cancelled = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled.toJSON(obj.cancelled, helper);
                    }
                    if (obj.autoRenewTurnedOn != null) {
                      json.autoRenewTurnedOn = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn.toJSON(obj.autoRenewTurnedOn, helper);
                    }
                    if (obj.autoRenewTurnedOff != null) {
                      json.autoRenewTurnedOff = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff.toJSON(obj.autoRenewTurnedOff, helper);
                    }
                    if (obj.unassigned != null) {
                      json.unassigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned.toJSON(obj.unassigned, helper);
                    }
                    if (obj.transferred != null) {
                      json.transferred = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred.toJSON(obj.transferred, helper);
                    }
                    if (obj.recurringChargeSucceeded != null) {
                      json.recurringChargeSucceeded = $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded.toJSON(obj.recurringChargeSucceeded, helper);
                    }
                    if (obj.contractSwitched != null) {
                      json.contractSwitched = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched.toJSON(obj.contractSwitched, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionEvent();

                  if (json.eventId != null) {
                    result.eventId = json.eventId;
                  } else {
                    result.eventId = '';
                  }
                  if (json.eventDate != null) {
                    result.eventDate = $root.google.protobuf.Timestamp.fromJSON(json.eventDate, helper);
                  } else {
                    delete result.eventDate;
                  }
                  if (json.created != null) {
                    result.created = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated.fromJSON(json.created, helper);
                  } else {
                    delete result.created;
                  }
                  if (json.assigned != null) {
                    result.assigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned.fromJSON(json.assigned, helper);
                  } else {
                    delete result.assigned;
                  }
                  if (json.cancelled != null) {
                    result.cancelled = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled.fromJSON(json.cancelled, helper);
                  } else {
                    delete result.cancelled;
                  }
                  if (json.autoRenewTurnedOn != null) {
                    result.autoRenewTurnedOn = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn.fromJSON(json.autoRenewTurnedOn, helper);
                  } else {
                    delete result.autoRenewTurnedOn;
                  }
                  if (json.autoRenewTurnedOff != null) {
                    result.autoRenewTurnedOff = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff.fromJSON(json.autoRenewTurnedOff, helper);
                  } else {
                    delete result.autoRenewTurnedOff;
                  }
                  if (json.unassigned != null) {
                    result.unassigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned.fromJSON(json.unassigned, helper);
                  } else {
                    delete result.unassigned;
                  }
                  if (json.transferred != null) {
                    result.transferred = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred.fromJSON(json.transferred, helper);
                  } else {
                    delete result.transferred;
                  }
                  if (json.recurringChargeSucceeded != null) {
                    result.recurringChargeSucceeded = $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded.fromJSON(json.recurringChargeSucceeded, helper);
                  } else {
                    delete result.recurringChargeSucceeded;
                  }
                  if (json.contractSwitched != null) {
                    result.contractSwitched = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched.fromJSON(json.contractSwitched, helper);
                  } else {
                    delete result.contractSwitched;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.eventId != null) {
                      grpc.eventId = obj.eventId;
                    }
                    if (obj.eventDate != null) {
                      grpc.eventDate = $root.google.protobuf.Timestamp.toGRPC(obj.eventDate, helper);
                    }
                    if (obj.created != null) {
                      grpc.created = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated.toGRPC(obj.created, helper);
                    }
                    if (obj.assigned != null) {
                      grpc.assigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned.toGRPC(obj.assigned, helper);
                    }
                    if (obj.cancelled != null) {
                      grpc.cancelled = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled.toGRPC(obj.cancelled, helper);
                    }
                    if (obj.autoRenewTurnedOn != null) {
                      grpc.autoRenewTurnedOn = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn.toGRPC(obj.autoRenewTurnedOn, helper);
                    }
                    if (obj.autoRenewTurnedOff != null) {
                      grpc.autoRenewTurnedOff = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff.toGRPC(obj.autoRenewTurnedOff, helper);
                    }
                    if (obj.unassigned != null) {
                      grpc.unassigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned.toGRPC(obj.unassigned, helper);
                    }
                    if (obj.transferred != null) {
                      grpc.transferred = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred.toGRPC(obj.transferred, helper);
                    }
                    if (obj.recurringChargeSucceeded != null) {
                      grpc.recurringChargeSucceeded = $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded.toGRPC(obj.recurringChargeSucceeded, helper);
                    }
                    if (obj.contractSwitched != null) {
                      grpc.contractSwitched = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched.toGRPC(obj.contractSwitched, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionEvent();

                    if (grpc.eventId != null) {
                      result.eventId = grpc.eventId;
                    } else {
                      result.eventId = '';
                    }
                    if (grpc.eventDate != null) {
                      result.eventDate = $root.google.protobuf.Timestamp.fromGRPC(grpc.eventDate, helper);
                    } else {
                      delete result.eventDate;
                    }
                    if (grpc.created != null) {
                      result.created = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated.fromGRPC(grpc.created, helper);
                    } else {
                      delete result.created;
                    }
                    if (grpc.assigned != null) {
                      result.assigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned.fromGRPC(grpc.assigned, helper);
                    } else {
                      delete result.assigned;
                    }
                    if (grpc.cancelled != null) {
                      result.cancelled = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled.fromGRPC(grpc.cancelled, helper);
                    } else {
                      delete result.cancelled;
                    }
                    if (grpc.autoRenewTurnedOn != null) {
                      result.autoRenewTurnedOn = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn.fromGRPC(grpc.autoRenewTurnedOn, helper);
                    } else {
                      delete result.autoRenewTurnedOn;
                    }
                    if (grpc.autoRenewTurnedOff != null) {
                      result.autoRenewTurnedOff = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff.fromGRPC(grpc.autoRenewTurnedOff, helper);
                    } else {
                      delete result.autoRenewTurnedOff;
                    }
                    if (grpc.unassigned != null) {
                      result.unassigned = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned.fromGRPC(grpc.unassigned, helper);
                    } else {
                      delete result.unassigned;
                    }
                    if (grpc.transferred != null) {
                      result.transferred = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred.fromGRPC(grpc.transferred, helper);
                    } else {
                      delete result.transferred;
                    }
                    if (grpc.recurringChargeSucceeded != null) {
                      result.recurringChargeSucceeded = $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded.fromGRPC(grpc.recurringChargeSucceeded, helper);
                    } else {
                      delete result.recurringChargeSucceeded;
                    }
                    if (grpc.contractSwitched != null) {
                      result.contractSwitched = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched.fromGRPC(grpc.contractSwitched, helper);
                    } else {
                      delete result.contractSwitched;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'oneofs': {
                      'event': {
                        'oneof': [
                          'created',
                          'assigned',
                          'cancelled',
                          'autoRenewTurnedOn',
                          'autoRenewTurnedOff',
                          'unassigned',
                          'transferred',
                          'recurringChargeSucceeded',
                          'contractSwitched'
                        ]
                      }
                    },
                    'fields': {
                      'eventId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'eventDate': {
                        'type': $root.google.protobuf.Timestamp,
                        'id': 3
                      },
                      'created': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCreated,
                        'id': 4
                      },
                      'assigned': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAssigned,
                        'id': 5
                      },
                      'cancelled': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionCancelled,
                        'id': 6
                      },
                      'autoRenewTurnedOn': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOn,
                        'id': 7
                      },
                      'autoRenewTurnedOff': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionAutoRenewTurnedOff,
                        'id': 8
                      },
                      'unassigned': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionUnassigned,
                        'id': 9
                      },
                      'transferred': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionTransferred,
                        'id': 10
                      },
                      'recurringChargeSucceeded': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.RecurringChargeSucceeded,
                        'id': 11
                      },
                      'contractSwitched': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.ContractSwitched,
                        'id': 12
                      }
                    }
                  };
                }
              }

              Object.defineProperty(SubscriptionEvent.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionEvent');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionEvent;
            }());
            v1.Subscription = (function() {

              class Subscription {

                constructor(props) {
                  this.id = props && props.id;
                  this.userId = props && props.userId;
                  this.productId = props && props.productId;
                  this.createdAt = props && props.createdAt;
                  this.updatedAt = props && props.updatedAt;
                  this.metaSiteId = props && props.metaSiteId;
                  this.billingReference = props && props.billingReference;
                  this.cycle = props && props.cycle;
                  this.status = props && props.status;
                  this.transferredAt = props && props.transferredAt;
                  this.productTypeId = props && props.productTypeId;
                  this.version = props && props.version;
                  this.active = props && props.active;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.id != null) {
                      if (typeof msg.id !== 'string') {
                        errors.field('id').error('string expected');
                      }
                    }
                    if (msg.userId != null) {
                      if (typeof msg.userId !== 'string') {
                        errors.field('userId').error('string expected');
                      }
                    }
                    if (msg.productId != null) {
                      if (typeof msg.productId !== 'string') {
                        errors.field('productId').error('string expected');
                      }
                    }
                    if (msg.createdAt != null) {
                      $root.google.protobuf.Timestamp.verify(msg.createdAt, helper, errors.field('createdAt'));
                    }
                    if (msg.updatedAt != null) {
                      $root.google.protobuf.Timestamp.verify(msg.updatedAt, helper, errors.field('updatedAt'));
                    }
                    if (msg.metaSiteId != null) {
                      $root.google.protobuf.StringValue.verify(msg.metaSiteId, helper, errors.field('metaSiteId'));
                    }
                    if (msg.billingReference != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.verify(msg.billingReference, helper, errors.field('billingReference'));
                    }
                    if (msg.cycle != null) {
                      $root.com.wixpress.billing.api.v1.Cycle.verify(msg.cycle, helper, errors.field('cycle'));
                    }
                    if (msg.status != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus.verify(msg.status, helper, errors.field('status'));
                    }
                    if (msg.transferredAt != null) {
                      $root.google.protobuf.Timestamp.verify(msg.transferredAt, helper, errors.field('transferredAt'));
                    }
                    if (msg.productTypeId != null) {
                      if (typeof msg.productTypeId !== 'string') {
                        errors.field('productTypeId').error('string expected');
                      }
                    }
                    if (msg.version != null) {
                      if (!Number.isInteger(msg.version)) {
                        errors.field('version').error('integer expected');
                      }
                    }
                    if (msg.active != null) {
                      if (typeof msg.active !== 'boolean') {
                        errors.field('active').error('boolean expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.id != null) {
                      json.id = obj.id;
                    }
                    if (obj.userId != null) {
                      json.userId = obj.userId;
                    }
                    if (obj.productId != null) {
                      json.productId = obj.productId;
                    }
                    if (obj.createdAt != null) {
                      json.createdAt = $root.google.protobuf.Timestamp.toJSON(obj.createdAt, helper);
                    }
                    if (obj.updatedAt != null) {
                      json.updatedAt = $root.google.protobuf.Timestamp.toJSON(obj.updatedAt, helper);
                    }
                    if (obj.metaSiteId != null) {
                      json.metaSiteId = $root.google.protobuf.StringValue.toJSON(obj.metaSiteId, helper);
                    }
                    if (obj.billingReference != null) {
                      json.billingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.toJSON(obj.billingReference, helper);
                    }
                    if (obj.cycle != null) {
                      json.cycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.cycle, helper);
                    }
                    if (obj.status != null) {
                      json.status = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus[obj.status];
                    }
                    if (obj.transferredAt != null) {
                      json.transferredAt = $root.google.protobuf.Timestamp.toJSON(obj.transferredAt, helper);
                    }
                    if (obj.productTypeId != null) {
                      json.productTypeId = obj.productTypeId;
                    }
                    if (obj.version != null) {
                      json.version = obj.version;
                    }
                    if (obj.active != null) {
                      json.active = obj.active;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription();

                  if (json.id != null) {
                    result.id = json.id;
                  } else {
                    result.id = '';
                  }
                  if (json.userId != null) {
                    result.userId = json.userId;
                  } else {
                    result.userId = '';
                  }
                  if (json.productId != null) {
                    result.productId = json.productId;
                  } else {
                    result.productId = '';
                  }
                  if (json.createdAt != null) {
                    result.createdAt = $root.google.protobuf.Timestamp.fromJSON(json.createdAt, helper);
                  } else {
                    delete result.createdAt;
                  }
                  if (json.updatedAt != null) {
                    result.updatedAt = $root.google.protobuf.Timestamp.fromJSON(json.updatedAt, helper);
                  } else {
                    delete result.updatedAt;
                  }
                  if (json.metaSiteId != null) {
                    result.metaSiteId = $root.google.protobuf.StringValue.fromJSON(json.metaSiteId, helper);
                  } else {
                    delete result.metaSiteId;
                  }
                  if (json.billingReference != null) {
                    result.billingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.fromJSON(json.billingReference, helper);
                  } else {
                    delete result.billingReference;
                  }
                  if (json.cycle != null) {
                    result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.cycle, helper);
                  } else {
                    delete result.cycle;
                  }
                  if (json.status != null) {
                    result.status = $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus[json.status];
                  } else {
                    result.status = 0;
                  }
                  if (json.transferredAt != null) {
                    result.transferredAt = $root.google.protobuf.Timestamp.fromJSON(json.transferredAt, helper);
                  } else {
                    delete result.transferredAt;
                  }
                  if (json.productTypeId != null) {
                    result.productTypeId = json.productTypeId;
                  } else {
                    result.productTypeId = '';
                  }
                  if (json.version != null) {
                    result.version = json.version;
                  } else {
                    result.version = 0;
                  }
                  if (json.active != null) {
                    result.active = json.active;
                  } else {
                    result.active = false;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.id != null) {
                      grpc.id = obj.id;
                    }
                    if (obj.userId != null) {
                      grpc.userId = obj.userId;
                    }
                    if (obj.productId != null) {
                      grpc.productId = obj.productId;
                    }
                    if (obj.createdAt != null) {
                      grpc.createdAt = $root.google.protobuf.Timestamp.toGRPC(obj.createdAt, helper);
                    }
                    if (obj.updatedAt != null) {
                      grpc.updatedAt = $root.google.protobuf.Timestamp.toGRPC(obj.updatedAt, helper);
                    }
                    if (obj.metaSiteId != null) {
                      grpc.metaSiteId = $root.google.protobuf.StringValue.toGRPC(obj.metaSiteId, helper);
                    }
                    if (obj.billingReference != null) {
                      grpc.billingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.toGRPC(obj.billingReference, helper);
                    }
                    if (obj.cycle != null) {
                      grpc.cycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.cycle, helper);
                    }
                    if (obj.status != null) {
                      grpc.status = obj.status;
                    }
                    if (obj.transferredAt != null) {
                      grpc.transferredAt = $root.google.protobuf.Timestamp.toGRPC(obj.transferredAt, helper);
                    }
                    if (obj.productTypeId != null) {
                      grpc.productTypeId = obj.productTypeId;
                    }
                    if (obj.version != null) {
                      grpc.version = obj.version;
                    }
                    if (obj.active != null) {
                      grpc.active = obj.active;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription();

                    if (grpc.id != null) {
                      result.id = grpc.id;
                    } else {
                      result.id = '';
                    }
                    if (grpc.userId != null) {
                      result.userId = grpc.userId;
                    } else {
                      result.userId = '';
                    }
                    if (grpc.productId != null) {
                      result.productId = grpc.productId;
                    } else {
                      result.productId = '';
                    }
                    if (grpc.createdAt != null) {
                      result.createdAt = $root.google.protobuf.Timestamp.fromGRPC(grpc.createdAt, helper);
                    } else {
                      delete result.createdAt;
                    }
                    if (grpc.updatedAt != null) {
                      result.updatedAt = $root.google.protobuf.Timestamp.fromGRPC(grpc.updatedAt, helper);
                    } else {
                      delete result.updatedAt;
                    }
                    if (grpc.metaSiteId != null) {
                      result.metaSiteId = $root.google.protobuf.StringValue.fromGRPC(grpc.metaSiteId, helper);
                    } else {
                      delete result.metaSiteId;
                    }
                    if (grpc.billingReference != null) {
                      result.billingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.fromGRPC(grpc.billingReference, helper);
                    } else {
                      delete result.billingReference;
                    }
                    if (grpc.cycle != null) {
                      result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.cycle, helper);
                    } else {
                      delete result.cycle;
                    }
                    if (grpc.status != null) {
                      result.status = grpc.status;
                    } else {
                      result.status = 0;
                    }
                    if (grpc.transferredAt != null) {
                      result.transferredAt = $root.google.protobuf.Timestamp.fromGRPC(grpc.transferredAt, helper);
                    } else {
                      delete result.transferredAt;
                    }
                    if (grpc.productTypeId != null) {
                      result.productTypeId = grpc.productTypeId;
                    } else {
                      result.productTypeId = '';
                    }
                    if (grpc.version != null) {
                      result.version = grpc.version;
                    } else {
                      result.version = 0;
                    }
                    if (grpc.active != null) {
                      result.active = grpc.active;
                    } else {
                      result.active = false;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'id': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'userId': {
                        'type': 'string',
                        'id': 2,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'productId': {
                        'type': 'string',
                        'id': 3,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'createdAt': {
                        'type': $root.google.protobuf.Timestamp,
                        'id': 4
                      },
                      'updatedAt': {
                        'type': $root.google.protobuf.Timestamp,
                        'id': 5
                      },
                      'metaSiteId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 6,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'billingReference': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference,
                        'id': 7
                      },
                      'cycle': {
                        'type': $root.com.wixpress.billing.api.v1.Cycle,
                        'id': 8
                      },
                      'status': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus,
                        'id': 9
                      },
                      'transferredAt': {
                        'type': $root.google.protobuf.Timestamp,
                        'id': 10
                      },
                      'productTypeId': {
                        'type': 'string',
                        'id': 11,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'version': {
                        'type': 'int32',
                        'id': 12
                      },
                      'active': {
                        'type': 'bool',
                        'id': 13
                      }
                    }
                  };
                }
              }

              Object.defineProperty(Subscription.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.Subscription');
                },
                enumerable: false,
                configurable: false
              });
              return Subscription;
            }());
            v1.SubscriptionStatusEnum = (function() {

              class SubscriptionStatusEnum {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {},
                    'nested': {
                      'SubscriptionStatus': {
                        'values': {
                          'UNKNOWN': 0,
                          'AUTO_RENEW_ON': 1,
                          'AUTO_RENEW_OFF': 2,
                          'MANUAL_RECURRING': 3,
                          'CANCELLED': 4,
                          'TRANSFERRED': 5
                        }
                      }
                    }
                  };
                }
              }

              SubscriptionStatusEnum.SubscriptionStatus = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'AUTO_RENEW_ON': 1,
                1: 'AUTO_RENEW_ON',
                'AUTO_RENEW_OFF': 2,
                2: 'AUTO_RENEW_OFF',
                'MANUAL_RECURRING': 3,
                3: 'MANUAL_RECURRING',
                'CANCELLED': 4,
                4: 'CANCELLED',
                'TRANSFERRED': 5,
                5: 'TRANSFERRED'
              };
              SubscriptionStatusEnum.SubscriptionStatus = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'AUTO_RENEW_ON': 1,
                1: 'AUTO_RENEW_ON',
                'AUTO_RENEW_OFF': 2,
                2: 'AUTO_RENEW_OFF',
                'MANUAL_RECURRING': 3,
                3: 'MANUAL_RECURRING',
                'CANCELLED': 4,
                4: 'CANCELLED',
                'TRANSFERRED': 5,
                5: 'TRANSFERRED'
              };
              Object.defineProperty(SubscriptionStatusEnum.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum');
                },
                enumerable: false,
                configurable: false
              });
              return SubscriptionStatusEnum;
            }());
            v1.SubscriptionsManager = (function() {

              class SubscriptionsManager {

                constructor() {
                  if (this.constructor.name === SubscriptionsManager.name) {
                    throw new TypeError('class SubscriptionsManager is abstract');
                  }
                }

                listSubscriptions(aspects, msg) {
                  throw new TypeError('method listSubscriptions is abstract');
                }

                getSubscription(aspects, msg) {
                  throw new TypeError('method getSubscription is abstract');
                }

                getByBillingReference(aspects, msg) {
                  throw new TypeError('method getByBillingReference is abstract');
                }

                listCancellationRequests(aspects, msg) {
                  throw new TypeError('method listCancellationRequests is abstract');
                }

                assignToSite(aspects, msg) {
                  throw new TypeError('method assignToSite is abstract');
                }

                unassignFromSite(aspects, msg) {
                  throw new TypeError('method unassignFromSite is abstract');
                }

                cancelImmediately(aspects, msg) {
                  throw new TypeError('method cancelImmediately is abstract');
                }

                turnAutoRenewOff(aspects, msg) {
                  throw new TypeError('method turnAutoRenewOff is abstract');
                }

                turnAutoRenewOn(aspects, msg) {
                  throw new TypeError('method turnAutoRenewOn is abstract');
                }

                transferFromAnotherUser(aspects, msg) {
                  throw new TypeError('method transferFromAnotherUser is abstract');
                }
              }

              SubscriptionsManager.prototype.listSubscriptions._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsResponse
                ];
              };
              SubscriptionsManager.prototype.getSubscription._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionResponse
                ];
              };
              SubscriptionsManager.prototype.getByBillingReference._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceResponse
                ];
              };
              SubscriptionsManager.prototype.listCancellationRequests._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsResponse
                ];
              };
              SubscriptionsManager.prototype.assignToSite._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteResponse
                ];
              };
              SubscriptionsManager.prototype.unassignFromSite._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteResponse
                ];
              };
              SubscriptionsManager.prototype.cancelImmediately._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationResponse
                ];
              };
              SubscriptionsManager.prototype.turnAutoRenewOff._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffResponse
                ];
              };
              SubscriptionsManager.prototype.turnAutoRenewOn._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnResponse
                ];
              };
              SubscriptionsManager.prototype.transferFromAnotherUser._messageTypes = function() {
                return [
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserRequest,
                  $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserResponse
                ];
              };
              SubscriptionsManager.prototype.listSubscriptions.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.ListSubscriptions');
              };
              SubscriptionsManager.prototype.getSubscription.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.GetSubscription');
              };
              SubscriptionsManager.prototype.getByBillingReference.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.GetByBillingReference');
              };
              SubscriptionsManager.prototype.listCancellationRequests.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.ListCancellationRequests');
              };
              SubscriptionsManager.prototype.assignToSite.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.AssignToSite');
              };
              SubscriptionsManager.prototype.unassignFromSite.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.UnassignFromSite');
              };
              SubscriptionsManager.prototype.cancelImmediately.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.CancelImmediately');
              };
              SubscriptionsManager.prototype.turnAutoRenewOff.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.TurnAutoRenewOff');
              };
              SubscriptionsManager.prototype.turnAutoRenewOn.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.TurnAutoRenewOn');
              };
              SubscriptionsManager.prototype.transferFromAnotherUser.__proto = pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager.TransferFromAnotherUser');
              };
              Object.defineProperty(SubscriptionsManager.prototype, '__isRpcService__', {
                value: true,
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManager.prototype, '__fqn__', {
                value: 'com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager',
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManager.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionsManager');
                },
                enumerable: false,
                configurable: false
              });
              Object.defineProperty(SubscriptionsManager.prototype, '__options__', {
                value: $root.__options,
                enumerable: false,
                configurable: false
              });
              return SubscriptionsManager;
            }());
            v1.ListSubscriptionsRequest = (function() {

              class ListSubscriptionsRequest {

                constructor(props) {
                  this.filter = props && props.filter;
                  this.paging = props && props.paging;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.filter != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter.verify(msg.filter, helper, errors.field('filter'));
                    }
                    if (msg.paging != null) {
                      $root.wix.common.Paging.verify(msg.paging, helper, errors.field('paging'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.filter != null) {
                      json.filter = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter.toJSON(obj.filter, helper);
                    }
                    if (obj.paging != null) {
                      json.paging = $root.wix.common.Paging.toJSON(obj.paging, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsRequest();

                  if (json.filter != null) {
                    result.filter = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter.fromJSON(json.filter, helper);
                  } else {
                    delete result.filter;
                  }
                  if (json.paging != null) {
                    result.paging = $root.wix.common.Paging.fromJSON(json.paging, helper);
                  } else {
                    delete result.paging;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.filter != null) {
                      grpc.filter = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter.toGRPC(obj.filter, helper);
                    }
                    if (obj.paging != null) {
                      grpc.paging = $root.wix.common.Paging.toGRPC(obj.paging, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsRequest();

                    if (grpc.filter != null) {
                      result.filter = $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter.fromGRPC(grpc.filter, helper);
                    } else {
                      delete result.filter;
                    }
                    if (grpc.paging != null) {
                      result.paging = $root.wix.common.Paging.fromGRPC(grpc.paging, helper);
                    } else {
                      delete result.paging;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'filter': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter,
                        'id': 1
                      },
                      'paging': {
                        'type': $root.wix.common.Paging,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ListSubscriptionsRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsRequest');
                },
                enumerable: false,
                configurable: false
              });
              return ListSubscriptionsRequest;
            }());
            v1.ListSubscriptionsFilter = (function() {

              class ListSubscriptionsFilter {

                constructor(props) {
                  this.metaSiteId = props && props.metaSiteId;
                  this.statuses = props && props.statuses;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.metaSiteId != null) {
                      $root.google.protobuf.StringValue.verify(msg.metaSiteId, helper, errors.field('metaSiteId'));
                    }
                    if (msg.statuses != null) {
                      const fieldErrors = errors.field('statuses');

                      if (!Array.isArray(msg.statuses)) {
                        fieldErrors.error('array expected');
                      } else {
                        msg.statuses.forEach((value, index) => {
                          $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus.verify(value, helper, fieldErrors.index(index));
                        });
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.metaSiteId != null) {
                      json.metaSiteId = $root.google.protobuf.StringValue.toJSON(obj.metaSiteId, helper);
                    }
                    if (obj.statuses != null) {
                      json.statuses = obj.statuses.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus[e];
                      });
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter();

                  if (json.metaSiteId != null) {
                    result.metaSiteId = $root.google.protobuf.StringValue.fromJSON(json.metaSiteId, helper);
                  } else {
                    delete result.metaSiteId;
                  }
                  if (json.statuses != null) {
                    result.statuses = json.statuses.map(e => {
                      return $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus[e];
                    });
                  } else {
                    result.statuses = [];
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.metaSiteId != null) {
                      grpc.metaSiteId = $root.google.protobuf.StringValue.toGRPC(obj.metaSiteId, helper);
                    }
                    if (obj.statuses != null) {
                      grpc.statuses = obj.statuses.map(e => {
                        return e;
                      });
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter();

                    if (grpc.metaSiteId != null) {
                      result.metaSiteId = $root.google.protobuf.StringValue.fromGRPC(grpc.metaSiteId, helper);
                    } else {
                      delete result.metaSiteId;
                    }
                    if (grpc.statuses != null) {
                      result.statuses = grpc.statuses.map(e => {
                        return e;
                      });
                    } else {
                      result.statuses = [];
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'metaSiteId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'statuses': {
                        'rule': 'repeated',
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.SubscriptionStatusEnum.SubscriptionStatus,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ListSubscriptionsFilter.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsFilter');
                },
                enumerable: false,
                configurable: false
              });
              return ListSubscriptionsFilter;
            }());
            v1.ListSubscriptionsResponse = (function() {

              class ListSubscriptionsResponse {

                constructor(props) {
                  this.subscriptions = props && props.subscriptions;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptions != null) {
                      const fieldErrors = errors.field('subscriptions');

                      if (!Array.isArray(msg.subscriptions)) {
                        fieldErrors.error('array expected');
                      } else {
                        msg.subscriptions.forEach((value, index) => {
                          $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(value, helper, fieldErrors.index(index));
                        });
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptions != null) {
                      json.subscriptions = obj.subscriptions.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(e, helper);
                      });
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsResponse();

                  if (json.subscriptions != null) {
                    result.subscriptions = json.subscriptions.map(e => {
                      return $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(e, helper);
                    });
                  } else {
                    result.subscriptions = [];
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptions != null) {
                      grpc.subscriptions = obj.subscriptions.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(e, helper);
                      });
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsResponse();

                    if (grpc.subscriptions != null) {
                      result.subscriptions = grpc.subscriptions.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(e, helper);
                      });
                    } else {
                      result.subscriptions = [];
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptions': {
                        'rule': 'repeated',
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ListSubscriptionsResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ListSubscriptionsResponse');
                },
                enumerable: false,
                configurable: false
              });
              return ListSubscriptionsResponse;
            }());
            v1.GetSubscriptionRequest = (function() {

              class GetSubscriptionRequest {

                constructor(props) {
                  this.id = props && props.id;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.id != null) {
                      if (typeof msg.id !== 'string') {
                        errors.field('id').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.id != null) {
                      json.id = obj.id;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionRequest();

                  if (json.id != null) {
                    result.id = json.id;
                  } else {
                    result.id = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.id != null) {
                      grpc.id = obj.id;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionRequest();

                    if (grpc.id != null) {
                      result.id = grpc.id;
                    } else {
                      result.id = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'id': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(GetSubscriptionRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionRequest');
                },
                enumerable: false,
                configurable: false
              });
              return GetSubscriptionRequest;
            }());
            v1.GetSubscriptionResponse = (function() {

              class GetSubscriptionResponse {

                constructor(props) {
                  this.subscription = props && props.subscription;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionResponse();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionResponse();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(GetSubscriptionResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.GetSubscriptionResponse');
                },
                enumerable: false,
                configurable: false
              });
              return GetSubscriptionResponse;
            }());
            v1.GetByBillingReferenceRequest = (function() {

              class GetByBillingReferenceRequest {

                constructor(props) {
                  this.billingReferenceId = props && props.billingReferenceId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.billingReferenceId != null) {
                      if (typeof msg.billingReferenceId !== 'string') {
                        errors.field('billingReferenceId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.billingReferenceId != null) {
                      json.billingReferenceId = obj.billingReferenceId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceRequest();

                  if (json.billingReferenceId != null) {
                    result.billingReferenceId = json.billingReferenceId;
                  } else {
                    result.billingReferenceId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.billingReferenceId != null) {
                      grpc.billingReferenceId = obj.billingReferenceId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceRequest();

                    if (grpc.billingReferenceId != null) {
                      result.billingReferenceId = grpc.billingReferenceId;
                    } else {
                      result.billingReferenceId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'billingReferenceId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(GetByBillingReferenceRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceRequest');
                },
                enumerable: false,
                configurable: false
              });
              return GetByBillingReferenceRequest;
            }());
            v1.GetByBillingReferenceResponse = (function() {

              class GetByBillingReferenceResponse {

                constructor(props) {
                  this.subscription = props && props.subscription;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscription != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.verify(msg.subscription, helper, errors.field('subscription'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscription != null) {
                      json.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toJSON(obj.subscription, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceResponse();

                  if (json.subscription != null) {
                    result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromJSON(json.subscription, helper);
                  } else {
                    delete result.subscription;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscription != null) {
                      grpc.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.toGRPC(obj.subscription, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceResponse();

                    if (grpc.subscription != null) {
                      result.subscription = $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription.fromGRPC(grpc.subscription, helper);
                    } else {
                      delete result.subscription;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscription': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.Subscription,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(GetByBillingReferenceResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.GetByBillingReferenceResponse');
                },
                enumerable: false,
                configurable: false
              });
              return GetByBillingReferenceResponse;
            }());
            v1.ListCancellationsRequestsRequest = (function() {

              class ListCancellationsRequestsRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ListCancellationsRequestsRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsRequest');
                },
                enumerable: false,
                configurable: false
              });
              return ListCancellationsRequestsRequest;
            }());
            v1.ListCancellationsRequestsResponse = (function() {

              class ListCancellationsRequestsResponse {

                constructor(props) {
                  this.cancellationRequests = props && props.cancellationRequests;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.cancellationRequests != null) {
                      const fieldErrors = errors.field('cancellationRequests');

                      if (!Array.isArray(msg.cancellationRequests)) {
                        fieldErrors.error('array expected');
                      } else {
                        msg.cancellationRequests.forEach((value, index) => {
                          $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest.verify(value, helper, fieldErrors.index(index));
                        });
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.cancellationRequests != null) {
                      json.cancellationRequests = obj.cancellationRequests.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest.toJSON(e, helper);
                      });
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsResponse();

                  if (json.cancellationRequests != null) {
                    result.cancellationRequests = json.cancellationRequests.map(e => {
                      return $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest.fromJSON(e, helper);
                    });
                  } else {
                    result.cancellationRequests = [];
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.cancellationRequests != null) {
                      grpc.cancellationRequests = obj.cancellationRequests.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest.toGRPC(e, helper);
                      });
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsResponse();

                    if (grpc.cancellationRequests != null) {
                      result.cancellationRequests = grpc.cancellationRequests.map(e => {
                        return $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest.fromGRPC(e, helper);
                      });
                    } else {
                      result.cancellationRequests = [];
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'cancellationRequests': {
                        'rule': 'repeated',
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest,
                        'id': 1
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ListCancellationsRequestsResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.ListCancellationsRequestsResponse');
                },
                enumerable: false,
                configurable: false
              });
              return ListCancellationsRequestsResponse;
            }());
            v1.AssignToSiteRequest = (function() {

              class AssignToSiteRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                  this.metaSiteId = props && props.metaSiteId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                    if (msg.metaSiteId != null) {
                      if (typeof msg.metaSiteId !== 'string') {
                        errors.field('metaSiteId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.metaSiteId != null) {
                      json.metaSiteId = obj.metaSiteId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  if (json.metaSiteId != null) {
                    result.metaSiteId = json.metaSiteId;
                  } else {
                    result.metaSiteId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.metaSiteId != null) {
                      grpc.metaSiteId = obj.metaSiteId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    if (grpc.metaSiteId != null) {
                      result.metaSiteId = grpc.metaSiteId;
                    } else {
                      result.metaSiteId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'metaSiteId': {
                        'type': 'string',
                        'id': 2,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(AssignToSiteRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteRequest');
                },
                enumerable: false,
                configurable: false
              });
              return AssignToSiteRequest;
            }());
            v1.AssignToSiteResponse = (function() {

              class AssignToSiteResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(AssignToSiteResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.AssignToSiteResponse');
                },
                enumerable: false,
                configurable: false
              });
              return AssignToSiteResponse;
            }());
            v1.UnassignFromSiteRequest = (function() {

              class UnassignFromSiteRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(UnassignFromSiteRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteRequest');
                },
                enumerable: false,
                configurable: false
              });
              return UnassignFromSiteRequest;
            }());
            v1.UnassignFromSiteResponse = (function() {

              class UnassignFromSiteResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(UnassignFromSiteResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.UnassignFromSiteResponse');
                },
                enumerable: false,
                configurable: false
              });
              return UnassignFromSiteResponse;
            }());
            v1.CancellationRequest = (function() {

              class CancellationRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                  this.cancellationFlow = props && props.cancellationFlow;
                  this.reason = props && props.reason;
                  this.voided = props && props.voided;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                    if (msg.cancellationFlow != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow.verify(msg.cancellationFlow, helper, errors.field('cancellationFlow'));
                    }
                    if (msg.reason != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.verify(msg.reason, helper, errors.field('reason'));
                    }
                    if (msg.voided != null) {
                      if (typeof msg.voided !== 'boolean') {
                        errors.field('voided').error('boolean expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.cancellationFlow != null) {
                      json.cancellationFlow = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow[obj.cancellationFlow];
                    }
                    if (obj.reason != null) {
                      json.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.toJSON(obj.reason, helper);
                    }
                    if (obj.voided != null) {
                      json.voided = obj.voided;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  if (json.cancellationFlow != null) {
                    result.cancellationFlow = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow[json.cancellationFlow];
                  } else {
                    result.cancellationFlow = 0;
                  }
                  if (json.reason != null) {
                    result.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.fromJSON(json.reason, helper);
                  } else {
                    delete result.reason;
                  }
                  if (json.voided != null) {
                    result.voided = json.voided;
                  } else {
                    result.voided = false;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.cancellationFlow != null) {
                      grpc.cancellationFlow = obj.cancellationFlow;
                    }
                    if (obj.reason != null) {
                      grpc.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.toGRPC(obj.reason, helper);
                    }
                    if (obj.voided != null) {
                      grpc.voided = obj.voided;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    if (grpc.cancellationFlow != null) {
                      result.cancellationFlow = grpc.cancellationFlow;
                    } else {
                      result.cancellationFlow = 0;
                    }
                    if (grpc.reason != null) {
                      result.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.fromGRPC(grpc.reason, helper);
                    } else {
                      delete result.reason;
                    }
                    if (grpc.voided != null) {
                      result.voided = grpc.voided;
                    } else {
                      result.voided = false;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'cancellationFlow': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow,
                        'id': 2
                      },
                      'reason': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason,
                        'id': 3
                      },
                      'voided': {
                        'type': 'bool',
                        'id': 4
                      }
                    }
                  };
                }
              }

              Object.defineProperty(CancellationRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.CancellationRequest');
                },
                enumerable: false,
                configurable: false
              });
              return CancellationRequest;
            }());
            v1.CancellationResponse = (function() {

              class CancellationResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(CancellationResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.CancellationResponse');
                },
                enumerable: false,
                configurable: false
              });
              return CancellationResponse;
            }());
            v1.TurnAutoRenewOffRequest = (function() {

              class TurnAutoRenewOffRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                  this.cancellationFlow = props && props.cancellationFlow;
                  this.reason = props && props.reason;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                    if (msg.cancellationFlow != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow.verify(msg.cancellationFlow, helper, errors.field('cancellationFlow'));
                    }
                    if (msg.reason != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.verify(msg.reason, helper, errors.field('reason'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.cancellationFlow != null) {
                      json.cancellationFlow = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow[obj.cancellationFlow];
                    }
                    if (obj.reason != null) {
                      json.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.toJSON(obj.reason, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  if (json.cancellationFlow != null) {
                    result.cancellationFlow = $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow[json.cancellationFlow];
                  } else {
                    result.cancellationFlow = 0;
                  }
                  if (json.reason != null) {
                    result.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.fromJSON(json.reason, helper);
                  } else {
                    delete result.reason;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.cancellationFlow != null) {
                      grpc.cancellationFlow = obj.cancellationFlow;
                    }
                    if (obj.reason != null) {
                      grpc.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.toGRPC(obj.reason, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    if (grpc.cancellationFlow != null) {
                      result.cancellationFlow = grpc.cancellationFlow;
                    } else {
                      result.cancellationFlow = 0;
                    }
                    if (grpc.reason != null) {
                      result.reason = $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason.fromGRPC(grpc.reason, helper);
                    } else {
                      delete result.reason;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'cancellationFlow': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.CancellationFlowEnum.CancellationFlow,
                        'id': 2
                      },
                      'reason': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.UserCancellationReason,
                        'id': 3
                      }
                    }
                  };
                }
              }

              Object.defineProperty(TurnAutoRenewOffRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffRequest');
                },
                enumerable: false,
                configurable: false
              });
              return TurnAutoRenewOffRequest;
            }());
            v1.TurnAutoRenewOffResponse = (function() {

              class TurnAutoRenewOffResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(TurnAutoRenewOffResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOffResponse');
                },
                enumerable: false,
                configurable: false
              });
              return TurnAutoRenewOffResponse;
            }());
            v1.TurnAutoRenewOnRequest = (function() {

              class TurnAutoRenewOnRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      }
                    }
                  };
                }
              }

              Object.defineProperty(TurnAutoRenewOnRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnRequest');
                },
                enumerable: false,
                configurable: false
              });
              return TurnAutoRenewOnRequest;
            }());
            v1.TurnAutoRenewOnResponse = (function() {

              class TurnAutoRenewOnResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(TurnAutoRenewOnResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TurnAutoRenewOnResponse');
                },
                enumerable: false,
                configurable: false
              });
              return TurnAutoRenewOnResponse;
            }());
            v1.TransferFromAnotherUserRequest = (function() {

              class TransferFromAnotherUserRequest {

                constructor(props) {
                  this.subscriptionId = props && props.subscriptionId;
                  this.newBillingReference = props && props.newBillingReference;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.subscriptionId != null) {
                      if (typeof msg.subscriptionId !== 'string') {
                        errors.field('subscriptionId').error('string expected');
                      }
                    }
                    if (msg.newBillingReference != null) {
                      $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.verify(msg.newBillingReference, helper, errors.field('newBillingReference'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.subscriptionId != null) {
                      json.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.newBillingReference != null) {
                      json.newBillingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.toJSON(obj.newBillingReference, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserRequest();

                  if (json.subscriptionId != null) {
                    result.subscriptionId = json.subscriptionId;
                  } else {
                    result.subscriptionId = '';
                  }
                  if (json.newBillingReference != null) {
                    result.newBillingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.fromJSON(json.newBillingReference, helper);
                  } else {
                    delete result.newBillingReference;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.subscriptionId != null) {
                      grpc.subscriptionId = obj.subscriptionId;
                    }
                    if (obj.newBillingReference != null) {
                      grpc.newBillingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.toGRPC(obj.newBillingReference, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserRequest();

                    if (grpc.subscriptionId != null) {
                      result.subscriptionId = grpc.subscriptionId;
                    } else {
                      result.subscriptionId = '';
                    }
                    if (grpc.newBillingReference != null) {
                      result.newBillingReference = $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference.fromGRPC(grpc.newBillingReference, helper);
                    } else {
                      delete result.newBillingReference;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'subscriptionId': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'newBillingReference': {
                        'type': $root.com.wixpress.premium.subscriptionsmanager.api.v1.BillingReference,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(TransferFromAnotherUserRequest.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserRequest');
                },
                enumerable: false,
                configurable: false
              });
              return TransferFromAnotherUserRequest;
            }());
            v1.TransferFromAnotherUserResponse = (function() {

              class TransferFromAnotherUserResponse {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserResponse();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserResponse();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(TransferFromAnotherUserResponse.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.premium.subscriptionsmanager.api.v1.TransferFromAnotherUserResponse');
                },
                enumerable: false,
                configurable: false
              });
              return TransferFromAnotherUserResponse;
            }());
            return v1;
          }());
          return api;
        }());
        return subscriptionsmanager;
      }());
      return premium;
    }());
    wixpress.billing = (function() {
      const billing = {};

      billing.api = (function() {
        const api = {};

        api.v1 = (function() {
          const v1 = {};

          v1.Interval = (function() {

            class Interval {

              constructor(props) {
                this.unit = props && props.unit;
                this.count = props && props.count;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.unit != null) {
                    $root.com.wixpress.billing.api.v1.Interval.IntervalUnit.verify(msg.unit, helper, errors.field('unit'));
                  }
                  if (msg.count != null) {
                    if (!Number.isInteger(msg.count)) {
                      errors.field('count').error('integer expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.unit != null) {
                    json.unit = $root.com.wixpress.billing.api.v1.Interval.IntervalUnit[obj.unit];
                  }
                  if (obj.count != null) {
                    json.count = obj.count;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Interval();

                if (json.unit != null) {
                  result.unit = $root.com.wixpress.billing.api.v1.Interval.IntervalUnit[json.unit];
                } else {
                  result.unit = 0;
                }
                if (json.count != null) {
                  result.count = json.count;
                } else {
                  result.count = 0;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.unit != null) {
                    grpc.unit = obj.unit;
                  }
                  if (obj.count != null) {
                    grpc.count = obj.count;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Interval();

                  if (grpc.unit != null) {
                    result.unit = grpc.unit;
                  } else {
                    result.unit = 0;
                  }
                  if (grpc.count != null) {
                    result.count = grpc.count;
                  } else {
                    result.count = 0;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'unit': {
                      'type': $root.com.wixpress.billing.api.v1.Interval.IntervalUnit,
                      'id': 1
                    },
                    'count': {
                      'type': 'int32',
                      'id': 2
                    }
                  },
                  'nested': {
                    'IntervalUnit': {
                      'values': {
                        'UNKNOWN': 0,
                        'DAY': 1,
                        'WEEK': 2,
                        'MONTH': 3,
                        'YEAR': 4
                      }
                    }
                  }
                };
              }
            }

            Interval.IntervalUnit = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'DAY': 1,
              1: 'DAY',
              'WEEK': 2,
              2: 'WEEK',
              'MONTH': 3,
              3: 'MONTH',
              'YEAR': 4,
              4: 'YEAR'
            };
            Interval.IntervalUnit = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'DAY': 1,
              1: 'DAY',
              'WEEK': 2,
              2: 'WEEK',
              'MONTH': 3,
              3: 'MONTH',
              'YEAR': 4,
              4: 'YEAR'
            };
            Object.defineProperty(Interval.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Interval');
              },
              enumerable: false,
              configurable: false
            });
            return Interval;
          }());
          v1.OneTime = (function() {

            class OneTime {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.OneTime();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.OneTime();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(OneTime.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OneTime');
              },
              enumerable: false,
              configurable: false
            });
            return OneTime;
          }());
          v1.Cycle = (function() {

            class Cycle {

              constructor(props) {
                this.interval = props && props.interval;
                this.oneTime = props && props.oneTime;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.interval != null) {
                    if (oneOfMutex['cycleSelector']) {
                      errors.field('interval').up().field('cycleSelector').error('multiple values');
                    } else {
                      oneOfMutex['cycleSelector'] = true;
                      $root.com.wixpress.billing.api.v1.Interval.verify(msg.interval, helper, errors.field('interval'));
                    }
                  }
                  if (msg.oneTime != null) {
                    if (oneOfMutex['cycleSelector']) {
                      errors.field('oneTime').up().field('cycleSelector').error('multiple values');
                    } else {
                      oneOfMutex['cycleSelector'] = true;
                      $root.com.wixpress.billing.api.v1.OneTime.verify(msg.oneTime, helper, errors.field('oneTime'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.interval != null) {
                    json.interval = $root.com.wixpress.billing.api.v1.Interval.toJSON(obj.interval, helper);
                  }
                  if (obj.oneTime != null) {
                    json.oneTime = $root.com.wixpress.billing.api.v1.OneTime.toJSON(obj.oneTime, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Cycle();

                if (json.interval != null) {
                  result.interval = $root.com.wixpress.billing.api.v1.Interval.fromJSON(json.interval, helper);
                } else {
                  delete result.interval;
                }
                if (json.oneTime != null) {
                  result.oneTime = $root.com.wixpress.billing.api.v1.OneTime.fromJSON(json.oneTime, helper);
                } else {
                  delete result.oneTime;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.interval != null) {
                    grpc.interval = $root.com.wixpress.billing.api.v1.Interval.toGRPC(obj.interval, helper);
                  }
                  if (obj.oneTime != null) {
                    grpc.oneTime = $root.com.wixpress.billing.api.v1.OneTime.toGRPC(obj.oneTime, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Cycle();

                  if (grpc.interval != null) {
                    result.interval = $root.com.wixpress.billing.api.v1.Interval.fromGRPC(grpc.interval, helper);
                  } else {
                    delete result.interval;
                  }
                  if (grpc.oneTime != null) {
                    result.oneTime = $root.com.wixpress.billing.api.v1.OneTime.fromGRPC(grpc.oneTime, helper);
                  } else {
                    delete result.oneTime;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'cycleSelector': {
                      'oneof': [
                        'interval',
                        'oneTime'
                      ]
                    }
                  },
                  'fields': {
                    'interval': {
                      'type': $root.com.wixpress.billing.api.v1.Interval,
                      'id': 1
                    },
                    'oneTime': {
                      'type': $root.com.wixpress.billing.api.v1.OneTime,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(Cycle.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Cycle');
              },
              enumerable: false,
              configurable: false
            });
            return Cycle;
          }());
          v1.BillingAccountType = {
            verify: (value, helper, errors = helper.verification.Errors.empty()) => {
              switch (value) {
                default: {
                  errors.error('enum expected');
                }
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                  break;
              }
              return errors;
            },
            'CREDIT_CARD': 0,
            0: 'CREDIT_CARD',
            'E_CHECK': 1,
            1: 'E_CHECK',
            'BANK_DRAFT_ACCOUNT': 2,
            2: 'BANK_DRAFT_ACCOUNT',
            'MANUAL_PAYMENT_ACCOUNT': 3,
            3: 'MANUAL_PAYMENT_ACCOUNT',
            'PAY_PAL': 4,
            4: 'PAY_PAL',
            'WIRE_TRANSFER_ACCOUNT': 5,
            5: 'WIRE_TRANSFER_ACCOUNT',
            'WALLET_YANDEX': 6,
            6: 'WALLET_YANDEX',
            'MERCADO_PAGO_RECURRING': 7,
            7: 'MERCADO_PAGO_RECURRING',
            'CREDITS_PREPAID_CARD': 8,
            8: 'CREDITS_PREPAID_CARD',
            'REG_DOT_RU': 9,
            9: 'REG_DOT_RU',
            'SEPA_DIRECT_DEBIT': 10,
            10: 'SEPA_DIRECT_DEBIT',
            'VIRTUAL_MONEY': 11,
            11: 'VIRTUAL_MONEY',
            'ACCOUNT_CREDIT': 12,
            12: 'ACCOUNT_CREDIT',
            'CASH': 13,
            13: 'CASH',
            'BANK_TRANSFER': 14,
            14: 'BANK_TRANSFER',
            'LOCAL_CREDIT_DEBIT_CARD': 15,
            15: 'LOCAL_CREDIT_DEBIT_CARD'
          };
          v1.CreditCardType = {
            verify: (value, helper, errors = helper.verification.Errors.empty()) => {
              switch (value) {
                default: {
                  errors.error('enum expected');
                }
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                  break;
              }
              return errors;
            },
            'Visa': 0,
            0: 'Visa',
            'MasterCard': 1,
            1: 'MasterCard',
            'AMEX': 2,
            2: 'AMEX',
            'Discover': 3,
            3: 'Discover',
            'JCB': 4,
            4: 'JCB',
            'ENROUTE': 5,
            5: 'ENROUTE',
            'Diners': 6,
            6: 'Diners',
            'SOLO': 7,
            7: 'SOLO',
            'MASTERO': 8,
            8: 'MASTERO',
            'VISA_DELTA': 9,
            9: 'VISA_DELTA',
            'BANCARD': 10,
            10: 'BANCARD',
            'ELECTRON': 11,
            11: 'ELECTRON',
            'MAESTR_UK': 12,
            12: 'MAESTR_UK',
            'CARTE_BLUE': 13,
            13: 'CARTE_BLUE',
            'ELO': 14,
            14: 'ELO',
            'SBI_MAESTRO': 15,
            15: 'SBI_MAESTRO',
            'UnionPay': 16,
            16: 'UnionPay'
          };
          v1.BillingCycle = {
            verify: (value, helper, errors = helper.verification.Errors.empty()) => {
              switch (value) {
                default: {
                  errors.error('enum expected');
                }
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                  break;
              }
              return errors;
            },
            'ONE_TIME': 0,
            0: 'ONE_TIME',
            'DAILY': 1,
            1: 'DAILY',
            'WEEKLY': 2,
            2: 'WEEKLY',
            'MONTHLY': 3,
            3: 'MONTHLY',
            'QUARTERLY': 4,
            4: 'QUARTERLY',
            'SEMI_ANNUALLY': 5,
            5: 'SEMI_ANNUALLY',
            'YEARLY': 6,
            6: 'YEARLY',
            'TWO_YEARS': 7,
            7: 'TWO_YEARS',
            'THREE_YEARS': 8,
            8: 'THREE_YEARS',
            'FOUR_YEARS': 9,
            9: 'FOUR_YEARS',
            'FIVE_YEARS': 10,
            10: 'FIVE_YEARS'
          };
          v1.PaymentMethodSubType = {
            verify: (value, helper, errors = helper.verification.Errors.empty()) => {
              switch (value) {
                default: {
                  errors.error('enum expected');
                }
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                  break;
              }
              return errors;
            },
            'MP_OXXO': 0,
            0: 'MP_OXXO',
            'MP_BANAMEX': 1,
            1: 'MP_BANAMEX',
            'MP_BANCOMER': 2,
            2: 'MP_BANCOMER',
            'MP_SERFIN': 3,
            3: 'MP_SERFIN',
            'AP_BOLETO': 4,
            4: 'AP_BOLETO',
            'PAYU_CREDIT_CARD': 5,
            5: 'PAYU_CREDIT_CARD',
            'PAYU_DEBIT_CARD': 6,
            6: 'PAYU_DEBIT_CARD',
            'PAYU_NET_BANKING': 7,
            7: 'PAYU_NET_BANKING'
          };
          v1.Address = (function() {

            class Address {

              constructor(props) {
                this.fullName = props && props.fullName;
                this.country = props && props.country;
                this.stateCode = props && props.stateCode;
                this.city = props && props.city;
                this.zipCode = props && props.zipCode;
                this.phoneNumber = props && props.phoneNumber;
                this.company = props && props.company;
                this.street = props && props.street;
                this.taxInfo = props && props.taxInfo;
                this.email = props && props.email;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.fullName != null) {
                    $root.com.wixpress.billing.api.v1.FullName.verify(msg.fullName, helper, errors.field('fullName'));
                  }
                  if (msg.country != null) {
                    if (typeof msg.country !== 'string') {
                      errors.field('country').error('string expected');
                    }
                  }
                  if (msg.stateCode != null) {
                    $root.google.protobuf.StringValue.verify(msg.stateCode, helper, errors.field('stateCode'));
                  }
                  if (msg.city != null) {
                    if (typeof msg.city !== 'string') {
                      errors.field('city').error('string expected');
                    }
                  }
                  if (msg.zipCode != null) {
                    if (typeof msg.zipCode !== 'string') {
                      errors.field('zipCode').error('string expected');
                    }
                  }
                  if (msg.phoneNumber != null) {
                    if (typeof msg.phoneNumber !== 'string') {
                      errors.field('phoneNumber').error('string expected');
                    }
                  }
                  if (msg.company != null) {
                    if (typeof msg.company !== 'string') {
                      errors.field('company').error('string expected');
                    }
                  }
                  if (msg.street != null) {
                    $root.com.wixpress.billing.api.v1.Street.verify(msg.street, helper, errors.field('street'));
                  }
                  if (msg.taxInfo != null) {
                    $root.com.wixpress.billing.api.v1.TaxInfo.verify(msg.taxInfo, helper, errors.field('taxInfo'));
                  }
                  if (msg.email != null) {
                    $root.google.protobuf.StringValue.verify(msg.email, helper, errors.field('email'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.fullName != null) {
                    json.fullName = $root.com.wixpress.billing.api.v1.FullName.toJSON(obj.fullName, helper);
                  }
                  if (obj.country != null) {
                    json.country = obj.country;
                  }
                  if (obj.stateCode != null) {
                    json.stateCode = $root.google.protobuf.StringValue.toJSON(obj.stateCode, helper);
                  }
                  if (obj.city != null) {
                    json.city = obj.city;
                  }
                  if (obj.zipCode != null) {
                    json.zipCode = obj.zipCode;
                  }
                  if (obj.phoneNumber != null) {
                    json.phoneNumber = obj.phoneNumber;
                  }
                  if (obj.company != null) {
                    json.company = obj.company;
                  }
                  if (obj.street != null) {
                    json.street = $root.com.wixpress.billing.api.v1.Street.toJSON(obj.street, helper);
                  }
                  if (obj.taxInfo != null) {
                    json.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toJSON(obj.taxInfo, helper);
                  }
                  if (obj.email != null) {
                    json.email = $root.google.protobuf.StringValue.toJSON(obj.email, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Address();

                if (json.fullName != null) {
                  result.fullName = $root.com.wixpress.billing.api.v1.FullName.fromJSON(json.fullName, helper);
                } else {
                  delete result.fullName;
                }
                if (json.country != null) {
                  result.country = json.country;
                } else {
                  result.country = '';
                }
                if (json.stateCode != null) {
                  result.stateCode = $root.google.protobuf.StringValue.fromJSON(json.stateCode, helper);
                } else {
                  delete result.stateCode;
                }
                if (json.city != null) {
                  result.city = json.city;
                } else {
                  result.city = '';
                }
                if (json.zipCode != null) {
                  result.zipCode = json.zipCode;
                } else {
                  result.zipCode = '';
                }
                if (json.phoneNumber != null) {
                  result.phoneNumber = json.phoneNumber;
                } else {
                  result.phoneNumber = '';
                }
                if (json.company != null) {
                  result.company = json.company;
                } else {
                  result.company = '';
                }
                if (json.street != null) {
                  result.street = $root.com.wixpress.billing.api.v1.Street.fromJSON(json.street, helper);
                } else {
                  delete result.street;
                }
                if (json.taxInfo != null) {
                  result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromJSON(json.taxInfo, helper);
                } else {
                  delete result.taxInfo;
                }
                if (json.email != null) {
                  result.email = $root.google.protobuf.StringValue.fromJSON(json.email, helper);
                } else {
                  delete result.email;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.fullName != null) {
                    grpc.fullName = $root.com.wixpress.billing.api.v1.FullName.toGRPC(obj.fullName, helper);
                  }
                  if (obj.country != null) {
                    grpc.country = obj.country;
                  }
                  if (obj.stateCode != null) {
                    grpc.stateCode = $root.google.protobuf.StringValue.toGRPC(obj.stateCode, helper);
                  }
                  if (obj.city != null) {
                    grpc.city = obj.city;
                  }
                  if (obj.zipCode != null) {
                    grpc.zipCode = obj.zipCode;
                  }
                  if (obj.phoneNumber != null) {
                    grpc.phoneNumber = obj.phoneNumber;
                  }
                  if (obj.company != null) {
                    grpc.company = obj.company;
                  }
                  if (obj.street != null) {
                    grpc.street = $root.com.wixpress.billing.api.v1.Street.toGRPC(obj.street, helper);
                  }
                  if (obj.taxInfo != null) {
                    grpc.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toGRPC(obj.taxInfo, helper);
                  }
                  if (obj.email != null) {
                    grpc.email = $root.google.protobuf.StringValue.toGRPC(obj.email, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Address();

                  if (grpc.fullName != null) {
                    result.fullName = $root.com.wixpress.billing.api.v1.FullName.fromGRPC(grpc.fullName, helper);
                  } else {
                    delete result.fullName;
                  }
                  if (grpc.country != null) {
                    result.country = grpc.country;
                  } else {
                    result.country = '';
                  }
                  if (grpc.stateCode != null) {
                    result.stateCode = $root.google.protobuf.StringValue.fromGRPC(grpc.stateCode, helper);
                  } else {
                    delete result.stateCode;
                  }
                  if (grpc.city != null) {
                    result.city = grpc.city;
                  } else {
                    result.city = '';
                  }
                  if (grpc.zipCode != null) {
                    result.zipCode = grpc.zipCode;
                  } else {
                    result.zipCode = '';
                  }
                  if (grpc.phoneNumber != null) {
                    result.phoneNumber = grpc.phoneNumber;
                  } else {
                    result.phoneNumber = '';
                  }
                  if (grpc.company != null) {
                    result.company = grpc.company;
                  } else {
                    result.company = '';
                  }
                  if (grpc.street != null) {
                    result.street = $root.com.wixpress.billing.api.v1.Street.fromGRPC(grpc.street, helper);
                  } else {
                    delete result.street;
                  }
                  if (grpc.taxInfo != null) {
                    result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromGRPC(grpc.taxInfo, helper);
                  } else {
                    delete result.taxInfo;
                  }
                  if (grpc.email != null) {
                    result.email = $root.google.protobuf.StringValue.fromGRPC(grpc.email, helper);
                  } else {
                    delete result.email;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'fullName': {
                      'type': $root.com.wixpress.billing.api.v1.FullName,
                      'id': 1
                    },
                    'country': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'COUNTRY'
                      }
                    },
                    'stateCode': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 3,
                      'options': {
                        '(wix.api.minLength)': 5,
                        '(wix.api.maxLength)': 5
                      }
                    },
                    'city': {
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.maxLength)': 100
                      }
                    },
                    'zipCode': {
                      'type': 'string',
                      'id': 5,
                      'options': {
                        '(wix.api.maxLength)': 50
                      }
                    },
                    'phoneNumber': {
                      'type': 'string',
                      'id': 6,
                      'options': {
                        '(wix.api.format)': 'PHONE'
                      }
                    },
                    'company': {
                      'type': 'string',
                      'id': 7,
                      'options': {
                        '(wix.api.maxLength)': 100
                      }
                    },
                    'street': {
                      'type': $root.com.wixpress.billing.api.v1.Street,
                      'id': 8
                    },
                    'taxInfo': {
                      'type': $root.com.wixpress.billing.api.v1.TaxInfo,
                      'id': 9
                    },
                    'email': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 10,
                      'options': {
                        '(wix.api.format)': 'EMAIL'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(Address.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Address');
              },
              enumerable: false,
              configurable: false
            });
            return Address;
          }());
          v1.FullName = (function() {

            class FullName {

              constructor(props) {
                this.firstName = props && props.firstName;
                this.lastName = props && props.lastName;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.firstName != null) {
                    if (typeof msg.firstName !== 'string') {
                      errors.field('firstName').error('string expected');
                    }
                  }
                  if (msg.lastName != null) {
                    if (typeof msg.lastName !== 'string') {
                      errors.field('lastName').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.firstName != null) {
                    json.firstName = obj.firstName;
                  }
                  if (obj.lastName != null) {
                    json.lastName = obj.lastName;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.FullName();

                if (json.firstName != null) {
                  result.firstName = json.firstName;
                } else {
                  result.firstName = '';
                }
                if (json.lastName != null) {
                  result.lastName = json.lastName;
                } else {
                  result.lastName = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.firstName != null) {
                    grpc.firstName = obj.firstName;
                  }
                  if (obj.lastName != null) {
                    grpc.lastName = obj.lastName;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.FullName();

                  if (grpc.firstName != null) {
                    result.firstName = grpc.firstName;
                  } else {
                    result.firstName = '';
                  }
                  if (grpc.lastName != null) {
                    result.lastName = grpc.lastName;
                  } else {
                    result.lastName = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'firstName': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.maxLength)': 100
                      }
                    },
                    'lastName': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.maxLength)': 100
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(FullName.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.FullName');
              },
              enumerable: false,
              configurable: false
            });
            return FullName;
          }());
          v1.Street = (function() {

            class Street {

              constructor(props) {
                this.name = props && props.name;
                this.number = props && props.number;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.name != null) {
                    if (typeof msg.name !== 'string') {
                      errors.field('name').error('string expected');
                    }
                  }
                  if (msg.number != null) {
                    if (typeof msg.number !== 'string') {
                      errors.field('number').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.name != null) {
                    json.name = obj.name;
                  }
                  if (obj.number != null) {
                    json.number = obj.number;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Street();

                if (json.name != null) {
                  result.name = json.name;
                } else {
                  result.name = '';
                }
                if (json.number != null) {
                  result.number = json.number;
                } else {
                  result.number = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.name != null) {
                    grpc.name = obj.name;
                  }
                  if (obj.number != null) {
                    grpc.number = obj.number;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Street();

                  if (grpc.name != null) {
                    result.name = grpc.name;
                  } else {
                    result.name = '';
                  }
                  if (grpc.number != null) {
                    result.number = grpc.number;
                  } else {
                    result.number = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'name': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.maxLength)': 100
                      }
                    },
                    'number': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.maxLength)': 10
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(Street.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Street');
              },
              enumerable: false,
              configurable: false
            });
            return Street;
          }());
          v1.TaxInfo = (function() {

            class TaxInfo {

              constructor(props) {
                this.taxId = props && props.taxId;
                this.taxType = props && props.taxType;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.taxId != null) {
                    if (typeof msg.taxId !== 'string') {
                      errors.field('taxId').error('string expected');
                    }
                  }
                  if (msg.taxType != null) {
                    if (typeof msg.taxType !== 'string') {
                      errors.field('taxType').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.taxId != null) {
                    json.taxId = obj.taxId;
                  }
                  if (obj.taxType != null) {
                    json.taxType = obj.taxType;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.TaxInfo();

                if (json.taxId != null) {
                  result.taxId = json.taxId;
                } else {
                  result.taxId = '';
                }
                if (json.taxType != null) {
                  result.taxType = json.taxType;
                } else {
                  result.taxType = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.taxId != null) {
                    grpc.taxId = obj.taxId;
                  }
                  if (obj.taxType != null) {
                    grpc.taxType = obj.taxType;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.TaxInfo();

                  if (grpc.taxId != null) {
                    result.taxId = grpc.taxId;
                  } else {
                    result.taxId = '';
                  }
                  if (grpc.taxType != null) {
                    result.taxType = grpc.taxType;
                  } else {
                    result.taxType = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'taxId': {
                      'type': 'string',
                      'id': 1
                    },
                    'taxType': {
                      'type': 'string',
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(TaxInfo.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.TaxInfo');
              },
              enumerable: false,
              configurable: false
            });
            return TaxInfo;
          }());
          v1.Shipping = (function() {

            class Shipping {

              constructor(props) {
                this.shippingDetails = props && props.shippingDetails;
                this.selfPickup = props && props.selfPickup;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.shippingDetails != null) {
                    if (oneOfMutex['shippingSelector']) {
                      errors.field('shippingDetails').up().field('shippingSelector').error('multiple values');
                    } else {
                      oneOfMutex['shippingSelector'] = true;
                      $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails.verify(msg.shippingDetails, helper, errors.field('shippingDetails'));
                    }
                  }
                  if (msg.selfPickup != null) {
                    if (oneOfMutex['shippingSelector']) {
                      errors.field('selfPickup').up().field('shippingSelector').error('multiple values');
                    } else {
                      oneOfMutex['shippingSelector'] = true;
                      $root.com.wixpress.billing.api.v1.Shipping.SelfPickup.verify(msg.selfPickup, helper, errors.field('selfPickup'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.shippingDetails != null) {
                    json.shippingDetails = $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails.toJSON(obj.shippingDetails, helper);
                  }
                  if (obj.selfPickup != null) {
                    json.selfPickup = $root.com.wixpress.billing.api.v1.Shipping.SelfPickup.toJSON(obj.selfPickup, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Shipping();

                if (json.shippingDetails != null) {
                  result.shippingDetails = $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails.fromJSON(json.shippingDetails, helper);
                } else {
                  delete result.shippingDetails;
                }
                if (json.selfPickup != null) {
                  result.selfPickup = $root.com.wixpress.billing.api.v1.Shipping.SelfPickup.fromJSON(json.selfPickup, helper);
                } else {
                  delete result.selfPickup;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.shippingDetails != null) {
                    grpc.shippingDetails = $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails.toGRPC(obj.shippingDetails, helper);
                  }
                  if (obj.selfPickup != null) {
                    grpc.selfPickup = $root.com.wixpress.billing.api.v1.Shipping.SelfPickup.toGRPC(obj.selfPickup, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Shipping();

                  if (grpc.shippingDetails != null) {
                    result.shippingDetails = $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails.fromGRPC(grpc.shippingDetails, helper);
                  } else {
                    delete result.shippingDetails;
                  }
                  if (grpc.selfPickup != null) {
                    result.selfPickup = $root.com.wixpress.billing.api.v1.Shipping.SelfPickup.fromGRPC(grpc.selfPickup, helper);
                  } else {
                    delete result.selfPickup;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'shippingSelector': {
                      'oneof': [
                        'shippingDetails',
                        'selfPickup'
                      ]
                    }
                  },
                  'fields': {
                    'shippingDetails': {
                      'type': $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails,
                      'id': 1
                    },
                    'selfPickup': {
                      'type': $root.com.wixpress.billing.api.v1.Shipping.SelfPickup,
                      'id': 2
                    }
                  },
                  'nested': {
                    'ShippingDetails': {
                      'fields': {
                        'address': {
                          'type': 'Address',
                          'id': 1
                        },
                        'trackingNumber': {
                          'type': 'string',
                          'id': 2
                        }
                      }
                    },
                    'SelfPickup': {
                      'fields': {}
                    }
                  }
                };
              }
            }

            Shipping.ShippingDetails = (function() {

              class ShippingDetails {

                constructor(props) {
                  this.address = props && props.address;
                  this.trackingNumber = props && props.trackingNumber;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.address != null) {
                      $root.com.wixpress.billing.api.v1.Address.verify(msg.address, helper, errors.field('address'));
                    }
                    if (msg.trackingNumber != null) {
                      if (typeof msg.trackingNumber !== 'string') {
                        errors.field('trackingNumber').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.address != null) {
                      json.address = $root.com.wixpress.billing.api.v1.Address.toJSON(obj.address, helper);
                    }
                    if (obj.trackingNumber != null) {
                      json.trackingNumber = obj.trackingNumber;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails();

                  if (json.address != null) {
                    result.address = $root.com.wixpress.billing.api.v1.Address.fromJSON(json.address, helper);
                  } else {
                    delete result.address;
                  }
                  if (json.trackingNumber != null) {
                    result.trackingNumber = json.trackingNumber;
                  } else {
                    result.trackingNumber = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.address != null) {
                      grpc.address = $root.com.wixpress.billing.api.v1.Address.toGRPC(obj.address, helper);
                    }
                    if (obj.trackingNumber != null) {
                      grpc.trackingNumber = obj.trackingNumber;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails();

                    if (grpc.address != null) {
                      result.address = $root.com.wixpress.billing.api.v1.Address.fromGRPC(grpc.address, helper);
                    } else {
                      delete result.address;
                    }
                    if (grpc.trackingNumber != null) {
                      result.trackingNumber = grpc.trackingNumber;
                    } else {
                      result.trackingNumber = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'address': {
                        'type': $root.com.wixpress.billing.api.v1.Address,
                        'id': 1
                      },
                      'trackingNumber': {
                        'type': 'string',
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ShippingDetails.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Shipping.ShippingDetails');
                },
                enumerable: false,
                configurable: false
              });
              return ShippingDetails;
            }());
            Shipping.SelfPickup = (function() {

              class SelfPickup {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.Shipping.SelfPickup();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.Shipping.SelfPickup();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(SelfPickup.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Shipping.SelfPickup');
                },
                enumerable: false,
                configurable: false
              });
              return SelfPickup;
            }());
            Shipping.ShippingDetails = (function() {

              class ShippingDetails {

                constructor(props) {
                  this.address = props && props.address;
                  this.trackingNumber = props && props.trackingNumber;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.address != null) {
                      $root.com.wixpress.billing.api.v1.Address.verify(msg.address, helper, errors.field('address'));
                    }
                    if (msg.trackingNumber != null) {
                      if (typeof msg.trackingNumber !== 'string') {
                        errors.field('trackingNumber').error('string expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.address != null) {
                      json.address = $root.com.wixpress.billing.api.v1.Address.toJSON(obj.address, helper);
                    }
                    if (obj.trackingNumber != null) {
                      json.trackingNumber = obj.trackingNumber;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails();

                  if (json.address != null) {
                    result.address = $root.com.wixpress.billing.api.v1.Address.fromJSON(json.address, helper);
                  } else {
                    delete result.address;
                  }
                  if (json.trackingNumber != null) {
                    result.trackingNumber = json.trackingNumber;
                  } else {
                    result.trackingNumber = '';
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.address != null) {
                      grpc.address = $root.com.wixpress.billing.api.v1.Address.toGRPC(obj.address, helper);
                    }
                    if (obj.trackingNumber != null) {
                      grpc.trackingNumber = obj.trackingNumber;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.Shipping.ShippingDetails();

                    if (grpc.address != null) {
                      result.address = $root.com.wixpress.billing.api.v1.Address.fromGRPC(grpc.address, helper);
                    } else {
                      delete result.address;
                    }
                    if (grpc.trackingNumber != null) {
                      result.trackingNumber = grpc.trackingNumber;
                    } else {
                      result.trackingNumber = '';
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'address': {
                        'type': $root.com.wixpress.billing.api.v1.Address,
                        'id': 1
                      },
                      'trackingNumber': {
                        'type': 'string',
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(ShippingDetails.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Shipping.ShippingDetails');
                },
                enumerable: false,
                configurable: false
              });
              return ShippingDetails;
            }());
            Shipping.SelfPickup = (function() {

              class SelfPickup {

                constructor(props) {}

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                      errors.error('empty object expected');
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.Shipping.SelfPickup();

                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.Shipping.SelfPickup();

                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {}
                  };
                }
              }

              Object.defineProperty(SelfPickup.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Shipping.SelfPickup');
                },
                enumerable: false,
                configurable: false
              });
              return SelfPickup;
            }());
            Object.defineProperty(Shipping.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Shipping');
              },
              enumerable: false,
              configurable: false
            });
            return Shipping;
          }());
          v1.YearMonth = (function() {

            class YearMonth {

              constructor(props) {
                this.year = props && props.year;
                this.month = props && props.month;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.year != null) {
                    if (!Number.isInteger(msg.year)) {
                      errors.field('year').error('integer expected');
                    }
                  }
                  if (msg.month != null) {
                    if (!Number.isInteger(msg.month)) {
                      errors.field('month').error('integer expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.year != null) {
                    json.year = obj.year;
                  }
                  if (obj.month != null) {
                    json.month = obj.month;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.YearMonth();

                if (json.year != null) {
                  result.year = json.year;
                } else {
                  result.year = 0;
                }
                if (json.month != null) {
                  result.month = json.month;
                } else {
                  result.month = 0;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.year != null) {
                    grpc.year = obj.year;
                  }
                  if (obj.month != null) {
                    grpc.month = obj.month;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.YearMonth();

                  if (grpc.year != null) {
                    result.year = grpc.year;
                  } else {
                    result.year = 0;
                  }
                  if (grpc.month != null) {
                    result.month = grpc.month;
                  } else {
                    result.month = 0;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'year': {
                      'type': 'int32',
                      'id': 1,
                      'options': {
                        '(wix.api.min)': 2019,
                        '(wix.api.max)': 2099
                      }
                    },
                    'month': {
                      'type': 'int32',
                      'id': 2,
                      'options': {
                        '(wix.api.min)': 1,
                        '(wix.api.max)': 12
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(YearMonth.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.YearMonth');
              },
              enumerable: false,
              configurable: false
            });
            return YearMonth;
          }());
          v1.Amounts = (function() {

            class Amounts {

              constructor(props) {
                this.subTotalAmount = props && props.subTotalAmount;
                this.creditAmount = props && props.creditAmount;
                this.discountAmount = props && props.discountAmount;
                this.beforeTaxAmount = props && props.beforeTaxAmount;
                this.taxAmounts = props && props.taxAmounts;
                this.totalAmount = props && props.totalAmount;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.subTotalAmount != null) {
                    if (!Number.isInteger(msg.subTotalAmount) && !Long.isLong(msg.subTotalAmount)) {
                      errors.field('subTotalAmount').error('long or integer expected');
                    }
                  }
                  if (msg.creditAmount != null) {
                    if (!Number.isInteger(msg.creditAmount) && !Long.isLong(msg.creditAmount)) {
                      errors.field('creditAmount').error('long or integer expected');
                    }
                  }
                  if (msg.discountAmount != null) {
                    if (!Number.isInteger(msg.discountAmount) && !Long.isLong(msg.discountAmount)) {
                      errors.field('discountAmount').error('long or integer expected');
                    }
                  }
                  if (msg.beforeTaxAmount != null) {
                    if (!Number.isInteger(msg.beforeTaxAmount) && !Long.isLong(msg.beforeTaxAmount)) {
                      errors.field('beforeTaxAmount').error('long or integer expected');
                    }
                  }
                  if (msg.taxAmounts != null) {
                    const fieldErrors = errors.field('taxAmounts');

                    if (!Array.isArray(msg.taxAmounts)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.taxAmounts.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.TaxAmount.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.totalAmount != null) {
                    if (!Number.isInteger(msg.totalAmount) && !Long.isLong(msg.totalAmount)) {
                      errors.field('totalAmount').error('long or integer expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.subTotalAmount != null) {
                    json.subTotalAmount = obj.subTotalAmount.toString();
                  }
                  if (obj.creditAmount != null) {
                    json.creditAmount = obj.creditAmount.toString();
                  }
                  if (obj.discountAmount != null) {
                    json.discountAmount = obj.discountAmount.toString();
                  }
                  if (obj.beforeTaxAmount != null) {
                    json.beforeTaxAmount = obj.beforeTaxAmount.toString();
                  }
                  if (obj.taxAmounts != null) {
                    json.taxAmounts = obj.taxAmounts.map(e => {
                      return $root.com.wixpress.billing.api.v1.TaxAmount.toJSON(e, helper);
                    });
                  }
                  if (obj.totalAmount != null) {
                    json.totalAmount = obj.totalAmount.toString();
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Amounts();

                if (json.subTotalAmount != null) {
                  result.subTotalAmount = Long.fromValue(json.subTotalAmount);
                } else {
                  result.subTotalAmount = Long.ZERO;
                }
                if (json.creditAmount != null) {
                  result.creditAmount = Long.fromValue(json.creditAmount);
                } else {
                  result.creditAmount = Long.ZERO;
                }
                if (json.discountAmount != null) {
                  result.discountAmount = Long.fromValue(json.discountAmount);
                } else {
                  result.discountAmount = Long.ZERO;
                }
                if (json.beforeTaxAmount != null) {
                  result.beforeTaxAmount = Long.fromValue(json.beforeTaxAmount);
                } else {
                  result.beforeTaxAmount = Long.ZERO;
                }
                if (json.taxAmounts != null) {
                  result.taxAmounts = json.taxAmounts.map(e => {
                    return $root.com.wixpress.billing.api.v1.TaxAmount.fromJSON(e, helper);
                  });
                } else {
                  result.taxAmounts = [];
                }
                if (json.totalAmount != null) {
                  result.totalAmount = Long.fromValue(json.totalAmount);
                } else {
                  result.totalAmount = Long.ZERO;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.subTotalAmount != null) {
                    grpc.subTotalAmount = obj.subTotalAmount.toString();
                  }
                  if (obj.creditAmount != null) {
                    grpc.creditAmount = obj.creditAmount.toString();
                  }
                  if (obj.discountAmount != null) {
                    grpc.discountAmount = obj.discountAmount.toString();
                  }
                  if (obj.beforeTaxAmount != null) {
                    grpc.beforeTaxAmount = obj.beforeTaxAmount.toString();
                  }
                  if (obj.taxAmounts != null) {
                    grpc.taxAmounts = obj.taxAmounts.map(e => {
                      return $root.com.wixpress.billing.api.v1.TaxAmount.toGRPC(e, helper);
                    });
                  }
                  if (obj.totalAmount != null) {
                    grpc.totalAmount = obj.totalAmount.toString();
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Amounts();

                  if (grpc.subTotalAmount != null) {
                    result.subTotalAmount = Long.fromValue(grpc.subTotalAmount);
                  } else {
                    result.subTotalAmount = Long.ZERO;
                  }
                  if (grpc.creditAmount != null) {
                    result.creditAmount = Long.fromValue(grpc.creditAmount);
                  } else {
                    result.creditAmount = Long.ZERO;
                  }
                  if (grpc.discountAmount != null) {
                    result.discountAmount = Long.fromValue(grpc.discountAmount);
                  } else {
                    result.discountAmount = Long.ZERO;
                  }
                  if (grpc.beforeTaxAmount != null) {
                    result.beforeTaxAmount = Long.fromValue(grpc.beforeTaxAmount);
                  } else {
                    result.beforeTaxAmount = Long.ZERO;
                  }
                  if (grpc.taxAmounts != null) {
                    result.taxAmounts = grpc.taxAmounts.map(e => {
                      return $root.com.wixpress.billing.api.v1.TaxAmount.fromGRPC(e, helper);
                    });
                  } else {
                    result.taxAmounts = [];
                  }
                  if (grpc.totalAmount != null) {
                    result.totalAmount = Long.fromValue(grpc.totalAmount);
                  } else {
                    result.totalAmount = Long.ZERO;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'subTotalAmount': {
                      'type': 'int64',
                      'id': 1
                    },
                    'creditAmount': {
                      'type': 'int64',
                      'id': 2
                    },
                    'discountAmount': {
                      'type': 'int64',
                      'id': 3
                    },
                    'beforeTaxAmount': {
                      'type': 'int64',
                      'id': 4
                    },
                    'taxAmounts': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.TaxAmount,
                      'id': 6
                    },
                    'totalAmount': {
                      'type': 'int64',
                      'id': 7
                    }
                  }
                };
              }
            }

            Object.defineProperty(Amounts.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Amounts');
              },
              enumerable: false,
              configurable: false
            });
            return Amounts;
          }());
          v1.TaxAmount = (function() {

            class TaxAmount {

              constructor(props) {
                this.tax = props && props.tax;
                this.amount = props && props.amount;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.tax != null) {
                    $root.com.wixpress.billing.api.v1.Tax.verify(msg.tax, helper, errors.field('tax'));
                  }
                  if (msg.amount != null) {
                    if (!Number.isInteger(msg.amount) && !Long.isLong(msg.amount)) {
                      errors.field('amount').error('long or integer expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.tax != null) {
                    json.tax = $root.com.wixpress.billing.api.v1.Tax.toJSON(obj.tax, helper);
                  }
                  if (obj.amount != null) {
                    json.amount = obj.amount.toString();
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.TaxAmount();

                if (json.tax != null) {
                  result.tax = $root.com.wixpress.billing.api.v1.Tax.fromJSON(json.tax, helper);
                } else {
                  delete result.tax;
                }
                if (json.amount != null) {
                  result.amount = Long.fromValue(json.amount);
                } else {
                  result.amount = Long.ZERO;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.tax != null) {
                    grpc.tax = $root.com.wixpress.billing.api.v1.Tax.toGRPC(obj.tax, helper);
                  }
                  if (obj.amount != null) {
                    grpc.amount = obj.amount.toString();
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.TaxAmount();

                  if (grpc.tax != null) {
                    result.tax = $root.com.wixpress.billing.api.v1.Tax.fromGRPC(grpc.tax, helper);
                  } else {
                    delete result.tax;
                  }
                  if (grpc.amount != null) {
                    result.amount = Long.fromValue(grpc.amount);
                  } else {
                    result.amount = Long.ZERO;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'tax': {
                      'type': $root.com.wixpress.billing.api.v1.Tax,
                      'id': 1
                    },
                    'amount': {
                      'type': 'int64',
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(TaxAmount.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.TaxAmount');
              },
              enumerable: false,
              configurable: false
            });
            return TaxAmount;
          }());
          v1.RecurringPayment = (function() {

            class RecurringPayment {

              constructor(props) {
                this.date = props && props.date;
                this.amounts = props && props.amounts;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.date != null) {
                    $root.google.protobuf.Timestamp.verify(msg.date, helper, errors.field('date'));
                  }
                  if (msg.amounts != null) {
                    $root.com.wixpress.billing.api.v1.Amounts.verify(msg.amounts, helper, errors.field('amounts'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.date != null) {
                    json.date = $root.google.protobuf.Timestamp.toJSON(obj.date, helper);
                  }
                  if (obj.amounts != null) {
                    json.amounts = $root.com.wixpress.billing.api.v1.Amounts.toJSON(obj.amounts, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RecurringPayment();

                if (json.date != null) {
                  result.date = $root.google.protobuf.Timestamp.fromJSON(json.date, helper);
                } else {
                  delete result.date;
                }
                if (json.amounts != null) {
                  result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromJSON(json.amounts, helper);
                } else {
                  delete result.amounts;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.date != null) {
                    grpc.date = $root.google.protobuf.Timestamp.toGRPC(obj.date, helper);
                  }
                  if (obj.amounts != null) {
                    grpc.amounts = $root.com.wixpress.billing.api.v1.Amounts.toGRPC(obj.amounts, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RecurringPayment();

                  if (grpc.date != null) {
                    result.date = $root.google.protobuf.Timestamp.fromGRPC(grpc.date, helper);
                  } else {
                    delete result.date;
                  }
                  if (grpc.amounts != null) {
                    result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromGRPC(grpc.amounts, helper);
                  } else {
                    delete result.amounts;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'date': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 1
                    },
                    'amounts': {
                      'type': $root.com.wixpress.billing.api.v1.Amounts,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(RecurringPayment.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RecurringPayment');
              },
              enumerable: false,
              configurable: false
            });
            return RecurringPayment;
          }());
          v1.Tax = (function() {

            class Tax {

              constructor(props) {
                this.name = props && props.name;
                this.percent = props && props.percent;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.name != null) {
                    if (typeof msg.name !== 'string') {
                      errors.field('name').error('string expected');
                    }
                  }
                  if (msg.percent != null) {
                    if (typeof msg.percent !== 'number') {
                      errors.field('percent').error('number expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.name != null) {
                    json.name = obj.name;
                  }
                  if (obj.percent != null) {
                    json.percent = obj.percent == null ? obj.percent : isNaN(obj.percent) ? 'NaN' : isFinite(obj.percent) ? obj.percent : obj.percent.toString();
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Tax();

                if (json.name != null) {
                  result.name = json.name;
                } else {
                  result.name = '';
                }
                if (json.percent != null) {
                  result.percent = json.percent === 'NaN' ? NaN : json.percent === 'Infinity' ? Infinity : json.percent === '-Infinity' ? -Infinity : json.percent;
                } else {
                  result.percent = 0;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.name != null) {
                    grpc.name = obj.name;
                  }
                  if (obj.percent != null) {
                    grpc.percent = obj.percent;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Tax();

                  if (grpc.name != null) {
                    result.name = grpc.name;
                  } else {
                    result.name = '';
                  }
                  if (grpc.percent != null) {
                    result.percent = grpc.percent;
                  } else {
                    result.percent = 0;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'name': {
                      'type': 'string',
                      'id': 1
                    },
                    'percent': {
                      'type': 'double',
                      'id': 2,
                      'options': {
                        '(wix.api.min)': 0,
                        '(wix.api.max)': 100
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(Tax.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Tax');
              },
              enumerable: false,
              configurable: false
            });
            return Tax;
          }());
          v1.OrderTaxContext = (function() {

            class OrderTaxContext {

              constructor(props) {
                this.taxDetails = props && props.taxDetails;
                this.paymentSourceId = props && props.paymentSourceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.taxDetails != null) {
                    if (oneOfMutex['orderTaxContextSelector']) {
                      errors.field('taxDetails').up().field('orderTaxContextSelector').error('multiple values');
                    } else {
                      oneOfMutex['orderTaxContextSelector'] = true;
                      $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails.verify(msg.taxDetails, helper, errors.field('taxDetails'));
                    }
                  }
                  if (msg.paymentSourceId != null) {
                    if (oneOfMutex['orderTaxContextSelector']) {
                      errors.field('paymentSourceId').up().field('orderTaxContextSelector').error('multiple values');
                    } else {
                      oneOfMutex['orderTaxContextSelector'] = true;
                      if (typeof msg.paymentSourceId !== 'string') {
                        errors.field('paymentSourceId').error('string expected');
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.taxDetails != null) {
                    json.taxDetails = $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails.toJSON(obj.taxDetails, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext();

                if (json.taxDetails != null) {
                  result.taxDetails = $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails.fromJSON(json.taxDetails, helper);
                } else {
                  delete result.taxDetails;
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  delete result.paymentSourceId;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.taxDetails != null) {
                    grpc.taxDetails = $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails.toGRPC(obj.taxDetails, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext();

                  if (grpc.taxDetails != null) {
                    result.taxDetails = $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails.fromGRPC(grpc.taxDetails, helper);
                  } else {
                    delete result.taxDetails;
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    delete result.paymentSourceId;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'orderTaxContextSelector': {
                      'oneof': [
                        'taxDetails',
                        'paymentSourceId'
                      ]
                    }
                  },
                  'fields': {
                    'taxDetails': {
                      'type': $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails,
                      'id': 1
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  },
                  'nested': {
                    'TaxDetails': {
                      'fields': {
                        'country': {
                          'type': 'string',
                          'id': 1,
                          'options': {
                            '(wix.api.format)': 'COUNTRY'
                          }
                        },
                        'taxInfo': {
                          'type': 'TaxInfo',
                          'id': 2
                        }
                      }
                    }
                  }
                };
              }
            }

            OrderTaxContext.TaxDetails = (function() {

              class TaxDetails {

                constructor(props) {
                  this.country = props && props.country;
                  this.taxInfo = props && props.taxInfo;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.country != null) {
                      if (typeof msg.country !== 'string') {
                        errors.field('country').error('string expected');
                      }
                    }
                    if (msg.taxInfo != null) {
                      $root.com.wixpress.billing.api.v1.TaxInfo.verify(msg.taxInfo, helper, errors.field('taxInfo'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.country != null) {
                      json.country = obj.country;
                    }
                    if (obj.taxInfo != null) {
                      json.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toJSON(obj.taxInfo, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails();

                  if (json.country != null) {
                    result.country = json.country;
                  } else {
                    result.country = '';
                  }
                  if (json.taxInfo != null) {
                    result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromJSON(json.taxInfo, helper);
                  } else {
                    delete result.taxInfo;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.country != null) {
                      grpc.country = obj.country;
                    }
                    if (obj.taxInfo != null) {
                      grpc.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toGRPC(obj.taxInfo, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails();

                    if (grpc.country != null) {
                      result.country = grpc.country;
                    } else {
                      result.country = '';
                    }
                    if (grpc.taxInfo != null) {
                      result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromGRPC(grpc.taxInfo, helper);
                    } else {
                      delete result.taxInfo;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'country': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'COUNTRY'
                        }
                      },
                      'taxInfo': {
                        'type': $root.com.wixpress.billing.api.v1.TaxInfo,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(TaxDetails.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails');
                },
                enumerable: false,
                configurable: false
              });
              return TaxDetails;
            }());
            OrderTaxContext.TaxDetails = (function() {

              class TaxDetails {

                constructor(props) {
                  this.country = props && props.country;
                  this.taxInfo = props && props.taxInfo;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.country != null) {
                      if (typeof msg.country !== 'string') {
                        errors.field('country').error('string expected');
                      }
                    }
                    if (msg.taxInfo != null) {
                      $root.com.wixpress.billing.api.v1.TaxInfo.verify(msg.taxInfo, helper, errors.field('taxInfo'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.country != null) {
                      json.country = obj.country;
                    }
                    if (obj.taxInfo != null) {
                      json.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toJSON(obj.taxInfo, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails();

                  if (json.country != null) {
                    result.country = json.country;
                  } else {
                    result.country = '';
                  }
                  if (json.taxInfo != null) {
                    result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromJSON(json.taxInfo, helper);
                  } else {
                    delete result.taxInfo;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.country != null) {
                      grpc.country = obj.country;
                    }
                    if (obj.taxInfo != null) {
                      grpc.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.toGRPC(obj.taxInfo, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails();

                    if (grpc.country != null) {
                      result.country = grpc.country;
                    } else {
                      result.country = '';
                    }
                    if (grpc.taxInfo != null) {
                      result.taxInfo = $root.com.wixpress.billing.api.v1.TaxInfo.fromGRPC(grpc.taxInfo, helper);
                    } else {
                      delete result.taxInfo;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'country': {
                        'type': 'string',
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'COUNTRY'
                        }
                      },
                      'taxInfo': {
                        'type': $root.com.wixpress.billing.api.v1.TaxInfo,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(TaxDetails.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderTaxContext.TaxDetails');
                },
                enumerable: false,
                configurable: false
              });
              return TaxDetails;
            }());
            Object.defineProperty(OrderTaxContext.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderTaxContext');
              },
              enumerable: false,
              configurable: false
            });
            return OrderTaxContext;
          }());
          v1.Invoice = (function() {

            class Invoice {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
                this.shipping = props && props.shipping;
                this.paymentSourceId = props && props.paymentSourceId;
                this.createdOn = props && props.createdOn;
                this.currency = props && props.currency;
                this.invoiceLineItems = props && props.invoiceLineItems;
                this.invoiceStatus = props && props.invoiceStatus;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.shipping != null) {
                    $root.com.wixpress.billing.api.v1.Shipping.verify(msg.shipping, helper, errors.field('shipping'));
                  }
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                  if (msg.createdOn != null) {
                    $root.google.protobuf.Timestamp.verify(msg.createdOn, helper, errors.field('createdOn'));
                  }
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.invoiceLineItems != null) {
                    const fieldErrors = errors.field('invoiceLineItems');

                    if (!Array.isArray(msg.invoiceLineItems)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.invoiceLineItems.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.InvoiceLineItem.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.invoiceStatus != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.InvoiceStatus.verify(msg.invoiceStatus, helper, errors.field('invoiceStatus'));
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.shipping != null) {
                    json.shipping = $root.com.wixpress.billing.api.v1.Shipping.toJSON(obj.shipping, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.createdOn != null) {
                    json.createdOn = $root.google.protobuf.Timestamp.toJSON(obj.createdOn, helper);
                  }
                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.invoiceLineItems != null) {
                    json.invoiceLineItems = obj.invoiceLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.InvoiceLineItem.toJSON(e, helper);
                    });
                  }
                  if (obj.invoiceStatus != null) {
                    json.invoiceStatus = $root.com.wixpress.billing.api.v1.Invoice.InvoiceStatus[obj.invoiceStatus];
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Invoice();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.shipping != null) {
                  result.shipping = $root.com.wixpress.billing.api.v1.Shipping.fromJSON(json.shipping, helper);
                } else {
                  delete result.shipping;
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                if (json.createdOn != null) {
                  result.createdOn = $root.google.protobuf.Timestamp.fromJSON(json.createdOn, helper);
                } else {
                  delete result.createdOn;
                }
                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.invoiceLineItems != null) {
                  result.invoiceLineItems = json.invoiceLineItems.map(e => {
                    return $root.com.wixpress.billing.api.v1.InvoiceLineItem.fromJSON(e, helper);
                  });
                } else {
                  result.invoiceLineItems = [];
                }
                if (json.invoiceStatus != null) {
                  result.invoiceStatus = $root.com.wixpress.billing.api.v1.Invoice.InvoiceStatus[json.invoiceStatus];
                } else {
                  result.invoiceStatus = 0;
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.shipping != null) {
                    grpc.shipping = $root.com.wixpress.billing.api.v1.Shipping.toGRPC(obj.shipping, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.createdOn != null) {
                    grpc.createdOn = $root.google.protobuf.Timestamp.toGRPC(obj.createdOn, helper);
                  }
                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.invoiceLineItems != null) {
                    grpc.invoiceLineItems = obj.invoiceLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.InvoiceLineItem.toGRPC(e, helper);
                    });
                  }
                  if (obj.invoiceStatus != null) {
                    grpc.invoiceStatus = obj.invoiceStatus;
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Invoice();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.shipping != null) {
                    result.shipping = $root.com.wixpress.billing.api.v1.Shipping.fromGRPC(grpc.shipping, helper);
                  } else {
                    delete result.shipping;
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  if (grpc.createdOn != null) {
                    result.createdOn = $root.google.protobuf.Timestamp.fromGRPC(grpc.createdOn, helper);
                  } else {
                    delete result.createdOn;
                  }
                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.invoiceLineItems != null) {
                    result.invoiceLineItems = grpc.invoiceLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.InvoiceLineItem.fromGRPC(e, helper);
                    });
                  } else {
                    result.invoiceLineItems = [];
                  }
                  if (grpc.invoiceStatus != null) {
                    result.invoiceStatus = grpc.invoiceStatus;
                  } else {
                    result.invoiceStatus = 0;
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'shipping': {
                      'type': $root.com.wixpress.billing.api.v1.Shipping,
                      'id': 2,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 3,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'createdOn': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 4,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'currency': {
                      'type': 'string',
                      'id': 5,
                      'options': {
                        '(wix.api.readOnly)': true,
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'invoiceLineItems': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.InvoiceLineItem,
                      'id': 6,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'invoiceStatus': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice.InvoiceStatus,
                      'id': 7,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 8,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    }
                  },
                  'nested': {
                    'InvoiceStatus': {
                      'values': {
                        'UNKNOWN': 0,
                        'DRAFT': 1,
                        'PAID': 2,
                        'VOID': 3,
                        'REFUNDED': 4,
                        'DECLINED': 5,
                        'PAYMENT_IN_PROGRESS': 6
                      }
                    }
                  }
                };
              }
            }

            Invoice.InvoiceStatus = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'DRAFT': 1,
              1: 'DRAFT',
              'PAID': 2,
              2: 'PAID',
              'VOID': 3,
              3: 'VOID',
              'REFUNDED': 4,
              4: 'REFUNDED',
              'DECLINED': 5,
              5: 'DECLINED',
              'PAYMENT_IN_PROGRESS': 6,
              6: 'PAYMENT_IN_PROGRESS'
            };
            Invoice.InvoiceStatus = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'DRAFT': 1,
              1: 'DRAFT',
              'PAID': 2,
              2: 'PAID',
              'VOID': 3,
              3: 'VOID',
              'REFUNDED': 4,
              4: 'REFUNDED',
              'DECLINED': 5,
              5: 'DECLINED',
              'PAYMENT_IN_PROGRESS': 6,
              6: 'PAYMENT_IN_PROGRESS'
            };
            Object.defineProperty(Invoice.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Invoice');
              },
              enumerable: false,
              configurable: false
            });
            return Invoice;
          }());
          v1.InvoiceLineItem = (function() {

            class InvoiceLineItem {

              constructor(props) {
                this.invoiceLineItemId = props && props.invoiceLineItemId;
                this.productId = props && props.productId;
                this.cycle = props && props.cycle;
                this.unitAmount = props && props.unitAmount;
                this.quantity = props && props.quantity;
                this.beforeTaxesAmount = props && props.beforeTaxesAmount;
                this.totalAmount = props && props.totalAmount;
                this.serviceId = props && props.serviceId;
                this.taxes = props && props.taxes;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceLineItemId != null) {
                    $root.google.protobuf.StringValue.verify(msg.invoiceLineItemId, helper, errors.field('invoiceLineItemId'));
                  }
                  if (msg.productId != null) {
                    $root.google.protobuf.StringValue.verify(msg.productId, helper, errors.field('productId'));
                  }
                  if (msg.cycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.cycle, helper, errors.field('cycle'));
                  }
                  if (msg.unitAmount != null) {
                    if (!Number.isInteger(msg.unitAmount) && !Long.isLong(msg.unitAmount)) {
                      errors.field('unitAmount').error('long or integer expected');
                    }
                  }
                  if (msg.quantity != null) {
                    if (!Number.isInteger(msg.quantity)) {
                      errors.field('quantity').error('integer expected');
                    }
                  }
                  if (msg.beforeTaxesAmount != null) {
                    if (!Number.isInteger(msg.beforeTaxesAmount) && !Long.isLong(msg.beforeTaxesAmount)) {
                      errors.field('beforeTaxesAmount').error('long or integer expected');
                    }
                  }
                  if (msg.totalAmount != null) {
                    if (!Number.isInteger(msg.totalAmount) && !Long.isLong(msg.totalAmount)) {
                      errors.field('totalAmount').error('long or integer expected');
                    }
                  }
                  if (msg.serviceId != null) {
                    $root.google.protobuf.StringValue.verify(msg.serviceId, helper, errors.field('serviceId'));
                  }
                  if (msg.taxes != null) {
                    const fieldErrors = errors.field('taxes');

                    if (!Array.isArray(msg.taxes)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.taxes.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Tax.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceLineItemId != null) {
                    json.invoiceLineItemId = $root.google.protobuf.StringValue.toJSON(obj.invoiceLineItemId, helper);
                  }
                  if (obj.productId != null) {
                    json.productId = $root.google.protobuf.StringValue.toJSON(obj.productId, helper);
                  }
                  if (obj.cycle != null) {
                    json.cycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.cycle, helper);
                  }
                  if (obj.unitAmount != null) {
                    json.unitAmount = obj.unitAmount.toString();
                  }
                  if (obj.quantity != null) {
                    json.quantity = obj.quantity;
                  }
                  if (obj.beforeTaxesAmount != null) {
                    json.beforeTaxesAmount = obj.beforeTaxesAmount.toString();
                  }
                  if (obj.totalAmount != null) {
                    json.totalAmount = obj.totalAmount.toString();
                  }
                  if (obj.serviceId != null) {
                    json.serviceId = $root.google.protobuf.StringValue.toJSON(obj.serviceId, helper);
                  }
                  if (obj.taxes != null) {
                    json.taxes = obj.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.toJSON(e, helper);
                    });
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.InvoiceLineItem();

                if (json.invoiceLineItemId != null) {
                  result.invoiceLineItemId = $root.google.protobuf.StringValue.fromJSON(json.invoiceLineItemId, helper);
                } else {
                  delete result.invoiceLineItemId;
                }
                if (json.productId != null) {
                  result.productId = $root.google.protobuf.StringValue.fromJSON(json.productId, helper);
                } else {
                  delete result.productId;
                }
                if (json.cycle != null) {
                  result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.cycle, helper);
                } else {
                  delete result.cycle;
                }
                if (json.unitAmount != null) {
                  result.unitAmount = Long.fromValue(json.unitAmount);
                } else {
                  result.unitAmount = Long.ZERO;
                }
                if (json.quantity != null) {
                  result.quantity = json.quantity;
                } else {
                  result.quantity = 0;
                }
                if (json.beforeTaxesAmount != null) {
                  result.beforeTaxesAmount = Long.fromValue(json.beforeTaxesAmount);
                } else {
                  result.beforeTaxesAmount = Long.ZERO;
                }
                if (json.totalAmount != null) {
                  result.totalAmount = Long.fromValue(json.totalAmount);
                } else {
                  result.totalAmount = Long.ZERO;
                }
                if (json.serviceId != null) {
                  result.serviceId = $root.google.protobuf.StringValue.fromJSON(json.serviceId, helper);
                } else {
                  delete result.serviceId;
                }
                if (json.taxes != null) {
                  result.taxes = json.taxes.map(e => {
                    return $root.com.wixpress.billing.api.v1.Tax.fromJSON(e, helper);
                  });
                } else {
                  result.taxes = [];
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceLineItemId != null) {
                    grpc.invoiceLineItemId = $root.google.protobuf.StringValue.toGRPC(obj.invoiceLineItemId, helper);
                  }
                  if (obj.productId != null) {
                    grpc.productId = $root.google.protobuf.StringValue.toGRPC(obj.productId, helper);
                  }
                  if (obj.cycle != null) {
                    grpc.cycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.cycle, helper);
                  }
                  if (obj.unitAmount != null) {
                    grpc.unitAmount = obj.unitAmount.toString();
                  }
                  if (obj.quantity != null) {
                    grpc.quantity = obj.quantity;
                  }
                  if (obj.beforeTaxesAmount != null) {
                    grpc.beforeTaxesAmount = obj.beforeTaxesAmount.toString();
                  }
                  if (obj.totalAmount != null) {
                    grpc.totalAmount = obj.totalAmount.toString();
                  }
                  if (obj.serviceId != null) {
                    grpc.serviceId = $root.google.protobuf.StringValue.toGRPC(obj.serviceId, helper);
                  }
                  if (obj.taxes != null) {
                    grpc.taxes = obj.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.toGRPC(e, helper);
                    });
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.InvoiceLineItem();

                  if (grpc.invoiceLineItemId != null) {
                    result.invoiceLineItemId = $root.google.protobuf.StringValue.fromGRPC(grpc.invoiceLineItemId, helper);
                  } else {
                    delete result.invoiceLineItemId;
                  }
                  if (grpc.productId != null) {
                    result.productId = $root.google.protobuf.StringValue.fromGRPC(grpc.productId, helper);
                  } else {
                    delete result.productId;
                  }
                  if (grpc.cycle != null) {
                    result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.cycle, helper);
                  } else {
                    delete result.cycle;
                  }
                  if (grpc.unitAmount != null) {
                    result.unitAmount = Long.fromValue(grpc.unitAmount);
                  } else {
                    result.unitAmount = Long.ZERO;
                  }
                  if (grpc.quantity != null) {
                    result.quantity = grpc.quantity;
                  } else {
                    result.quantity = 0;
                  }
                  if (grpc.beforeTaxesAmount != null) {
                    result.beforeTaxesAmount = Long.fromValue(grpc.beforeTaxesAmount);
                  } else {
                    result.beforeTaxesAmount = Long.ZERO;
                  }
                  if (grpc.totalAmount != null) {
                    result.totalAmount = Long.fromValue(grpc.totalAmount);
                  } else {
                    result.totalAmount = Long.ZERO;
                  }
                  if (grpc.serviceId != null) {
                    result.serviceId = $root.google.protobuf.StringValue.fromGRPC(grpc.serviceId, helper);
                  } else {
                    delete result.serviceId;
                  }
                  if (grpc.taxes != null) {
                    result.taxes = grpc.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.fromGRPC(e, helper);
                    });
                  } else {
                    result.taxes = [];
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceLineItemId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'productId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'cycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 3,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'unitAmount': {
                      'type': 'int64',
                      'id': 4,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'quantity': {
                      'type': 'int32',
                      'id': 5,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'beforeTaxesAmount': {
                      'type': 'int64',
                      'id': 6,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'totalAmount': {
                      'type': 'int64',
                      'id': 7,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'serviceId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 8,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'taxes': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Tax,
                      'id': 9,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 10,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(InvoiceLineItem.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceLineItem');
              },
              enumerable: false,
              configurable: false
            });
            return InvoiceLineItem;
          }());
          v1.InvoiceService = (function() {

            class InvoiceService {

              constructor() {
                if (this.constructor.name === InvoiceService.name) {
                  throw new TypeError('class InvoiceService is abstract');
                }
              }

              listInvoices(aspects, msg) {
                throw new TypeError('method listInvoices is abstract');
              }

              getInvoice(aspects, msg) {
                throw new TypeError('method getInvoice is abstract');
              }

              payInvoice(aspects, msg) {
                throw new TypeError('method payInvoice is abstract');
              }

              captureInvoice(aspects, msg) {
                throw new TypeError('method captureInvoice is abstract');
              }

              refundInvoice(aspects, msg) {
                throw new TypeError('method refundInvoice is abstract');
              }

              captureInvoiceLineItem(aspects, msg) {
                throw new TypeError('method captureInvoiceLineItem is abstract');
              }

              refundInvoiceLineItem(aspects, msg) {
                throw new TypeError('method refundInvoiceLineItem is abstract');
              }
            }

            InvoiceService.prototype.listInvoices._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListInvoicesRequest,
                $root.com.wixpress.billing.api.v1.ListInvoicesResponse
              ];
            };
            InvoiceService.prototype.getInvoice._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetInvoiceRequest,
                $root.com.wixpress.billing.api.v1.GetInvoiceResponse
              ];
            };
            InvoiceService.prototype.payInvoice._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.PayInvoiceRequest,
                $root.com.wixpress.billing.api.v1.PayInvoiceResponse
              ];
            };
            InvoiceService.prototype.captureInvoice._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CaptureInvoiceRequest,
                $root.com.wixpress.billing.api.v1.CaptureInvoiceResponse
              ];
            };
            InvoiceService.prototype.refundInvoice._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.RefundInvoiceRequest,
                $root.com.wixpress.billing.api.v1.RefundInvoiceResponse
              ];
            };
            InvoiceService.prototype.captureInvoiceLineItem._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemRequest,
                $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemResponse
              ];
            };
            InvoiceService.prototype.refundInvoiceLineItem._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemRequest,
                $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemResponse
              ];
            };
            InvoiceService.prototype.listInvoices.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.ListInvoices');
            };
            InvoiceService.prototype.getInvoice.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.GetInvoice');
            };
            InvoiceService.prototype.payInvoice.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.PayInvoice');
            };
            InvoiceService.prototype.captureInvoice.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.CaptureInvoice');
            };
            InvoiceService.prototype.refundInvoice.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.RefundInvoice');
            };
            InvoiceService.prototype.captureInvoiceLineItem.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.CaptureInvoiceLineItem');
            };
            InvoiceService.prototype.refundInvoiceLineItem.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService.RefundInvoiceLineItem');
            };
            Object.defineProperty(InvoiceService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(InvoiceService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.InvoiceService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(InvoiceService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.InvoiceService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(InvoiceService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return InvoiceService;
          }());
          v1.ListInvoicesRequest = (function() {

            class ListInvoicesRequest {

              constructor(props) {
                this.paging = props && props.paging;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paging != null) {
                    $root.wix.common.Paging.verify(msg.paging, helper, errors.field('paging'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paging != null) {
                    json.paging = $root.wix.common.Paging.toJSON(obj.paging, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListInvoicesRequest();

                if (json.paging != null) {
                  result.paging = $root.wix.common.Paging.fromJSON(json.paging, helper);
                } else {
                  delete result.paging;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paging != null) {
                    grpc.paging = $root.wix.common.Paging.toGRPC(obj.paging, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListInvoicesRequest();

                  if (grpc.paging != null) {
                    result.paging = $root.wix.common.Paging.fromGRPC(grpc.paging, helper);
                  } else {
                    delete result.paging;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paging': {
                      'type': $root.wix.common.Paging,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListInvoicesRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListInvoicesRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListInvoicesRequest;
          }());
          v1.ListInvoicesResponse = (function() {

            class ListInvoicesResponse {

              constructor(props) {
                this.invoices = props && props.invoices;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoices != null) {
                    const fieldErrors = errors.field('invoices');

                    if (!Array.isArray(msg.invoices)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.invoices.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Invoice.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoices != null) {
                    json.invoices = obj.invoices.map(e => {
                      return $root.com.wixpress.billing.api.v1.Invoice.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListInvoicesResponse();

                if (json.invoices != null) {
                  result.invoices = json.invoices.map(e => {
                    return $root.com.wixpress.billing.api.v1.Invoice.fromJSON(e, helper);
                  });
                } else {
                  result.invoices = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoices != null) {
                    grpc.invoices = obj.invoices.map(e => {
                      return $root.com.wixpress.billing.api.v1.Invoice.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListInvoicesResponse();

                  if (grpc.invoices != null) {
                    result.invoices = grpc.invoices.map(e => {
                      return $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(e, helper);
                    });
                  } else {
                    result.invoices = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoices': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListInvoicesResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListInvoicesResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListInvoicesResponse;
          }());
          v1.GetInvoiceRequest = (function() {

            class GetInvoiceRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetInvoiceRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetInvoiceRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetInvoiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetInvoiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetInvoiceRequest;
          }());
          v1.GetInvoiceResponse = (function() {

            class GetInvoiceResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetInvoiceResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetInvoiceResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetInvoiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetInvoiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetInvoiceResponse;
          }());
          v1.PayInvoiceRequest = (function() {

            class PayInvoiceRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
                this.riskSessionId = props && props.riskSessionId;
                this.paymentSource = props && props.paymentSource;
                this.paymentSourceId = props && props.paymentSourceId;
                this.idempotencyKey = props && props.idempotencyKey;
                this.threeDsData = props && props.threeDsData;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.riskSessionId != null) {
                    $root.google.protobuf.StringValue.verify(msg.riskSessionId, helper, errors.field('riskSessionId'));
                  }
                  if (msg.paymentSource != null) {
                    if (oneOfMutex['paymentSourceSelector']) {
                      errors.field('paymentSource').up().field('paymentSourceSelector').error('multiple values');
                    } else {
                      oneOfMutex['paymentSourceSelector'] = true;
                      $root.com.wixpress.billing.api.v1.PaymentSourceDetails.verify(msg.paymentSource, helper, errors.field('paymentSource'));
                    }
                  }
                  if (msg.paymentSourceId != null) {
                    if (oneOfMutex['paymentSourceSelector']) {
                      errors.field('paymentSourceId').up().field('paymentSourceSelector').error('multiple values');
                    } else {
                      oneOfMutex['paymentSourceSelector'] = true;
                      if (typeof msg.paymentSourceId !== 'string') {
                        errors.field('paymentSourceId').error('string expected');
                      }
                    }
                  }
                  if (msg.idempotencyKey != null) {
                    if (typeof msg.idempotencyKey !== 'string') {
                      errors.field('idempotencyKey').error('string expected');
                    }
                  }
                  if (msg.threeDsData != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsData.verify(msg.threeDsData, helper, errors.field('threeDsData'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.riskSessionId != null) {
                    json.riskSessionId = $root.google.protobuf.StringValue.toJSON(obj.riskSessionId, helper);
                  }
                  if (obj.paymentSource != null) {
                    json.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.toJSON(obj.paymentSource, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.idempotencyKey != null) {
                    json.idempotencyKey = obj.idempotencyKey;
                  }
                  if (obj.threeDsData != null) {
                    json.threeDsData = $root.com.wixpress.billing.api.v1.ThreeDsData.toJSON(obj.threeDsData, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PayInvoiceRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.riskSessionId != null) {
                  result.riskSessionId = $root.google.protobuf.StringValue.fromJSON(json.riskSessionId, helper);
                } else {
                  delete result.riskSessionId;
                }
                if (json.paymentSource != null) {
                  result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.fromJSON(json.paymentSource, helper);
                } else {
                  delete result.paymentSource;
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  delete result.paymentSourceId;
                }
                if (json.idempotencyKey != null) {
                  result.idempotencyKey = json.idempotencyKey;
                } else {
                  result.idempotencyKey = '';
                }
                if (json.threeDsData != null) {
                  result.threeDsData = $root.com.wixpress.billing.api.v1.ThreeDsData.fromJSON(json.threeDsData, helper);
                } else {
                  delete result.threeDsData;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.riskSessionId != null) {
                    grpc.riskSessionId = $root.google.protobuf.StringValue.toGRPC(obj.riskSessionId, helper);
                  }
                  if (obj.paymentSource != null) {
                    grpc.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.toGRPC(obj.paymentSource, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.idempotencyKey != null) {
                    grpc.idempotencyKey = obj.idempotencyKey;
                  }
                  if (obj.threeDsData != null) {
                    grpc.threeDsData = $root.com.wixpress.billing.api.v1.ThreeDsData.toGRPC(obj.threeDsData, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PayInvoiceRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.riskSessionId != null) {
                    result.riskSessionId = $root.google.protobuf.StringValue.fromGRPC(grpc.riskSessionId, helper);
                  } else {
                    delete result.riskSessionId;
                  }
                  if (grpc.paymentSource != null) {
                    result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.fromGRPC(grpc.paymentSource, helper);
                  } else {
                    delete result.paymentSource;
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    delete result.paymentSourceId;
                  }
                  if (grpc.idempotencyKey != null) {
                    result.idempotencyKey = grpc.idempotencyKey;
                  } else {
                    result.idempotencyKey = '';
                  }
                  if (grpc.threeDsData != null) {
                    result.threeDsData = $root.com.wixpress.billing.api.v1.ThreeDsData.fromGRPC(grpc.threeDsData, helper);
                  } else {
                    delete result.threeDsData;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'paymentSourceSelector': {
                      'oneof': [
                        'paymentSource',
                        'paymentSourceId'
                      ]
                    }
                  },
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    },
                    'riskSessionId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 2
                    },
                    'paymentSource': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSourceDetails,
                      'id': 3
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'idempotencyKey': {
                      'type': 'string',
                      'id': 5,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'threeDsData': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsData,
                      'id': 6
                    }
                  }
                };
              }
            }

            Object.defineProperty(PayInvoiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PayInvoiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return PayInvoiceRequest;
          }());
          v1.PayInvoiceResponse = (function() {

            class PayInvoiceResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
                this.paymentSourceId = props && props.paymentSourceId;
                this.threeDsNextAction = props && props.threeDsNextAction;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                  if (msg.threeDsNextAction != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsNextAction.verify(msg.threeDsNextAction, helper, errors.field('threeDsNextAction'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.threeDsNextAction != null) {
                    json.threeDsNextAction = $root.com.wixpress.billing.api.v1.ThreeDsNextAction.toJSON(obj.threeDsNextAction, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PayInvoiceResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                if (json.threeDsNextAction != null) {
                  result.threeDsNextAction = $root.com.wixpress.billing.api.v1.ThreeDsNextAction.fromJSON(json.threeDsNextAction, helper);
                } else {
                  delete result.threeDsNextAction;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.threeDsNextAction != null) {
                    grpc.threeDsNextAction = $root.com.wixpress.billing.api.v1.ThreeDsNextAction.toGRPC(obj.threeDsNextAction, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PayInvoiceResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  if (grpc.threeDsNextAction != null) {
                    result.threeDsNextAction = $root.com.wixpress.billing.api.v1.ThreeDsNextAction.fromGRPC(grpc.threeDsNextAction, helper);
                  } else {
                    delete result.threeDsNextAction;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 2
                    },
                    'threeDsNextAction': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsNextAction,
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(PayInvoiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PayInvoiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return PayInvoiceResponse;
          }());
          v1.CaptureInvoiceRequest = (function() {

            class CaptureInvoiceRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CaptureInvoiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CaptureInvoiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CaptureInvoiceRequest;
          }());
          v1.CaptureInvoiceResponse = (function() {

            class CaptureInvoiceResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CaptureInvoiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CaptureInvoiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CaptureInvoiceResponse;
          }());
          v1.RefundReasonEnum = (function() {

            class RefundReasonEnum {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RefundReasonEnum();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RefundReasonEnum();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {},
                  'nested': {
                    'RefundReason': {
                      'values': {
                        'UNKNOWN': 0,
                        'FRAUDULENT': 1,
                        'REQUESTED_BY_CUSTOMER': 2
                      }
                    }
                  }
                };
              }
            }

            RefundReasonEnum.RefundReason = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'FRAUDULENT': 1,
              1: 'FRAUDULENT',
              'REQUESTED_BY_CUSTOMER': 2,
              2: 'REQUESTED_BY_CUSTOMER'
            };
            RefundReasonEnum.RefundReason = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'FRAUDULENT': 1,
              1: 'FRAUDULENT',
              'REQUESTED_BY_CUSTOMER': 2,
              2: 'REQUESTED_BY_CUSTOMER'
            };
            Object.defineProperty(RefundReasonEnum.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RefundReasonEnum');
              },
              enumerable: false,
              configurable: false
            });
            return RefundReasonEnum;
          }());
          v1.RefundInvoiceRequest = (function() {

            class RefundInvoiceRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
                this.reason = props && props.reason;
                this.description = props && props.description;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.reason != null) {
                    $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason.verify(msg.reason, helper, errors.field('reason'));
                  }
                  if (msg.description != null) {
                    if (typeof msg.description !== 'string') {
                      errors.field('description').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.reason != null) {
                    json.reason = $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason[obj.reason];
                  }
                  if (obj.description != null) {
                    json.description = obj.description;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.reason != null) {
                  result.reason = $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason[json.reason];
                } else {
                  result.reason = 0;
                }
                if (json.description != null) {
                  result.description = json.description;
                } else {
                  result.description = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.reason != null) {
                    grpc.reason = obj.reason;
                  }
                  if (obj.description != null) {
                    grpc.description = obj.description;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.reason != null) {
                    result.reason = grpc.reason;
                  } else {
                    result.reason = 0;
                  }
                  if (grpc.description != null) {
                    result.description = grpc.description;
                  } else {
                    result.description = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    },
                    'reason': {
                      'type': $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason,
                      'id': 2
                    },
                    'description': {
                      'type': 'string',
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(RefundInvoiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RefundInvoiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return RefundInvoiceRequest;
          }());
          v1.RefundInvoiceResponse = (function() {

            class RefundInvoiceResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(RefundInvoiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RefundInvoiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return RefundInvoiceResponse;
          }());
          v1.CaptureInvoiceLineItemRequest = (function() {

            class CaptureInvoiceLineItemRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
                this.invoiceLineItemId = props && props.invoiceLineItemId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.invoiceLineItemId != null) {
                    if (typeof msg.invoiceLineItemId !== 'string') {
                      errors.field('invoiceLineItemId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.invoiceLineItemId != null) {
                    json.invoiceLineItemId = obj.invoiceLineItemId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.invoiceLineItemId != null) {
                  result.invoiceLineItemId = json.invoiceLineItemId;
                } else {
                  result.invoiceLineItemId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.invoiceLineItemId != null) {
                    grpc.invoiceLineItemId = obj.invoiceLineItemId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.invoiceLineItemId != null) {
                    result.invoiceLineItemId = grpc.invoiceLineItemId;
                  } else {
                    result.invoiceLineItemId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    },
                    'invoiceLineItemId': {
                      'type': 'string',
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(CaptureInvoiceLineItemRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CaptureInvoiceLineItemRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CaptureInvoiceLineItemRequest;
          }());
          v1.CaptureInvoiceLineItemResponse = (function() {

            class CaptureInvoiceLineItemResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CaptureInvoiceLineItemResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CaptureInvoiceLineItemResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CaptureInvoiceLineItemResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CaptureInvoiceLineItemResponse;
          }());
          v1.RefundInvoiceLineItemRequest = (function() {

            class RefundInvoiceLineItemRequest {

              constructor(props) {
                this.invoiceId = props && props.invoiceId;
                this.invoiceLineItemId = props && props.invoiceLineItemId;
                this.reason = props && props.reason;
                this.description = props && props.description;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.invoiceLineItemId != null) {
                    if (typeof msg.invoiceLineItemId !== 'string') {
                      errors.field('invoiceLineItemId').error('string expected');
                    }
                  }
                  if (msg.reason != null) {
                    $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason.verify(msg.reason, helper, errors.field('reason'));
                  }
                  if (msg.description != null) {
                    if (typeof msg.description !== 'string') {
                      errors.field('description').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.invoiceLineItemId != null) {
                    json.invoiceLineItemId = obj.invoiceLineItemId;
                  }
                  if (obj.reason != null) {
                    json.reason = $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason[obj.reason];
                  }
                  if (obj.description != null) {
                    json.description = obj.description;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemRequest();

                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.invoiceLineItemId != null) {
                  result.invoiceLineItemId = json.invoiceLineItemId;
                } else {
                  result.invoiceLineItemId = '';
                }
                if (json.reason != null) {
                  result.reason = $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason[json.reason];
                } else {
                  result.reason = 0;
                }
                if (json.description != null) {
                  result.description = json.description;
                } else {
                  result.description = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.invoiceLineItemId != null) {
                    grpc.invoiceLineItemId = obj.invoiceLineItemId;
                  }
                  if (obj.reason != null) {
                    grpc.reason = obj.reason;
                  }
                  if (obj.description != null) {
                    grpc.description = obj.description;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemRequest();

                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.invoiceLineItemId != null) {
                    result.invoiceLineItemId = grpc.invoiceLineItemId;
                  } else {
                    result.invoiceLineItemId = '';
                  }
                  if (grpc.reason != null) {
                    result.reason = grpc.reason;
                  } else {
                    result.reason = 0;
                  }
                  if (grpc.description != null) {
                    result.description = grpc.description;
                  } else {
                    result.description = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoiceId': {
                      'type': 'string',
                      'id': 1
                    },
                    'invoiceLineItemId': {
                      'type': 'string',
                      'id': 2
                    },
                    'reason': {
                      'type': $root.com.wixpress.billing.api.v1.RefundReasonEnum.RefundReason,
                      'id': 3
                    },
                    'description': {
                      'type': 'string',
                      'id': 4
                    }
                  }
                };
              }
            }

            Object.defineProperty(RefundInvoiceLineItemRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RefundInvoiceLineItemRequest');
              },
              enumerable: false,
              configurable: false
            });
            return RefundInvoiceLineItemRequest;
          }());
          v1.RefundInvoiceLineItemResponse = (function() {

            class RefundInvoiceLineItemResponse {

              constructor(props) {
                this.invoice = props && props.invoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.invoice != null) {
                    $root.com.wixpress.billing.api.v1.Invoice.verify(msg.invoice, helper, errors.field('invoice'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.invoice != null) {
                    json.invoice = $root.com.wixpress.billing.api.v1.Invoice.toJSON(obj.invoice, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemResponse();

                if (json.invoice != null) {
                  result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromJSON(json.invoice, helper);
                } else {
                  delete result.invoice;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.invoice != null) {
                    grpc.invoice = $root.com.wixpress.billing.api.v1.Invoice.toGRPC(obj.invoice, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.RefundInvoiceLineItemResponse();

                  if (grpc.invoice != null) {
                    result.invoice = $root.com.wixpress.billing.api.v1.Invoice.fromGRPC(grpc.invoice, helper);
                  } else {
                    delete result.invoice;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'invoice': {
                      'type': $root.com.wixpress.billing.api.v1.Invoice,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(RefundInvoiceLineItemResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.RefundInvoiceLineItemResponse');
              },
              enumerable: false,
              configurable: false
            });
            return RefundInvoiceLineItemResponse;
          }());
          v1.ThreeDsProvider = (function() {

            class ThreeDsProvider {

              constructor(props) {
                this.providerType = props && props.providerType;
                this.hash = props && props.hash;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.providerType != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.ThreeDsProviderEnum.verify(msg.providerType, helper, errors.field('providerType'));
                  }
                  if (msg.hash != null) {
                    if (typeof msg.hash !== 'string') {
                      errors.field('hash').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.providerType != null) {
                    json.providerType = $root.com.wixpress.billing.api.v1.ThreeDsProvider.ThreeDsProviderEnum[obj.providerType];
                  }
                  if (obj.hash != null) {
                    json.hash = obj.hash;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsProvider();

                if (json.providerType != null) {
                  result.providerType = $root.com.wixpress.billing.api.v1.ThreeDsProvider.ThreeDsProviderEnum[json.providerType];
                } else {
                  result.providerType = 0;
                }
                if (json.hash != null) {
                  result.hash = json.hash;
                } else {
                  result.hash = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.providerType != null) {
                    grpc.providerType = obj.providerType;
                  }
                  if (obj.hash != null) {
                    grpc.hash = obj.hash;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsProvider();

                  if (grpc.providerType != null) {
                    result.providerType = grpc.providerType;
                  } else {
                    result.providerType = 0;
                  }
                  if (grpc.hash != null) {
                    result.hash = grpc.hash;
                  } else {
                    result.hash = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'providerType': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider.ThreeDsProviderEnum,
                      'id': 1
                    },
                    'hash': {
                      'type': 'string',
                      'id': 2
                    }
                  },
                  'nested': {
                    'ThreeDsProviderEnum': {
                      'values': {
                        'UNKNOWN': 0,
                        'ADYEN': 1,
                        'WORLDPAY': 2
                      }
                    }
                  }
                };
              }
            }

            ThreeDsProvider.ThreeDsProviderEnum = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'ADYEN': 1,
              1: 'ADYEN',
              'WORLDPAY': 2,
              2: 'WORLDPAY'
            };
            ThreeDsProvider.ThreeDsProviderEnum = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'ADYEN': 1,
              1: 'ADYEN',
              'WORLDPAY': 2,
              2: 'WORLDPAY'
            };
            Object.defineProperty(ThreeDsProvider.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsProvider');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsProvider;
          }());
          v1.ThreeDsChallengeDisplaySize = (function() {

            class ThreeDsChallengeDisplaySize {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {},
                  'nested': {
                    'ThreeDsChallengeDisplaySizeEnum': {
                      'values': {
                        'UNKNOWN': 0,
                        'SMALL': 1,
                        'MEDIUM': 2,
                        'LARGE': 3
                      }
                    }
                  }
                };
              }
            }

            ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'SMALL': 1,
              1: 'SMALL',
              'MEDIUM': 2,
              2: 'MEDIUM',
              'LARGE': 3,
              3: 'LARGE'
            };
            ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'SMALL': 1,
              1: 'SMALL',
              'MEDIUM': 2,
              2: 'MEDIUM',
              'LARGE': 3,
              3: 'LARGE'
            };
            Object.defineProperty(ThreeDsChallengeDisplaySize.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsChallengeDisplaySize;
          }());
          v1.ThreeDsInitialData = (function() {

            class ThreeDsInitialData {

              constructor(props) {
                this.provider = props && props.provider;
                this.challengeDisplaySize = props && props.challengeDisplaySize;
                this.browserInfo = props && props.browserInfo;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.challengeDisplaySize != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum.verify(msg.challengeDisplaySize, helper, errors.field('challengeDisplaySize'));
                  }
                  if (msg.browserInfo != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo.verify(msg.browserInfo, helper, errors.field('browserInfo'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    json.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[obj.challengeDisplaySize];
                  }
                  if (obj.browserInfo != null) {
                    json.browserInfo = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo.toJSON(obj.browserInfo, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.challengeDisplaySize != null) {
                  result.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[json.challengeDisplaySize];
                } else {
                  result.challengeDisplaySize = 0;
                }
                if (json.browserInfo != null) {
                  result.browserInfo = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo.fromJSON(json.browserInfo, helper);
                } else {
                  delete result.browserInfo;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    grpc.challengeDisplaySize = obj.challengeDisplaySize;
                  }
                  if (obj.browserInfo != null) {
                    grpc.browserInfo = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo.toGRPC(obj.browserInfo, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.challengeDisplaySize != null) {
                    result.challengeDisplaySize = grpc.challengeDisplaySize;
                  } else {
                    result.challengeDisplaySize = 0;
                  }
                  if (grpc.browserInfo != null) {
                    result.browserInfo = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo.fromGRPC(grpc.browserInfo, helper);
                  } else {
                    delete result.browserInfo;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'challengeDisplaySize': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum,
                      'id': 2
                    },
                    'browserInfo': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo,
                      'id': 3
                    }
                  },
                  'nested': {
                    'BrowserInfo': {
                      'fields': {
                        'userAgent': {
                          'type': 'string',
                          'id': 1
                        },
                        'acceptHeader': {
                          'type': 'string',
                          'id': 2
                        },
                        'language': {
                          'type': 'string',
                          'id': 3
                        },
                        'colorDepth': {
                          'type': 'int32',
                          'id': 4
                        },
                        'screenHeight': {
                          'type': 'int32',
                          'id': 5
                        },
                        'screenWidth': {
                          'type': 'int32',
                          'id': 6
                        },
                        'timeZoneOffset': {
                          'type': 'int32',
                          'id': 7
                        },
                        'javaEnabled': {
                          'type': 'bool',
                          'id': 8
                        }
                      }
                    }
                  }
                };
              }
            }

            ThreeDsInitialData.BrowserInfo = (function() {

              class BrowserInfo {

                constructor(props) {
                  this.userAgent = props && props.userAgent;
                  this.acceptHeader = props && props.acceptHeader;
                  this.language = props && props.language;
                  this.colorDepth = props && props.colorDepth;
                  this.screenHeight = props && props.screenHeight;
                  this.screenWidth = props && props.screenWidth;
                  this.timeZoneOffset = props && props.timeZoneOffset;
                  this.javaEnabled = props && props.javaEnabled;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.userAgent != null) {
                      if (typeof msg.userAgent !== 'string') {
                        errors.field('userAgent').error('string expected');
                      }
                    }
                    if (msg.acceptHeader != null) {
                      if (typeof msg.acceptHeader !== 'string') {
                        errors.field('acceptHeader').error('string expected');
                      }
                    }
                    if (msg.language != null) {
                      if (typeof msg.language !== 'string') {
                        errors.field('language').error('string expected');
                      }
                    }
                    if (msg.colorDepth != null) {
                      if (!Number.isInteger(msg.colorDepth)) {
                        errors.field('colorDepth').error('integer expected');
                      }
                    }
                    if (msg.screenHeight != null) {
                      if (!Number.isInteger(msg.screenHeight)) {
                        errors.field('screenHeight').error('integer expected');
                      }
                    }
                    if (msg.screenWidth != null) {
                      if (!Number.isInteger(msg.screenWidth)) {
                        errors.field('screenWidth').error('integer expected');
                      }
                    }
                    if (msg.timeZoneOffset != null) {
                      if (!Number.isInteger(msg.timeZoneOffset)) {
                        errors.field('timeZoneOffset').error('integer expected');
                      }
                    }
                    if (msg.javaEnabled != null) {
                      if (typeof msg.javaEnabled !== 'boolean') {
                        errors.field('javaEnabled').error('boolean expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.userAgent != null) {
                      json.userAgent = obj.userAgent;
                    }
                    if (obj.acceptHeader != null) {
                      json.acceptHeader = obj.acceptHeader;
                    }
                    if (obj.language != null) {
                      json.language = obj.language;
                    }
                    if (obj.colorDepth != null) {
                      json.colorDepth = obj.colorDepth;
                    }
                    if (obj.screenHeight != null) {
                      json.screenHeight = obj.screenHeight;
                    }
                    if (obj.screenWidth != null) {
                      json.screenWidth = obj.screenWidth;
                    }
                    if (obj.timeZoneOffset != null) {
                      json.timeZoneOffset = obj.timeZoneOffset;
                    }
                    if (obj.javaEnabled != null) {
                      json.javaEnabled = obj.javaEnabled;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo();

                  if (json.userAgent != null) {
                    result.userAgent = json.userAgent;
                  } else {
                    result.userAgent = '';
                  }
                  if (json.acceptHeader != null) {
                    result.acceptHeader = json.acceptHeader;
                  } else {
                    result.acceptHeader = '';
                  }
                  if (json.language != null) {
                    result.language = json.language;
                  } else {
                    result.language = '';
                  }
                  if (json.colorDepth != null) {
                    result.colorDepth = json.colorDepth;
                  } else {
                    result.colorDepth = 0;
                  }
                  if (json.screenHeight != null) {
                    result.screenHeight = json.screenHeight;
                  } else {
                    result.screenHeight = 0;
                  }
                  if (json.screenWidth != null) {
                    result.screenWidth = json.screenWidth;
                  } else {
                    result.screenWidth = 0;
                  }
                  if (json.timeZoneOffset != null) {
                    result.timeZoneOffset = json.timeZoneOffset;
                  } else {
                    result.timeZoneOffset = 0;
                  }
                  if (json.javaEnabled != null) {
                    result.javaEnabled = json.javaEnabled;
                  } else {
                    result.javaEnabled = false;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.userAgent != null) {
                      grpc.userAgent = obj.userAgent;
                    }
                    if (obj.acceptHeader != null) {
                      grpc.acceptHeader = obj.acceptHeader;
                    }
                    if (obj.language != null) {
                      grpc.language = obj.language;
                    }
                    if (obj.colorDepth != null) {
                      grpc.colorDepth = obj.colorDepth;
                    }
                    if (obj.screenHeight != null) {
                      grpc.screenHeight = obj.screenHeight;
                    }
                    if (obj.screenWidth != null) {
                      grpc.screenWidth = obj.screenWidth;
                    }
                    if (obj.timeZoneOffset != null) {
                      grpc.timeZoneOffset = obj.timeZoneOffset;
                    }
                    if (obj.javaEnabled != null) {
                      grpc.javaEnabled = obj.javaEnabled;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo();

                    if (grpc.userAgent != null) {
                      result.userAgent = grpc.userAgent;
                    } else {
                      result.userAgent = '';
                    }
                    if (grpc.acceptHeader != null) {
                      result.acceptHeader = grpc.acceptHeader;
                    } else {
                      result.acceptHeader = '';
                    }
                    if (grpc.language != null) {
                      result.language = grpc.language;
                    } else {
                      result.language = '';
                    }
                    if (grpc.colorDepth != null) {
                      result.colorDepth = grpc.colorDepth;
                    } else {
                      result.colorDepth = 0;
                    }
                    if (grpc.screenHeight != null) {
                      result.screenHeight = grpc.screenHeight;
                    } else {
                      result.screenHeight = 0;
                    }
                    if (grpc.screenWidth != null) {
                      result.screenWidth = grpc.screenWidth;
                    } else {
                      result.screenWidth = 0;
                    }
                    if (grpc.timeZoneOffset != null) {
                      result.timeZoneOffset = grpc.timeZoneOffset;
                    } else {
                      result.timeZoneOffset = 0;
                    }
                    if (grpc.javaEnabled != null) {
                      result.javaEnabled = grpc.javaEnabled;
                    } else {
                      result.javaEnabled = false;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'userAgent': {
                        'type': 'string',
                        'id': 1
                      },
                      'acceptHeader': {
                        'type': 'string',
                        'id': 2
                      },
                      'language': {
                        'type': 'string',
                        'id': 3
                      },
                      'colorDepth': {
                        'type': 'int32',
                        'id': 4
                      },
                      'screenHeight': {
                        'type': 'int32',
                        'id': 5
                      },
                      'screenWidth': {
                        'type': 'int32',
                        'id': 6
                      },
                      'timeZoneOffset': {
                        'type': 'int32',
                        'id': 7
                      },
                      'javaEnabled': {
                        'type': 'bool',
                        'id': 8
                      }
                    }
                  };
                }
              }

              Object.defineProperty(BrowserInfo.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo');
                },
                enumerable: false,
                configurable: false
              });
              return BrowserInfo;
            }());
            ThreeDsInitialData.BrowserInfo = (function() {

              class BrowserInfo {

                constructor(props) {
                  this.userAgent = props && props.userAgent;
                  this.acceptHeader = props && props.acceptHeader;
                  this.language = props && props.language;
                  this.colorDepth = props && props.colorDepth;
                  this.screenHeight = props && props.screenHeight;
                  this.screenWidth = props && props.screenWidth;
                  this.timeZoneOffset = props && props.timeZoneOffset;
                  this.javaEnabled = props && props.javaEnabled;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.userAgent != null) {
                      if (typeof msg.userAgent !== 'string') {
                        errors.field('userAgent').error('string expected');
                      }
                    }
                    if (msg.acceptHeader != null) {
                      if (typeof msg.acceptHeader !== 'string') {
                        errors.field('acceptHeader').error('string expected');
                      }
                    }
                    if (msg.language != null) {
                      if (typeof msg.language !== 'string') {
                        errors.field('language').error('string expected');
                      }
                    }
                    if (msg.colorDepth != null) {
                      if (!Number.isInteger(msg.colorDepth)) {
                        errors.field('colorDepth').error('integer expected');
                      }
                    }
                    if (msg.screenHeight != null) {
                      if (!Number.isInteger(msg.screenHeight)) {
                        errors.field('screenHeight').error('integer expected');
                      }
                    }
                    if (msg.screenWidth != null) {
                      if (!Number.isInteger(msg.screenWidth)) {
                        errors.field('screenWidth').error('integer expected');
                      }
                    }
                    if (msg.timeZoneOffset != null) {
                      if (!Number.isInteger(msg.timeZoneOffset)) {
                        errors.field('timeZoneOffset').error('integer expected');
                      }
                    }
                    if (msg.javaEnabled != null) {
                      if (typeof msg.javaEnabled !== 'boolean') {
                        errors.field('javaEnabled').error('boolean expected');
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.userAgent != null) {
                      json.userAgent = obj.userAgent;
                    }
                    if (obj.acceptHeader != null) {
                      json.acceptHeader = obj.acceptHeader;
                    }
                    if (obj.language != null) {
                      json.language = obj.language;
                    }
                    if (obj.colorDepth != null) {
                      json.colorDepth = obj.colorDepth;
                    }
                    if (obj.screenHeight != null) {
                      json.screenHeight = obj.screenHeight;
                    }
                    if (obj.screenWidth != null) {
                      json.screenWidth = obj.screenWidth;
                    }
                    if (obj.timeZoneOffset != null) {
                      json.timeZoneOffset = obj.timeZoneOffset;
                    }
                    if (obj.javaEnabled != null) {
                      json.javaEnabled = obj.javaEnabled;
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo();

                  if (json.userAgent != null) {
                    result.userAgent = json.userAgent;
                  } else {
                    result.userAgent = '';
                  }
                  if (json.acceptHeader != null) {
                    result.acceptHeader = json.acceptHeader;
                  } else {
                    result.acceptHeader = '';
                  }
                  if (json.language != null) {
                    result.language = json.language;
                  } else {
                    result.language = '';
                  }
                  if (json.colorDepth != null) {
                    result.colorDepth = json.colorDepth;
                  } else {
                    result.colorDepth = 0;
                  }
                  if (json.screenHeight != null) {
                    result.screenHeight = json.screenHeight;
                  } else {
                    result.screenHeight = 0;
                  }
                  if (json.screenWidth != null) {
                    result.screenWidth = json.screenWidth;
                  } else {
                    result.screenWidth = 0;
                  }
                  if (json.timeZoneOffset != null) {
                    result.timeZoneOffset = json.timeZoneOffset;
                  } else {
                    result.timeZoneOffset = 0;
                  }
                  if (json.javaEnabled != null) {
                    result.javaEnabled = json.javaEnabled;
                  } else {
                    result.javaEnabled = false;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.userAgent != null) {
                      grpc.userAgent = obj.userAgent;
                    }
                    if (obj.acceptHeader != null) {
                      grpc.acceptHeader = obj.acceptHeader;
                    }
                    if (obj.language != null) {
                      grpc.language = obj.language;
                    }
                    if (obj.colorDepth != null) {
                      grpc.colorDepth = obj.colorDepth;
                    }
                    if (obj.screenHeight != null) {
                      grpc.screenHeight = obj.screenHeight;
                    }
                    if (obj.screenWidth != null) {
                      grpc.screenWidth = obj.screenWidth;
                    }
                    if (obj.timeZoneOffset != null) {
                      grpc.timeZoneOffset = obj.timeZoneOffset;
                    }
                    if (obj.javaEnabled != null) {
                      grpc.javaEnabled = obj.javaEnabled;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo();

                    if (grpc.userAgent != null) {
                      result.userAgent = grpc.userAgent;
                    } else {
                      result.userAgent = '';
                    }
                    if (grpc.acceptHeader != null) {
                      result.acceptHeader = grpc.acceptHeader;
                    } else {
                      result.acceptHeader = '';
                    }
                    if (grpc.language != null) {
                      result.language = grpc.language;
                    } else {
                      result.language = '';
                    }
                    if (grpc.colorDepth != null) {
                      result.colorDepth = grpc.colorDepth;
                    } else {
                      result.colorDepth = 0;
                    }
                    if (grpc.screenHeight != null) {
                      result.screenHeight = grpc.screenHeight;
                    } else {
                      result.screenHeight = 0;
                    }
                    if (grpc.screenWidth != null) {
                      result.screenWidth = grpc.screenWidth;
                    } else {
                      result.screenWidth = 0;
                    }
                    if (grpc.timeZoneOffset != null) {
                      result.timeZoneOffset = grpc.timeZoneOffset;
                    } else {
                      result.timeZoneOffset = 0;
                    }
                    if (grpc.javaEnabled != null) {
                      result.javaEnabled = grpc.javaEnabled;
                    } else {
                      result.javaEnabled = false;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'userAgent': {
                        'type': 'string',
                        'id': 1
                      },
                      'acceptHeader': {
                        'type': 'string',
                        'id': 2
                      },
                      'language': {
                        'type': 'string',
                        'id': 3
                      },
                      'colorDepth': {
                        'type': 'int32',
                        'id': 4
                      },
                      'screenHeight': {
                        'type': 'int32',
                        'id': 5
                      },
                      'screenWidth': {
                        'type': 'int32',
                        'id': 6
                      },
                      'timeZoneOffset': {
                        'type': 'int32',
                        'id': 7
                      },
                      'javaEnabled': {
                        'type': 'bool',
                        'id': 8
                      }
                    }
                  };
                }
              }

              Object.defineProperty(BrowserInfo.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsInitialData.BrowserInfo');
                },
                enumerable: false,
                configurable: false
              });
              return BrowserInfo;
            }());
            Object.defineProperty(ThreeDsInitialData.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsInitialData');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsInitialData;
          }());
          v1.ThreeDsDeviceFingerprintData = (function() {

            class ThreeDsDeviceFingerprintData {

              constructor(props) {
                this.provider = props && props.provider;
                this.challengeDisplaySize = props && props.challengeDisplaySize;
                this.data = props && props.data;
                this.received = props && props.received;
                this.notReceived = props && props.notReceived;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.challengeDisplaySize != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum.verify(msg.challengeDisplaySize, helper, errors.field('challengeDisplaySize'));
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                  if (msg.received != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('received').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsReceived.verify(msg.received, helper, errors.field('received'));
                    }
                  }
                  if (msg.notReceived != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('notReceived').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.verify(msg.notReceived, helper, errors.field('notReceived'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    json.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[obj.challengeDisplaySize];
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    json.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toJSON(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    json.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toJSON(obj.notReceived, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.challengeDisplaySize != null) {
                  result.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[json.challengeDisplaySize];
                } else {
                  result.challengeDisplaySize = 0;
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                if (json.received != null) {
                  result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromJSON(json.received, helper);
                } else {
                  delete result.received;
                }
                if (json.notReceived != null) {
                  result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromJSON(json.notReceived, helper);
                } else {
                  delete result.notReceived;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    grpc.challengeDisplaySize = obj.challengeDisplaySize;
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    grpc.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toGRPC(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    grpc.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toGRPC(obj.notReceived, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.challengeDisplaySize != null) {
                    result.challengeDisplaySize = grpc.challengeDisplaySize;
                  } else {
                    result.challengeDisplaySize = 0;
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  if (grpc.received != null) {
                    result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromGRPC(grpc.received, helper);
                  } else {
                    delete result.received;
                  }
                  if (grpc.notReceived != null) {
                    result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromGRPC(grpc.notReceived, helper);
                  } else {
                    delete result.notReceived;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'threeDsStatusSelect': {
                      'oneof': [
                        'received',
                        'notReceived'
                      ]
                    }
                  },
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'challengeDisplaySize': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum,
                      'id': 2
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 3,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    },
                    'received': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsReceived,
                      'id': 4
                    },
                    'notReceived': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsNotReceived,
                      'id': 5
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsDeviceFingerprintData.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsDeviceFingerprintData;
          }());
          v1.ThreeDsChallengeData = (function() {

            class ThreeDsChallengeData {

              constructor(props) {
                this.provider = props && props.provider;
                this.challengeDisplaySize = props && props.challengeDisplaySize;
                this.data = props && props.data;
                this.received = props && props.received;
                this.notReceived = props && props.notReceived;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.challengeDisplaySize != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum.verify(msg.challengeDisplaySize, helper, errors.field('challengeDisplaySize'));
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                  if (msg.received != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('received').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsReceived.verify(msg.received, helper, errors.field('received'));
                    }
                  }
                  if (msg.notReceived != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('notReceived').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.verify(msg.notReceived, helper, errors.field('notReceived'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    json.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[obj.challengeDisplaySize];
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    json.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toJSON(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    json.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toJSON(obj.notReceived, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeData();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.challengeDisplaySize != null) {
                  result.challengeDisplaySize = $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum[json.challengeDisplaySize];
                } else {
                  result.challengeDisplaySize = 0;
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                if (json.received != null) {
                  result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromJSON(json.received, helper);
                } else {
                  delete result.received;
                }
                if (json.notReceived != null) {
                  result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromJSON(json.notReceived, helper);
                } else {
                  delete result.notReceived;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.challengeDisplaySize != null) {
                    grpc.challengeDisplaySize = obj.challengeDisplaySize;
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    grpc.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toGRPC(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    grpc.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toGRPC(obj.notReceived, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeData();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.challengeDisplaySize != null) {
                    result.challengeDisplaySize = grpc.challengeDisplaySize;
                  } else {
                    result.challengeDisplaySize = 0;
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  if (grpc.received != null) {
                    result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromGRPC(grpc.received, helper);
                  } else {
                    delete result.received;
                  }
                  if (grpc.notReceived != null) {
                    result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromGRPC(grpc.notReceived, helper);
                  } else {
                    delete result.notReceived;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'threeDsStatusSelect': {
                      'oneof': [
                        'received',
                        'notReceived'
                      ]
                    }
                  },
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'challengeDisplaySize': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsChallengeDisplaySize.ThreeDsChallengeDisplaySizeEnum,
                      'id': 2
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 3,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    },
                    'received': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsReceived,
                      'id': 4
                    },
                    'notReceived': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsNotReceived,
                      'id': 5
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsChallengeData.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsChallengeData');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsChallengeData;
          }());
          v1.ThreeDsV1FallbackData = (function() {

            class ThreeDsV1FallbackData {

              constructor(props) {
                this.provider = props && props.provider;
                this.data = props && props.data;
                this.received = props && props.received;
                this.notReceived = props && props.notReceived;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                  if (msg.received != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('received').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsReceived.verify(msg.received, helper, errors.field('received'));
                    }
                  }
                  if (msg.notReceived != null) {
                    if (oneOfMutex['threeDsStatusSelect']) {
                      errors.field('notReceived').up().field('threeDsStatusSelect').error('multiple values');
                    } else {
                      oneOfMutex['threeDsStatusSelect'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.verify(msg.notReceived, helper, errors.field('notReceived'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    json.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toJSON(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    json.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toJSON(obj.notReceived, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                if (json.received != null) {
                  result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromJSON(json.received, helper);
                } else {
                  delete result.received;
                }
                if (json.notReceived != null) {
                  result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromJSON(json.notReceived, helper);
                } else {
                  delete result.notReceived;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  if (obj.received != null) {
                    grpc.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.toGRPC(obj.received, helper);
                  }
                  if (obj.notReceived != null) {
                    grpc.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.toGRPC(obj.notReceived, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  if (grpc.received != null) {
                    result.received = $root.com.wixpress.billing.api.v1.ThreeDsReceived.fromGRPC(grpc.received, helper);
                  } else {
                    delete result.received;
                  }
                  if (grpc.notReceived != null) {
                    result.notReceived = $root.com.wixpress.billing.api.v1.ThreeDsNotReceived.fromGRPC(grpc.notReceived, helper);
                  } else {
                    delete result.notReceived;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'threeDsStatusSelect': {
                      'oneof': [
                        'received',
                        'notReceived'
                      ]
                    }
                  },
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    },
                    'received': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsReceived,
                      'id': 3
                    },
                    'notReceived': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsNotReceived,
                      'id': 4
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsV1FallbackData.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsV1FallbackData');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsV1FallbackData;
          }());
          v1.ThreeDsReceived = (function() {

            class ThreeDsReceived {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsReceived();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsReceived();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(ThreeDsReceived.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsReceived');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsReceived;
          }());
          v1.ThreeDsNotReceived = (function() {

            class ThreeDsNotReceived {

              constructor(props) {
                this.error = props && props.error;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.error != null) {
                    $root.google.protobuf.StringValue.verify(msg.error, helper, errors.field('error'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.error != null) {
                    json.error = $root.google.protobuf.StringValue.toJSON(obj.error, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsNotReceived();

                if (json.error != null) {
                  result.error = $root.google.protobuf.StringValue.fromJSON(json.error, helper);
                } else {
                  delete result.error;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.error != null) {
                    grpc.error = $root.google.protobuf.StringValue.toGRPC(obj.error, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsNotReceived();

                  if (grpc.error != null) {
                    result.error = $root.google.protobuf.StringValue.fromGRPC(grpc.error, helper);
                  } else {
                    delete result.error;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'error': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsNotReceived.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsNotReceived');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsNotReceived;
          }());
          v1.ThreeDsInitialAction = (function() {

            class ThreeDsInitialAction {

              constructor(props) {
                this.provider = props && props.provider;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialAction();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsInitialAction();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsInitialAction.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsInitialAction');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsInitialAction;
          }());
          v1.ThreeDsDeviceFingerprintAction = (function() {

            class ThreeDsDeviceFingerprintAction {

              constructor(props) {
                this.provider = props && props.provider;
                this.methodUrl = props && props.methodUrl;
                this.notificationUrl = props && props.notificationUrl;
                this.bin = props && props.bin;
                this.data = props && props.data;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.methodUrl != null) {
                    if (typeof msg.methodUrl !== 'string') {
                      errors.field('methodUrl').error('string expected');
                    }
                  }
                  if (msg.notificationUrl != null) {
                    if (typeof msg.notificationUrl !== 'string') {
                      errors.field('notificationUrl').error('string expected');
                    }
                  }
                  if (msg.bin != null) {
                    if (typeof msg.bin !== 'string') {
                      errors.field('bin').error('string expected');
                    }
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    json.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    json.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.bin != null) {
                    json.bin = obj.bin;
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.methodUrl != null) {
                  result.methodUrl = json.methodUrl;
                } else {
                  result.methodUrl = '';
                }
                if (json.notificationUrl != null) {
                  result.notificationUrl = json.notificationUrl;
                } else {
                  result.notificationUrl = '';
                }
                if (json.bin != null) {
                  result.bin = json.bin;
                } else {
                  result.bin = '';
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    grpc.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    grpc.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.bin != null) {
                    grpc.bin = obj.bin;
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.methodUrl != null) {
                    result.methodUrl = grpc.methodUrl;
                  } else {
                    result.methodUrl = '';
                  }
                  if (grpc.notificationUrl != null) {
                    result.notificationUrl = grpc.notificationUrl;
                  } else {
                    result.notificationUrl = '';
                  }
                  if (grpc.bin != null) {
                    result.bin = grpc.bin;
                  } else {
                    result.bin = '';
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'methodUrl': {
                      'type': 'string',
                      'id': 2
                    },
                    'notificationUrl': {
                      'type': 'string',
                      'id': 3
                    },
                    'bin': {
                      'type': 'string',
                      'id': 4
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 5,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsDeviceFingerprintAction.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsDeviceFingerprintAction;
          }());
          v1.ThreeDsChallengeAction = (function() {

            class ThreeDsChallengeAction {

              constructor(props) {
                this.provider = props && props.provider;
                this.methodUrl = props && props.methodUrl;
                this.notificationUrl = props && props.notificationUrl;
                this.data = props && props.data;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.methodUrl != null) {
                    if (typeof msg.methodUrl !== 'string') {
                      errors.field('methodUrl').error('string expected');
                    }
                  }
                  if (msg.notificationUrl != null) {
                    if (typeof msg.notificationUrl !== 'string') {
                      errors.field('notificationUrl').error('string expected');
                    }
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    json.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    json.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.methodUrl != null) {
                  result.methodUrl = json.methodUrl;
                } else {
                  result.methodUrl = '';
                }
                if (json.notificationUrl != null) {
                  result.notificationUrl = json.notificationUrl;
                } else {
                  result.notificationUrl = '';
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    grpc.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    grpc.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.methodUrl != null) {
                    result.methodUrl = grpc.methodUrl;
                  } else {
                    result.methodUrl = '';
                  }
                  if (grpc.notificationUrl != null) {
                    result.notificationUrl = grpc.notificationUrl;
                  } else {
                    result.notificationUrl = '';
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'methodUrl': {
                      'type': 'string',
                      'id': 2
                    },
                    'notificationUrl': {
                      'type': 'string',
                      'id': 3
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsChallengeAction.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsChallengeAction');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsChallengeAction;
          }());
          v1.ThreeDsV1FallbackAction = (function() {

            class ThreeDsV1FallbackAction {

              constructor(props) {
                this.provider = props && props.provider;
                this.methodUrl = props && props.methodUrl;
                this.notificationUrl = props && props.notificationUrl;
                this.data = props && props.data;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.provider != null) {
                    $root.com.wixpress.billing.api.v1.ThreeDsProvider.verify(msg.provider, helper, errors.field('provider'));
                  }
                  if (msg.methodUrl != null) {
                    if (typeof msg.methodUrl !== 'string') {
                      errors.field('methodUrl').error('string expected');
                    }
                  }
                  if (msg.notificationUrl != null) {
                    if (typeof msg.notificationUrl !== 'string') {
                      errors.field('notificationUrl').error('string expected');
                    }
                  }
                  if (msg.data != null) {
                    const fieldErrors = errors.field('data');

                    if (msg.data != null && (!(typeof msg.data === 'object') || Array.isArray(msg.data))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.data) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.data[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.provider != null) {
                    json.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toJSON(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    json.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    json.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.data != null) {
                    json.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction();

                if (json.provider != null) {
                  result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromJSON(json.provider, helper);
                } else {
                  delete result.provider;
                }
                if (json.methodUrl != null) {
                  result.methodUrl = json.methodUrl;
                } else {
                  result.methodUrl = '';
                }
                if (json.notificationUrl != null) {
                  result.notificationUrl = json.notificationUrl;
                } else {
                  result.notificationUrl = '';
                }
                if (json.data != null) {
                  result.data = Object.entries(json.data).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.data;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.provider != null) {
                    grpc.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.toGRPC(obj.provider, helper);
                  }
                  if (obj.methodUrl != null) {
                    grpc.methodUrl = obj.methodUrl;
                  }
                  if (obj.notificationUrl != null) {
                    grpc.notificationUrl = obj.notificationUrl;
                  }
                  if (obj.data != null) {
                    grpc.data = Object.entries(obj.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction();

                  if (grpc.provider != null) {
                    result.provider = $root.com.wixpress.billing.api.v1.ThreeDsProvider.fromGRPC(grpc.provider, helper);
                  } else {
                    delete result.provider;
                  }
                  if (grpc.methodUrl != null) {
                    result.methodUrl = grpc.methodUrl;
                  } else {
                    result.methodUrl = '';
                  }
                  if (grpc.notificationUrl != null) {
                    result.notificationUrl = grpc.notificationUrl;
                  } else {
                    result.notificationUrl = '';
                  }
                  if (grpc.data != null) {
                    result.data = Object.entries(grpc.data).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.data;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'provider': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsProvider,
                      'id': 1
                    },
                    'methodUrl': {
                      'type': 'string',
                      'id': 2
                    },
                    'notificationUrl': {
                      'type': 'string',
                      'id': 3
                    },
                    'data': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.maxSize)': 32
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsV1FallbackAction.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsV1FallbackAction');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsV1FallbackAction;
          }());
          v1.ThreeDsNextAction = (function() {

            class ThreeDsNextAction {

              constructor(props) {
                this.retry = props && props.retry;
                this.deviceFingerprint = props && props.deviceFingerprint;
                this.challenge = props && props.challenge;
                this.v1Fallback = props && props.v1Fallback;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.retry != null) {
                    if (oneOfMutex['threeDsActionSelector']) {
                      errors.field('retry').up().field('threeDsActionSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsActionSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsInitialAction.verify(msg.retry, helper, errors.field('retry'));
                    }
                  }
                  if (msg.deviceFingerprint != null) {
                    if (oneOfMutex['threeDsActionSelector']) {
                      errors.field('deviceFingerprint').up().field('threeDsActionSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsActionSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction.verify(msg.deviceFingerprint, helper, errors.field('deviceFingerprint'));
                    }
                  }
                  if (msg.challenge != null) {
                    if (oneOfMutex['threeDsActionSelector']) {
                      errors.field('challenge').up().field('threeDsActionSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsActionSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction.verify(msg.challenge, helper, errors.field('challenge'));
                    }
                  }
                  if (msg.v1Fallback != null) {
                    if (oneOfMutex['threeDsActionSelector']) {
                      errors.field('v1Fallback').up().field('threeDsActionSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsActionSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction.verify(msg.v1Fallback, helper, errors.field('v1Fallback'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.retry != null) {
                    json.retry = $root.com.wixpress.billing.api.v1.ThreeDsInitialAction.toJSON(obj.retry, helper);
                  }
                  if (obj.deviceFingerprint != null) {
                    json.deviceFingerprint = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction.toJSON(obj.deviceFingerprint, helper);
                  }
                  if (obj.challenge != null) {
                    json.challenge = $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction.toJSON(obj.challenge, helper);
                  }
                  if (obj.v1Fallback != null) {
                    json.v1Fallback = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction.toJSON(obj.v1Fallback, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsNextAction();

                if (json.retry != null) {
                  result.retry = $root.com.wixpress.billing.api.v1.ThreeDsInitialAction.fromJSON(json.retry, helper);
                } else {
                  delete result.retry;
                }
                if (json.deviceFingerprint != null) {
                  result.deviceFingerprint = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction.fromJSON(json.deviceFingerprint, helper);
                } else {
                  delete result.deviceFingerprint;
                }
                if (json.challenge != null) {
                  result.challenge = $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction.fromJSON(json.challenge, helper);
                } else {
                  delete result.challenge;
                }
                if (json.v1Fallback != null) {
                  result.v1Fallback = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction.fromJSON(json.v1Fallback, helper);
                } else {
                  delete result.v1Fallback;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.retry != null) {
                    grpc.retry = $root.com.wixpress.billing.api.v1.ThreeDsInitialAction.toGRPC(obj.retry, helper);
                  }
                  if (obj.deviceFingerprint != null) {
                    grpc.deviceFingerprint = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction.toGRPC(obj.deviceFingerprint, helper);
                  }
                  if (obj.challenge != null) {
                    grpc.challenge = $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction.toGRPC(obj.challenge, helper);
                  }
                  if (obj.v1Fallback != null) {
                    grpc.v1Fallback = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction.toGRPC(obj.v1Fallback, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsNextAction();

                  if (grpc.retry != null) {
                    result.retry = $root.com.wixpress.billing.api.v1.ThreeDsInitialAction.fromGRPC(grpc.retry, helper);
                  } else {
                    delete result.retry;
                  }
                  if (grpc.deviceFingerprint != null) {
                    result.deviceFingerprint = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction.fromGRPC(grpc.deviceFingerprint, helper);
                  } else {
                    delete result.deviceFingerprint;
                  }
                  if (grpc.challenge != null) {
                    result.challenge = $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction.fromGRPC(grpc.challenge, helper);
                  } else {
                    delete result.challenge;
                  }
                  if (grpc.v1Fallback != null) {
                    result.v1Fallback = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction.fromGRPC(grpc.v1Fallback, helper);
                  } else {
                    delete result.v1Fallback;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'threeDsActionSelector': {
                      'oneof': [
                        'retry',
                        'deviceFingerprint',
                        'challenge',
                        'v1Fallback'
                      ]
                    }
                  },
                  'fields': {
                    'retry': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsInitialAction,
                      'id': 1
                    },
                    'deviceFingerprint': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintAction,
                      'id': 2
                    },
                    'challenge': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsChallengeAction,
                      'id': 3
                    },
                    'v1Fallback': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackAction,
                      'id': 4
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsNextAction.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsNextAction');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsNextAction;
          }());
          v1.ThreeDsData = (function() {

            class ThreeDsData {

              constructor(props) {
                this.initialData = props && props.initialData;
                this.fingerprintData = props && props.fingerprintData;
                this.challengeData = props && props.challengeData;
                this.v1FallbackData = props && props.v1FallbackData;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.initialData != null) {
                    if (oneOfMutex['threeDsDataSelector']) {
                      errors.field('initialData').up().field('threeDsDataSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsDataSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsInitialData.verify(msg.initialData, helper, errors.field('initialData'));
                    }
                  }
                  if (msg.fingerprintData != null) {
                    if (oneOfMutex['threeDsDataSelector']) {
                      errors.field('fingerprintData').up().field('threeDsDataSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsDataSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData.verify(msg.fingerprintData, helper, errors.field('fingerprintData'));
                    }
                  }
                  if (msg.challengeData != null) {
                    if (oneOfMutex['threeDsDataSelector']) {
                      errors.field('challengeData').up().field('threeDsDataSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsDataSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsChallengeData.verify(msg.challengeData, helper, errors.field('challengeData'));
                    }
                  }
                  if (msg.v1FallbackData != null) {
                    if (oneOfMutex['threeDsDataSelector']) {
                      errors.field('v1FallbackData').up().field('threeDsDataSelector').error('multiple values');
                    } else {
                      oneOfMutex['threeDsDataSelector'] = true;
                      $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData.verify(msg.v1FallbackData, helper, errors.field('v1FallbackData'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.initialData != null) {
                    json.initialData = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.toJSON(obj.initialData, helper);
                  }
                  if (obj.fingerprintData != null) {
                    json.fingerprintData = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData.toJSON(obj.fingerprintData, helper);
                  }
                  if (obj.challengeData != null) {
                    json.challengeData = $root.com.wixpress.billing.api.v1.ThreeDsChallengeData.toJSON(obj.challengeData, helper);
                  }
                  if (obj.v1FallbackData != null) {
                    json.v1FallbackData = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData.toJSON(obj.v1FallbackData, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ThreeDsData();

                if (json.initialData != null) {
                  result.initialData = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.fromJSON(json.initialData, helper);
                } else {
                  delete result.initialData;
                }
                if (json.fingerprintData != null) {
                  result.fingerprintData = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData.fromJSON(json.fingerprintData, helper);
                } else {
                  delete result.fingerprintData;
                }
                if (json.challengeData != null) {
                  result.challengeData = $root.com.wixpress.billing.api.v1.ThreeDsChallengeData.fromJSON(json.challengeData, helper);
                } else {
                  delete result.challengeData;
                }
                if (json.v1FallbackData != null) {
                  result.v1FallbackData = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData.fromJSON(json.v1FallbackData, helper);
                } else {
                  delete result.v1FallbackData;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.initialData != null) {
                    grpc.initialData = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.toGRPC(obj.initialData, helper);
                  }
                  if (obj.fingerprintData != null) {
                    grpc.fingerprintData = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData.toGRPC(obj.fingerprintData, helper);
                  }
                  if (obj.challengeData != null) {
                    grpc.challengeData = $root.com.wixpress.billing.api.v1.ThreeDsChallengeData.toGRPC(obj.challengeData, helper);
                  }
                  if (obj.v1FallbackData != null) {
                    grpc.v1FallbackData = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData.toGRPC(obj.v1FallbackData, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ThreeDsData();

                  if (grpc.initialData != null) {
                    result.initialData = $root.com.wixpress.billing.api.v1.ThreeDsInitialData.fromGRPC(grpc.initialData, helper);
                  } else {
                    delete result.initialData;
                  }
                  if (grpc.fingerprintData != null) {
                    result.fingerprintData = $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData.fromGRPC(grpc.fingerprintData, helper);
                  } else {
                    delete result.fingerprintData;
                  }
                  if (grpc.challengeData != null) {
                    result.challengeData = $root.com.wixpress.billing.api.v1.ThreeDsChallengeData.fromGRPC(grpc.challengeData, helper);
                  } else {
                    delete result.challengeData;
                  }
                  if (grpc.v1FallbackData != null) {
                    result.v1FallbackData = $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData.fromGRPC(grpc.v1FallbackData, helper);
                  } else {
                    delete result.v1FallbackData;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'threeDsDataSelector': {
                      'oneof': [
                        'initialData',
                        'fingerprintData',
                        'challengeData',
                        'v1FallbackData'
                      ]
                    }
                  },
                  'fields': {
                    'initialData': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsInitialData,
                      'id': 1
                    },
                    'fingerprintData': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsDeviceFingerprintData,
                      'id': 2
                    },
                    'challengeData': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsChallengeData,
                      'id': 3
                    },
                    'v1FallbackData': {
                      'type': $root.com.wixpress.billing.api.v1.ThreeDsV1FallbackData,
                      'id': 4
                    }
                  }
                };
              }
            }

            Object.defineProperty(ThreeDsData.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ThreeDsData');
              },
              enumerable: false,
              configurable: false
            });
            return ThreeDsData;
          }());
          v1.PaymentSource = (function() {

            class PaymentSource {

              constructor(props) {
                this.paymentSourceId = props && props.paymentSourceId;
                this.paymentMethod = props && props.paymentMethod;
                this.billingContact = props && props.billingContact;
                this.isDefault = props && props.isDefault;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSourceId != null) {
                    $root.google.protobuf.StringValue.verify(msg.paymentSourceId, helper, errors.field('paymentSourceId'));
                  }
                  if (msg.paymentMethod != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod.verify(msg.paymentMethod, helper, errors.field('paymentMethod'));
                  }
                  if (msg.billingContact != null) {
                    $root.com.wixpress.billing.api.v1.Address.verify(msg.billingContact, helper, errors.field('billingContact'));
                  }
                  if (msg.isDefault != null) {
                    if (typeof msg.isDefault !== 'boolean') {
                      errors.field('isDefault').error('boolean expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = $root.google.protobuf.StringValue.toJSON(obj.paymentSourceId, helper);
                  }
                  if (obj.paymentMethod != null) {
                    json.paymentMethod = $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod.toJSON(obj.paymentMethod, helper);
                  }
                  if (obj.billingContact != null) {
                    json.billingContact = $root.com.wixpress.billing.api.v1.Address.toJSON(obj.billingContact, helper);
                  }
                  if (obj.isDefault != null) {
                    json.isDefault = obj.isDefault;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PaymentSource();

                if (json.paymentSourceId != null) {
                  result.paymentSourceId = $root.google.protobuf.StringValue.fromJSON(json.paymentSourceId, helper);
                } else {
                  delete result.paymentSourceId;
                }
                if (json.paymentMethod != null) {
                  result.paymentMethod = $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod.fromJSON(json.paymentMethod, helper);
                } else {
                  delete result.paymentMethod;
                }
                if (json.billingContact != null) {
                  result.billingContact = $root.com.wixpress.billing.api.v1.Address.fromJSON(json.billingContact, helper);
                } else {
                  delete result.billingContact;
                }
                if (json.isDefault != null) {
                  result.isDefault = json.isDefault;
                } else {
                  result.isDefault = false;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = $root.google.protobuf.StringValue.toGRPC(obj.paymentSourceId, helper);
                  }
                  if (obj.paymentMethod != null) {
                    grpc.paymentMethod = $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod.toGRPC(obj.paymentMethod, helper);
                  }
                  if (obj.billingContact != null) {
                    grpc.billingContact = $root.com.wixpress.billing.api.v1.Address.toGRPC(obj.billingContact, helper);
                  }
                  if (obj.isDefault != null) {
                    grpc.isDefault = obj.isDefault;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentSource();

                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = $root.google.protobuf.StringValue.fromGRPC(grpc.paymentSourceId, helper);
                  } else {
                    delete result.paymentSourceId;
                  }
                  if (grpc.paymentMethod != null) {
                    result.paymentMethod = $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod.fromGRPC(grpc.paymentMethod, helper);
                  } else {
                    delete result.paymentMethod;
                  }
                  if (grpc.billingContact != null) {
                    result.billingContact = $root.com.wixpress.billing.api.v1.Address.fromGRPC(grpc.billingContact, helper);
                  } else {
                    delete result.billingContact;
                  }
                  if (grpc.isDefault != null) {
                    result.isDefault = grpc.isDefault;
                  } else {
                    result.isDefault = false;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSourceId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'paymentMethod': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod,
                      'id': 2
                    },
                    'billingContact': {
                      'type': $root.com.wixpress.billing.api.v1.Address,
                      'id': 3
                    },
                    'isDefault': {
                      'type': 'bool',
                      'id': 4
                    }
                  },
                  'nested': {
                    'PaymentMethod': {
                      'oneofs': {
                        'paymentMethodSelector': {
                          'oneof': [
                            'publicCreditCard',
                            'publicSepaDetails'
                          ]
                        }
                      },
                      'fields': {
                        'publicCreditCard': {
                          'type': 'PublicCreditCard',
                          'id': 1
                        },
                        'publicSepaDetails': {
                          'type': 'PublicSepaDetails',
                          'id': 2
                        }
                      }
                    }
                  }
                };
              }
            }

            PaymentSource.PaymentMethod = (function() {

              class PaymentMethod {

                constructor(props) {
                  this.publicCreditCard = props && props.publicCreditCard;
                  this.publicSepaDetails = props && props.publicSepaDetails;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    const oneOfMutex = {};

                    if (msg.publicCreditCard != null) {
                      if (oneOfMutex['paymentMethodSelector']) {
                        errors.field('publicCreditCard').up().field('paymentMethodSelector').error('multiple values');
                      } else {
                        oneOfMutex['paymentMethodSelector'] = true;
                        $root.com.wixpress.billing.api.v1.PublicCreditCard.verify(msg.publicCreditCard, helper, errors.field('publicCreditCard'));
                      }
                    }
                    if (msg.publicSepaDetails != null) {
                      if (oneOfMutex['paymentMethodSelector']) {
                        errors.field('publicSepaDetails').up().field('paymentMethodSelector').error('multiple values');
                      } else {
                        oneOfMutex['paymentMethodSelector'] = true;
                        $root.com.wixpress.billing.api.v1.PublicSepaDetails.verify(msg.publicSepaDetails, helper, errors.field('publicSepaDetails'));
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.publicCreditCard != null) {
                      json.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.toJSON(obj.publicCreditCard, helper);
                    }
                    if (obj.publicSepaDetails != null) {
                      json.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.toJSON(obj.publicSepaDetails, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod();

                  if (json.publicCreditCard != null) {
                    result.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.fromJSON(json.publicCreditCard, helper);
                  } else {
                    delete result.publicCreditCard;
                  }
                  if (json.publicSepaDetails != null) {
                    result.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.fromJSON(json.publicSepaDetails, helper);
                  } else {
                    delete result.publicSepaDetails;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.publicCreditCard != null) {
                      grpc.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.toGRPC(obj.publicCreditCard, helper);
                    }
                    if (obj.publicSepaDetails != null) {
                      grpc.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.toGRPC(obj.publicSepaDetails, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod();

                    if (grpc.publicCreditCard != null) {
                      result.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.fromGRPC(grpc.publicCreditCard, helper);
                    } else {
                      delete result.publicCreditCard;
                    }
                    if (grpc.publicSepaDetails != null) {
                      result.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.fromGRPC(grpc.publicSepaDetails, helper);
                    } else {
                      delete result.publicSepaDetails;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'oneofs': {
                      'paymentMethodSelector': {
                        'oneof': [
                          'publicCreditCard',
                          'publicSepaDetails'
                        ]
                      }
                    },
                    'fields': {
                      'publicCreditCard': {
                        'type': $root.com.wixpress.billing.api.v1.PublicCreditCard,
                        'id': 1
                      },
                      'publicSepaDetails': {
                        'type': $root.com.wixpress.billing.api.v1.PublicSepaDetails,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(PaymentMethod.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSource.PaymentMethod');
                },
                enumerable: false,
                configurable: false
              });
              return PaymentMethod;
            }());
            PaymentSource.PaymentMethod = (function() {

              class PaymentMethod {

                constructor(props) {
                  this.publicCreditCard = props && props.publicCreditCard;
                  this.publicSepaDetails = props && props.publicSepaDetails;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    const oneOfMutex = {};

                    if (msg.publicCreditCard != null) {
                      if (oneOfMutex['paymentMethodSelector']) {
                        errors.field('publicCreditCard').up().field('paymentMethodSelector').error('multiple values');
                      } else {
                        oneOfMutex['paymentMethodSelector'] = true;
                        $root.com.wixpress.billing.api.v1.PublicCreditCard.verify(msg.publicCreditCard, helper, errors.field('publicCreditCard'));
                      }
                    }
                    if (msg.publicSepaDetails != null) {
                      if (oneOfMutex['paymentMethodSelector']) {
                        errors.field('publicSepaDetails').up().field('paymentMethodSelector').error('multiple values');
                      } else {
                        oneOfMutex['paymentMethodSelector'] = true;
                        $root.com.wixpress.billing.api.v1.PublicSepaDetails.verify(msg.publicSepaDetails, helper, errors.field('publicSepaDetails'));
                      }
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.publicCreditCard != null) {
                      json.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.toJSON(obj.publicCreditCard, helper);
                    }
                    if (obj.publicSepaDetails != null) {
                      json.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.toJSON(obj.publicSepaDetails, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod();

                  if (json.publicCreditCard != null) {
                    result.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.fromJSON(json.publicCreditCard, helper);
                  } else {
                    delete result.publicCreditCard;
                  }
                  if (json.publicSepaDetails != null) {
                    result.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.fromJSON(json.publicSepaDetails, helper);
                  } else {
                    delete result.publicSepaDetails;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.publicCreditCard != null) {
                      grpc.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.toGRPC(obj.publicCreditCard, helper);
                    }
                    if (obj.publicSepaDetails != null) {
                      grpc.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.toGRPC(obj.publicSepaDetails, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentSource.PaymentMethod();

                    if (grpc.publicCreditCard != null) {
                      result.publicCreditCard = $root.com.wixpress.billing.api.v1.PublicCreditCard.fromGRPC(grpc.publicCreditCard, helper);
                    } else {
                      delete result.publicCreditCard;
                    }
                    if (grpc.publicSepaDetails != null) {
                      result.publicSepaDetails = $root.com.wixpress.billing.api.v1.PublicSepaDetails.fromGRPC(grpc.publicSepaDetails, helper);
                    } else {
                      delete result.publicSepaDetails;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'oneofs': {
                      'paymentMethodSelector': {
                        'oneof': [
                          'publicCreditCard',
                          'publicSepaDetails'
                        ]
                      }
                    },
                    'fields': {
                      'publicCreditCard': {
                        'type': $root.com.wixpress.billing.api.v1.PublicCreditCard,
                        'id': 1
                      },
                      'publicSepaDetails': {
                        'type': $root.com.wixpress.billing.api.v1.PublicSepaDetails,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(PaymentMethod.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSource.PaymentMethod');
                },
                enumerable: false,
                configurable: false
              });
              return PaymentMethod;
            }());
            Object.defineProperty(PaymentSource.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSource');
              },
              enumerable: false,
              configurable: false
            });
            return PaymentSource;
          }());
          v1.PublicCreditCard = (function() {

            class PublicCreditCard {

              constructor(props) {
                this.holderName = props && props.holderName;
                this.lastDigits = props && props.lastDigits;
                this.expiration = props && props.expiration;
                this.cardBrand = props && props.cardBrand;
                this.bin = props && props.bin;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.holderName != null) {
                    if (typeof msg.holderName !== 'string') {
                      errors.field('holderName').error('string expected');
                    }
                  }
                  if (msg.lastDigits != null) {
                    if (typeof msg.lastDigits !== 'string') {
                      errors.field('lastDigits').error('string expected');
                    }
                  }
                  if (msg.expiration != null) {
                    $root.com.wixpress.billing.api.v1.YearMonth.verify(msg.expiration, helper, errors.field('expiration'));
                  }
                  if (msg.cardBrand != null) {
                    if (typeof msg.cardBrand !== 'string') {
                      errors.field('cardBrand').error('string expected');
                    }
                  }
                  if (msg.bin != null) {
                    if (typeof msg.bin !== 'string') {
                      errors.field('bin').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.holderName != null) {
                    json.holderName = obj.holderName;
                  }
                  if (obj.lastDigits != null) {
                    json.lastDigits = obj.lastDigits;
                  }
                  if (obj.expiration != null) {
                    json.expiration = $root.com.wixpress.billing.api.v1.YearMonth.toJSON(obj.expiration, helper);
                  }
                  if (obj.cardBrand != null) {
                    json.cardBrand = obj.cardBrand;
                  }
                  if (obj.bin != null) {
                    json.bin = obj.bin;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PublicCreditCard();

                if (json.holderName != null) {
                  result.holderName = json.holderName;
                } else {
                  result.holderName = '';
                }
                if (json.lastDigits != null) {
                  result.lastDigits = json.lastDigits;
                } else {
                  result.lastDigits = '';
                }
                if (json.expiration != null) {
                  result.expiration = $root.com.wixpress.billing.api.v1.YearMonth.fromJSON(json.expiration, helper);
                } else {
                  delete result.expiration;
                }
                if (json.cardBrand != null) {
                  result.cardBrand = json.cardBrand;
                } else {
                  result.cardBrand = '';
                }
                if (json.bin != null) {
                  result.bin = json.bin;
                } else {
                  result.bin = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.holderName != null) {
                    grpc.holderName = obj.holderName;
                  }
                  if (obj.lastDigits != null) {
                    grpc.lastDigits = obj.lastDigits;
                  }
                  if (obj.expiration != null) {
                    grpc.expiration = $root.com.wixpress.billing.api.v1.YearMonth.toGRPC(obj.expiration, helper);
                  }
                  if (obj.cardBrand != null) {
                    grpc.cardBrand = obj.cardBrand;
                  }
                  if (obj.bin != null) {
                    grpc.bin = obj.bin;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PublicCreditCard();

                  if (grpc.holderName != null) {
                    result.holderName = grpc.holderName;
                  } else {
                    result.holderName = '';
                  }
                  if (grpc.lastDigits != null) {
                    result.lastDigits = grpc.lastDigits;
                  } else {
                    result.lastDigits = '';
                  }
                  if (grpc.expiration != null) {
                    result.expiration = $root.com.wixpress.billing.api.v1.YearMonth.fromGRPC(grpc.expiration, helper);
                  } else {
                    delete result.expiration;
                  }
                  if (grpc.cardBrand != null) {
                    result.cardBrand = grpc.cardBrand;
                  } else {
                    result.cardBrand = '';
                  }
                  if (grpc.bin != null) {
                    result.bin = grpc.bin;
                  } else {
                    result.bin = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'holderName': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'lastDigits': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'expiration': {
                      'type': $root.com.wixpress.billing.api.v1.YearMonth,
                      'id': 3,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'cardBrand': {
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'bin': {
                      'type': 'string',
                      'id': 5,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(PublicCreditCard.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PublicCreditCard');
              },
              enumerable: false,
              configurable: false
            });
            return PublicCreditCard;
          }());
          v1.PublicSepaDetails = (function() {

            class PublicSepaDetails {

              constructor(props) {
                this.accountHolderName = props && props.accountHolderName;
                this.ibanCountryCode = props && props.ibanCountryCode;
                this.ibanLastChars = props && props.ibanLastChars;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.accountHolderName != null) {
                    if (typeof msg.accountHolderName !== 'string') {
                      errors.field('accountHolderName').error('string expected');
                    }
                  }
                  if (msg.ibanCountryCode != null) {
                    if (typeof msg.ibanCountryCode !== 'string') {
                      errors.field('ibanCountryCode').error('string expected');
                    }
                  }
                  if (msg.ibanLastChars != null) {
                    if (typeof msg.ibanLastChars !== 'string') {
                      errors.field('ibanLastChars').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.accountHolderName != null) {
                    json.accountHolderName = obj.accountHolderName;
                  }
                  if (obj.ibanCountryCode != null) {
                    json.ibanCountryCode = obj.ibanCountryCode;
                  }
                  if (obj.ibanLastChars != null) {
                    json.ibanLastChars = obj.ibanLastChars;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PublicSepaDetails();

                if (json.accountHolderName != null) {
                  result.accountHolderName = json.accountHolderName;
                } else {
                  result.accountHolderName = '';
                }
                if (json.ibanCountryCode != null) {
                  result.ibanCountryCode = json.ibanCountryCode;
                } else {
                  result.ibanCountryCode = '';
                }
                if (json.ibanLastChars != null) {
                  result.ibanLastChars = json.ibanLastChars;
                } else {
                  result.ibanLastChars = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.accountHolderName != null) {
                    grpc.accountHolderName = obj.accountHolderName;
                  }
                  if (obj.ibanCountryCode != null) {
                    grpc.ibanCountryCode = obj.ibanCountryCode;
                  }
                  if (obj.ibanLastChars != null) {
                    grpc.ibanLastChars = obj.ibanLastChars;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PublicSepaDetails();

                  if (grpc.accountHolderName != null) {
                    result.accountHolderName = grpc.accountHolderName;
                  } else {
                    result.accountHolderName = '';
                  }
                  if (grpc.ibanCountryCode != null) {
                    result.ibanCountryCode = grpc.ibanCountryCode;
                  } else {
                    result.ibanCountryCode = '';
                  }
                  if (grpc.ibanLastChars != null) {
                    result.ibanLastChars = grpc.ibanLastChars;
                  } else {
                    result.ibanLastChars = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'accountHolderName': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'ibanCountryCode': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'COUNTRY',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'ibanLastChars': {
                      'type': 'string',
                      'id': 3,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(PublicSepaDetails.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PublicSepaDetails');
              },
              enumerable: false,
              configurable: false
            });
            return PublicSepaDetails;
          }());
          v1.PaymentSourceDetails = (function() {

            class PaymentSourceDetails {

              constructor(props) {
                this.creditCardDetails = props && props.creditCardDetails;
                this.sepaDetails = props && props.sepaDetails;
                this.billingContact = props && props.billingContact;
                this.isDefault = props && props.isDefault;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.creditCardDetails != null) {
                    if (oneOfMutex['paymentMethodSelector']) {
                      errors.field('creditCardDetails').up().field('paymentMethodSelector').error('multiple values');
                    } else {
                      oneOfMutex['paymentMethodSelector'] = true;
                      $root.com.wixpress.billing.api.v1.CreditCardDetails.verify(msg.creditCardDetails, helper, errors.field('creditCardDetails'));
                    }
                  }
                  if (msg.sepaDetails != null) {
                    if (oneOfMutex['paymentMethodSelector']) {
                      errors.field('sepaDetails').up().field('paymentMethodSelector').error('multiple values');
                    } else {
                      oneOfMutex['paymentMethodSelector'] = true;
                      $root.com.wixpress.billing.api.v1.SepaDetails.verify(msg.sepaDetails, helper, errors.field('sepaDetails'));
                    }
                  }
                  if (msg.billingContact != null) {
                    $root.com.wixpress.billing.api.v1.Address.verify(msg.billingContact, helper, errors.field('billingContact'));
                  }
                  if (msg.isDefault != null) {
                    if (typeof msg.isDefault !== 'boolean') {
                      errors.field('isDefault').error('boolean expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.creditCardDetails != null) {
                    json.creditCardDetails = $root.com.wixpress.billing.api.v1.CreditCardDetails.toJSON(obj.creditCardDetails, helper);
                  }
                  if (obj.sepaDetails != null) {
                    json.sepaDetails = $root.com.wixpress.billing.api.v1.SepaDetails.toJSON(obj.sepaDetails, helper);
                  }
                  if (obj.billingContact != null) {
                    json.billingContact = $root.com.wixpress.billing.api.v1.Address.toJSON(obj.billingContact, helper);
                  }
                  if (obj.isDefault != null) {
                    json.isDefault = obj.isDefault;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PaymentSourceDetails();

                if (json.creditCardDetails != null) {
                  result.creditCardDetails = $root.com.wixpress.billing.api.v1.CreditCardDetails.fromJSON(json.creditCardDetails, helper);
                } else {
                  delete result.creditCardDetails;
                }
                if (json.sepaDetails != null) {
                  result.sepaDetails = $root.com.wixpress.billing.api.v1.SepaDetails.fromJSON(json.sepaDetails, helper);
                } else {
                  delete result.sepaDetails;
                }
                if (json.billingContact != null) {
                  result.billingContact = $root.com.wixpress.billing.api.v1.Address.fromJSON(json.billingContact, helper);
                } else {
                  delete result.billingContact;
                }
                if (json.isDefault != null) {
                  result.isDefault = json.isDefault;
                } else {
                  result.isDefault = false;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.creditCardDetails != null) {
                    grpc.creditCardDetails = $root.com.wixpress.billing.api.v1.CreditCardDetails.toGRPC(obj.creditCardDetails, helper);
                  }
                  if (obj.sepaDetails != null) {
                    grpc.sepaDetails = $root.com.wixpress.billing.api.v1.SepaDetails.toGRPC(obj.sepaDetails, helper);
                  }
                  if (obj.billingContact != null) {
                    grpc.billingContact = $root.com.wixpress.billing.api.v1.Address.toGRPC(obj.billingContact, helper);
                  }
                  if (obj.isDefault != null) {
                    grpc.isDefault = obj.isDefault;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentSourceDetails();

                  if (grpc.creditCardDetails != null) {
                    result.creditCardDetails = $root.com.wixpress.billing.api.v1.CreditCardDetails.fromGRPC(grpc.creditCardDetails, helper);
                  } else {
                    delete result.creditCardDetails;
                  }
                  if (grpc.sepaDetails != null) {
                    result.sepaDetails = $root.com.wixpress.billing.api.v1.SepaDetails.fromGRPC(grpc.sepaDetails, helper);
                  } else {
                    delete result.sepaDetails;
                  }
                  if (grpc.billingContact != null) {
                    result.billingContact = $root.com.wixpress.billing.api.v1.Address.fromGRPC(grpc.billingContact, helper);
                  } else {
                    delete result.billingContact;
                  }
                  if (grpc.isDefault != null) {
                    result.isDefault = grpc.isDefault;
                  } else {
                    result.isDefault = false;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'paymentMethodSelector': {
                      'oneof': [
                        'creditCardDetails',
                        'sepaDetails'
                      ]
                    }
                  },
                  'fields': {
                    'creditCardDetails': {
                      'type': $root.com.wixpress.billing.api.v1.CreditCardDetails,
                      'id': 1
                    },
                    'sepaDetails': {
                      'type': $root.com.wixpress.billing.api.v1.SepaDetails,
                      'id': 4
                    },
                    'billingContact': {
                      'type': $root.com.wixpress.billing.api.v1.Address,
                      'id': 2
                    },
                    'isDefault': {
                      'type': 'bool',
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(PaymentSourceDetails.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceDetails');
              },
              enumerable: false,
              configurable: false
            });
            return PaymentSourceDetails;
          }());
          v1.CreditCardDetails = (function() {

            class CreditCardDetails {

              constructor(props) {
                this.billingToken = props && props.billingToken;
                this.expiration = props && props.expiration;
                this.cardBrand = props && props.cardBrand;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.billingToken != null) {
                    if (typeof msg.billingToken !== 'string') {
                      errors.field('billingToken').error('string expected');
                    }
                  }
                  if (msg.expiration != null) {
                    $root.com.wixpress.billing.api.v1.YearMonth.verify(msg.expiration, helper, errors.field('expiration'));
                  }
                  if (msg.cardBrand != null) {
                    if (typeof msg.cardBrand !== 'string') {
                      errors.field('cardBrand').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.billingToken != null) {
                    json.billingToken = obj.billingToken;
                  }
                  if (obj.expiration != null) {
                    json.expiration = $root.com.wixpress.billing.api.v1.YearMonth.toJSON(obj.expiration, helper);
                  }
                  if (obj.cardBrand != null) {
                    json.cardBrand = obj.cardBrand;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreditCardDetails();

                if (json.billingToken != null) {
                  result.billingToken = json.billingToken;
                } else {
                  result.billingToken = '';
                }
                if (json.expiration != null) {
                  result.expiration = $root.com.wixpress.billing.api.v1.YearMonth.fromJSON(json.expiration, helper);
                } else {
                  delete result.expiration;
                }
                if (json.cardBrand != null) {
                  result.cardBrand = json.cardBrand;
                } else {
                  result.cardBrand = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.billingToken != null) {
                    grpc.billingToken = obj.billingToken;
                  }
                  if (obj.expiration != null) {
                    grpc.expiration = $root.com.wixpress.billing.api.v1.YearMonth.toGRPC(obj.expiration, helper);
                  }
                  if (obj.cardBrand != null) {
                    grpc.cardBrand = obj.cardBrand;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreditCardDetails();

                  if (grpc.billingToken != null) {
                    result.billingToken = grpc.billingToken;
                  } else {
                    result.billingToken = '';
                  }
                  if (grpc.expiration != null) {
                    result.expiration = $root.com.wixpress.billing.api.v1.YearMonth.fromGRPC(grpc.expiration, helper);
                  } else {
                    delete result.expiration;
                  }
                  if (grpc.cardBrand != null) {
                    result.cardBrand = grpc.cardBrand;
                  } else {
                    result.cardBrand = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'billingToken': {
                      'type': 'string',
                      'id': 1
                    },
                    'expiration': {
                      'type': $root.com.wixpress.billing.api.v1.YearMonth,
                      'id': 2
                    },
                    'cardBrand': {
                      'type': 'string',
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreditCardDetails.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreditCardDetails');
              },
              enumerable: false,
              configurable: false
            });
            return CreditCardDetails;
          }());
          v1.SepaDetails = (function() {

            class SepaDetails {

              constructor(props) {
                this.iban = props && props.iban;
                this.accountHolderName = props && props.accountHolderName;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.iban != null) {
                    if (typeof msg.iban !== 'string') {
                      errors.field('iban').error('string expected');
                    }
                  }
                  if (msg.accountHolderName != null) {
                    if (typeof msg.accountHolderName !== 'string') {
                      errors.field('accountHolderName').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.iban != null) {
                    json.iban = obj.iban;
                  }
                  if (obj.accountHolderName != null) {
                    json.accountHolderName = obj.accountHolderName;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.SepaDetails();

                if (json.iban != null) {
                  result.iban = json.iban;
                } else {
                  result.iban = '';
                }
                if (json.accountHolderName != null) {
                  result.accountHolderName = json.accountHolderName;
                } else {
                  result.accountHolderName = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.iban != null) {
                    grpc.iban = obj.iban;
                  }
                  if (obj.accountHolderName != null) {
                    grpc.accountHolderName = obj.accountHolderName;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.SepaDetails();

                  if (grpc.iban != null) {
                    result.iban = grpc.iban;
                  } else {
                    result.iban = '';
                  }
                  if (grpc.accountHolderName != null) {
                    result.accountHolderName = grpc.accountHolderName;
                  } else {
                    result.accountHolderName = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'iban': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.minLength)': 4,
                        '(wix.api.maxLength)': 34
                      }
                    },
                    'accountHolderName': {
                      'type': 'string',
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(SepaDetails.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.SepaDetails');
              },
              enumerable: false,
              configurable: false
            });
            return SepaDetails;
          }());
          v1.LocalPaymentMethods = (function() {

            class LocalPaymentMethods {

              constructor(props) {
                this.currency = props && props.currency;
                this.country = props && props.country;
                this.minCycle = props && props.minCycle;
                this.availablePaymentMethod = props && props.availablePaymentMethod;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.country != null) {
                    if (typeof msg.country !== 'string') {
                      errors.field('country').error('string expected');
                    }
                  }
                  if (msg.minCycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.minCycle, helper, errors.field('minCycle'));
                  }
                  if (msg.availablePaymentMethod != null) {
                    $root.com.wixpress.billing.api.v1.PaymentMethodType.verify(msg.availablePaymentMethod, helper, errors.field('availablePaymentMethod'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.country != null) {
                    json.country = obj.country;
                  }
                  if (obj.minCycle != null) {
                    json.minCycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.minCycle, helper);
                  }
                  if (obj.availablePaymentMethod != null) {
                    json.availablePaymentMethod = $root.com.wixpress.billing.api.v1.PaymentMethodType.toJSON(obj.availablePaymentMethod, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.LocalPaymentMethods();

                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.country != null) {
                  result.country = json.country;
                } else {
                  result.country = '';
                }
                if (json.minCycle != null) {
                  result.minCycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.minCycle, helper);
                } else {
                  delete result.minCycle;
                }
                if (json.availablePaymentMethod != null) {
                  result.availablePaymentMethod = $root.com.wixpress.billing.api.v1.PaymentMethodType.fromJSON(json.availablePaymentMethod, helper);
                } else {
                  delete result.availablePaymentMethod;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.country != null) {
                    grpc.country = obj.country;
                  }
                  if (obj.minCycle != null) {
                    grpc.minCycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.minCycle, helper);
                  }
                  if (obj.availablePaymentMethod != null) {
                    grpc.availablePaymentMethod = $root.com.wixpress.billing.api.v1.PaymentMethodType.toGRPC(obj.availablePaymentMethod, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.LocalPaymentMethods();

                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.country != null) {
                    result.country = grpc.country;
                  } else {
                    result.country = '';
                  }
                  if (grpc.minCycle != null) {
                    result.minCycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.minCycle, helper);
                  } else {
                    delete result.minCycle;
                  }
                  if (grpc.availablePaymentMethod != null) {
                    result.availablePaymentMethod = $root.com.wixpress.billing.api.v1.PaymentMethodType.fromGRPC(grpc.availablePaymentMethod, helper);
                  } else {
                    delete result.availablePaymentMethod;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'currency': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'country': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'COUNTRY'
                      }
                    },
                    'minCycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 3
                    },
                    'availablePaymentMethod': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentMethodType,
                      'id': 4
                    }
                  }
                };
              }
            }

            Object.defineProperty(LocalPaymentMethods.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.LocalPaymentMethods');
              },
              enumerable: false,
              configurable: false
            });
            return LocalPaymentMethods;
          }());
          v1.PaymentMethodType = (function() {

            class PaymentMethodType {

              constructor(props) {
                this.card = props && props.card;
                this.directDebit = props && props.directDebit;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  const oneOfMutex = {};

                  if (msg.card != null) {
                    if (oneOfMutex['type_Selector']) {
                      errors.field('card').up().field('type_Selector').error('multiple values');
                    } else {
                      oneOfMutex['type_Selector'] = true;
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.verify(msg.card, helper, errors.field('card'));
                    }
                  }
                  if (msg.directDebit != null) {
                    if (oneOfMutex['type_Selector']) {
                      errors.field('directDebit').up().field('type_Selector').error('multiple values');
                    } else {
                      oneOfMutex['type_Selector'] = true;
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.verify(msg.directDebit, helper, errors.field('directDebit'));
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.card != null) {
                    json.card = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.toJSON(obj.card, helper);
                  }
                  if (obj.directDebit != null) {
                    json.directDebit = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.toJSON(obj.directDebit, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType();

                if (json.card != null) {
                  result.card = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.fromJSON(json.card, helper);
                } else {
                  delete result.card;
                }
                if (json.directDebit != null) {
                  result.directDebit = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.fromJSON(json.directDebit, helper);
                } else {
                  delete result.directDebit;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.card != null) {
                    grpc.card = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.toGRPC(obj.card, helper);
                  }
                  if (obj.directDebit != null) {
                    grpc.directDebit = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.toGRPC(obj.directDebit, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType();

                  if (grpc.card != null) {
                    result.card = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.fromGRPC(grpc.card, helper);
                  } else {
                    delete result.card;
                  }
                  if (grpc.directDebit != null) {
                    result.directDebit = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.fromGRPC(grpc.directDebit, helper);
                  } else {
                    delete result.directDebit;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'oneofs': {
                    'type_Selector': {
                      'oneof': [
                        'card',
                        'directDebit'
                      ]
                    }
                  },
                  'fields': {
                    'card': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.Card,
                      'id': 1
                    },
                    'directDebit': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit,
                      'id': 2
                    }
                  },
                  'nested': {
                    'Card': {
                      'fields': {
                        'brand': {
                          'type': 'CardBrand',
                          'id': 1
                        }
                      },
                      'nested': {
                        'CardBrand': {
                          'values': {
                            'UNKNOWN': 0,
                            'VISA_ELECTRON': 1,
                            'MASTERCARD_MAESTRO': 2,
                            'MASTERCARD': 3,
                            'VISA': 4,
                            'DINERS': 5,
                            'DISCOVER': 6,
                            'INTERACT': 7,
                            'JCB': 8,
                            'PIN_ONLY': 9,
                            'ELO': 10,
                            'UNION_PAY': 11
                          }
                        }
                      }
                    },
                    'DirectDebit': {
                      'fields': {
                        'brand': {
                          'type': 'DirectDebitBrand',
                          'id': 1
                        }
                      },
                      'nested': {
                        'DirectDebitBrand': {
                          'values': {
                            'UNKNOWN': 0,
                            'SEPA': 1
                          }
                        }
                      }
                    }
                  }
                };
              }
            }

            PaymentMethodType.Card = (function() {

              class Card {

                constructor(props) {
                  this.brand = props && props.brand;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.brand != null) {
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand.verify(msg.brand, helper, errors.field('brand'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.brand != null) {
                      json.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand[obj.brand];
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.Card();

                  if (json.brand != null) {
                    result.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand[json.brand];
                  } else {
                    result.brand = 0;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.brand != null) {
                      grpc.brand = obj.brand;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.Card();

                    if (grpc.brand != null) {
                      result.brand = grpc.brand;
                    } else {
                      result.brand = 0;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'brand': {
                        'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand,
                        'id': 1
                      }
                    },
                    'nested': {
                      'CardBrand': {
                        'values': {
                          'UNKNOWN': 0,
                          'VISA_ELECTRON': 1,
                          'MASTERCARD_MAESTRO': 2,
                          'MASTERCARD': 3,
                          'VISA': 4,
                          'DINERS': 5,
                          'DISCOVER': 6,
                          'INTERACT': 7,
                          'JCB': 8,
                          'PIN_ONLY': 9,
                          'ELO': 10,
                          'UNION_PAY': 11
                        }
                      }
                    }
                  };
                }
              }

              Card.CardBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'VISA_ELECTRON': 1,
                1: 'VISA_ELECTRON',
                'MASTERCARD_MAESTRO': 2,
                2: 'MASTERCARD_MAESTRO',
                'MASTERCARD': 3,
                3: 'MASTERCARD',
                'VISA': 4,
                4: 'VISA',
                'DINERS': 5,
                5: 'DINERS',
                'DISCOVER': 6,
                6: 'DISCOVER',
                'INTERACT': 7,
                7: 'INTERACT',
                'JCB': 8,
                8: 'JCB',
                'PIN_ONLY': 9,
                9: 'PIN_ONLY',
                'ELO': 10,
                10: 'ELO',
                'UNION_PAY': 11,
                11: 'UNION_PAY'
              };
              Card.CardBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'VISA_ELECTRON': 1,
                1: 'VISA_ELECTRON',
                'MASTERCARD_MAESTRO': 2,
                2: 'MASTERCARD_MAESTRO',
                'MASTERCARD': 3,
                3: 'MASTERCARD',
                'VISA': 4,
                4: 'VISA',
                'DINERS': 5,
                5: 'DINERS',
                'DISCOVER': 6,
                6: 'DISCOVER',
                'INTERACT': 7,
                7: 'INTERACT',
                'JCB': 8,
                8: 'JCB',
                'PIN_ONLY': 9,
                9: 'PIN_ONLY',
                'ELO': 10,
                10: 'ELO',
                'UNION_PAY': 11,
                11: 'UNION_PAY'
              };
              Object.defineProperty(Card.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodType.Card');
                },
                enumerable: false,
                configurable: false
              });
              return Card;
            }());
            PaymentMethodType.DirectDebit = (function() {

              class DirectDebit {

                constructor(props) {
                  this.brand = props && props.brand;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.brand != null) {
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand.verify(msg.brand, helper, errors.field('brand'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.brand != null) {
                      json.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand[obj.brand];
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit();

                  if (json.brand != null) {
                    result.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand[json.brand];
                  } else {
                    result.brand = 0;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.brand != null) {
                      grpc.brand = obj.brand;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit();

                    if (grpc.brand != null) {
                      result.brand = grpc.brand;
                    } else {
                      result.brand = 0;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'brand': {
                        'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand,
                        'id': 1
                      }
                    },
                    'nested': {
                      'DirectDebitBrand': {
                        'values': {
                          'UNKNOWN': 0,
                          'SEPA': 1
                        }
                      }
                    }
                  };
                }
              }

              DirectDebit.DirectDebitBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SEPA': 1,
                1: 'SEPA'
              };
              DirectDebit.DirectDebitBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SEPA': 1,
                1: 'SEPA'
              };
              Object.defineProperty(DirectDebit.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit');
                },
                enumerable: false,
                configurable: false
              });
              return DirectDebit;
            }());
            PaymentMethodType.Card = (function() {

              class Card {

                constructor(props) {
                  this.brand = props && props.brand;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.brand != null) {
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand.verify(msg.brand, helper, errors.field('brand'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.brand != null) {
                      json.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand[obj.brand];
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.Card();

                  if (json.brand != null) {
                    result.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand[json.brand];
                  } else {
                    result.brand = 0;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.brand != null) {
                      grpc.brand = obj.brand;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.Card();

                    if (grpc.brand != null) {
                      result.brand = grpc.brand;
                    } else {
                      result.brand = 0;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'brand': {
                        'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.Card.CardBrand,
                        'id': 1
                      }
                    },
                    'nested': {
                      'CardBrand': {
                        'values': {
                          'UNKNOWN': 0,
                          'VISA_ELECTRON': 1,
                          'MASTERCARD_MAESTRO': 2,
                          'MASTERCARD': 3,
                          'VISA': 4,
                          'DINERS': 5,
                          'DISCOVER': 6,
                          'INTERACT': 7,
                          'JCB': 8,
                          'PIN_ONLY': 9,
                          'ELO': 10,
                          'UNION_PAY': 11
                        }
                      }
                    }
                  };
                }
              }

              Card.CardBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'VISA_ELECTRON': 1,
                1: 'VISA_ELECTRON',
                'MASTERCARD_MAESTRO': 2,
                2: 'MASTERCARD_MAESTRO',
                'MASTERCARD': 3,
                3: 'MASTERCARD',
                'VISA': 4,
                4: 'VISA',
                'DINERS': 5,
                5: 'DINERS',
                'DISCOVER': 6,
                6: 'DISCOVER',
                'INTERACT': 7,
                7: 'INTERACT',
                'JCB': 8,
                8: 'JCB',
                'PIN_ONLY': 9,
                9: 'PIN_ONLY',
                'ELO': 10,
                10: 'ELO',
                'UNION_PAY': 11,
                11: 'UNION_PAY'
              };
              Card.CardBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'VISA_ELECTRON': 1,
                1: 'VISA_ELECTRON',
                'MASTERCARD_MAESTRO': 2,
                2: 'MASTERCARD_MAESTRO',
                'MASTERCARD': 3,
                3: 'MASTERCARD',
                'VISA': 4,
                4: 'VISA',
                'DINERS': 5,
                5: 'DINERS',
                'DISCOVER': 6,
                6: 'DISCOVER',
                'INTERACT': 7,
                7: 'INTERACT',
                'JCB': 8,
                8: 'JCB',
                'PIN_ONLY': 9,
                9: 'PIN_ONLY',
                'ELO': 10,
                10: 'ELO',
                'UNION_PAY': 11,
                11: 'UNION_PAY'
              };
              Object.defineProperty(Card.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodType.Card');
                },
                enumerable: false,
                configurable: false
              });
              return Card;
            }());
            PaymentMethodType.DirectDebit = (function() {

              class DirectDebit {

                constructor(props) {
                  this.brand = props && props.brand;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.brand != null) {
                      $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand.verify(msg.brand, helper, errors.field('brand'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.brand != null) {
                      json.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand[obj.brand];
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit();

                  if (json.brand != null) {
                    result.brand = $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand[json.brand];
                  } else {
                    result.brand = 0;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.brand != null) {
                      grpc.brand = obj.brand;
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit();

                    if (grpc.brand != null) {
                      result.brand = grpc.brand;
                    } else {
                      result.brand = 0;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'brand': {
                        'type': $root.com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit.DirectDebitBrand,
                        'id': 1
                      }
                    },
                    'nested': {
                      'DirectDebitBrand': {
                        'values': {
                          'UNKNOWN': 0,
                          'SEPA': 1
                        }
                      }
                    }
                  };
                }
              }

              DirectDebit.DirectDebitBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SEPA': 1,
                1: 'SEPA'
              };
              DirectDebit.DirectDebitBrand = {
                verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                  switch (value) {
                    default: {
                      errors.error('enum expected');
                    }
                    case 0:
                    case 1:
                      break;
                  }
                  return errors;
                },
                'UNKNOWN': 0,
                0: 'UNKNOWN',
                'SEPA': 1,
                1: 'SEPA'
              };
              Object.defineProperty(DirectDebit.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodType.DirectDebit');
                },
                enumerable: false,
                configurable: false
              });
              return DirectDebit;
            }());
            Object.defineProperty(PaymentMethodType.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodType');
              },
              enumerable: false,
              configurable: false
            });
            return PaymentMethodType;
          }());
          v1.Order = (function() {

            class Order {

              constructor(props) {
                this.orderId = props && props.orderId;
                this.invoiceId = props && props.invoiceId;
                this.shipping = props && props.shipping;
                this.currency = props && props.currency;
                this.capture = props && props.capture;
                this.orderLineItems = props && props.orderLineItems;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.orderId != null) {
                    $root.google.protobuf.StringValue.verify(msg.orderId, helper, errors.field('orderId'));
                  }
                  if (msg.invoiceId != null) {
                    if (typeof msg.invoiceId !== 'string') {
                      errors.field('invoiceId').error('string expected');
                    }
                  }
                  if (msg.shipping != null) {
                    $root.com.wixpress.billing.api.v1.Shipping.verify(msg.shipping, helper, errors.field('shipping'));
                  }
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.capture != null) {
                    if (typeof msg.capture !== 'boolean') {
                      errors.field('capture').error('boolean expected');
                    }
                  }
                  if (msg.orderLineItems != null) {
                    const fieldErrors = errors.field('orderLineItems');

                    if (!Array.isArray(msg.orderLineItems)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.orderLineItems.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.OrderLineItem.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.orderId != null) {
                    json.orderId = $root.google.protobuf.StringValue.toJSON(obj.orderId, helper);
                  }
                  if (obj.invoiceId != null) {
                    json.invoiceId = obj.invoiceId;
                  }
                  if (obj.shipping != null) {
                    json.shipping = $root.com.wixpress.billing.api.v1.Shipping.toJSON(obj.shipping, helper);
                  }
                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.capture != null) {
                    json.capture = obj.capture;
                  }
                  if (obj.orderLineItems != null) {
                    json.orderLineItems = obj.orderLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderLineItem.toJSON(e, helper);
                    });
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Order();

                if (json.orderId != null) {
                  result.orderId = $root.google.protobuf.StringValue.fromJSON(json.orderId, helper);
                } else {
                  delete result.orderId;
                }
                if (json.invoiceId != null) {
                  result.invoiceId = json.invoiceId;
                } else {
                  result.invoiceId = '';
                }
                if (json.shipping != null) {
                  result.shipping = $root.com.wixpress.billing.api.v1.Shipping.fromJSON(json.shipping, helper);
                } else {
                  delete result.shipping;
                }
                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.capture != null) {
                  result.capture = json.capture;
                } else {
                  result.capture = false;
                }
                if (json.orderLineItems != null) {
                  result.orderLineItems = json.orderLineItems.map(e => {
                    return $root.com.wixpress.billing.api.v1.OrderLineItem.fromJSON(e, helper);
                  });
                } else {
                  result.orderLineItems = [];
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.orderId != null) {
                    grpc.orderId = $root.google.protobuf.StringValue.toGRPC(obj.orderId, helper);
                  }
                  if (obj.invoiceId != null) {
                    grpc.invoiceId = obj.invoiceId;
                  }
                  if (obj.shipping != null) {
                    grpc.shipping = $root.com.wixpress.billing.api.v1.Shipping.toGRPC(obj.shipping, helper);
                  }
                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.capture != null) {
                    grpc.capture = obj.capture;
                  }
                  if (obj.orderLineItems != null) {
                    grpc.orderLineItems = obj.orderLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderLineItem.toGRPC(e, helper);
                    });
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Order();

                  if (grpc.orderId != null) {
                    result.orderId = $root.google.protobuf.StringValue.fromGRPC(grpc.orderId, helper);
                  } else {
                    delete result.orderId;
                  }
                  if (grpc.invoiceId != null) {
                    result.invoiceId = grpc.invoiceId;
                  } else {
                    result.invoiceId = '';
                  }
                  if (grpc.shipping != null) {
                    result.shipping = $root.com.wixpress.billing.api.v1.Shipping.fromGRPC(grpc.shipping, helper);
                  } else {
                    delete result.shipping;
                  }
                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.capture != null) {
                    result.capture = grpc.capture;
                  } else {
                    result.capture = false;
                  }
                  if (grpc.orderLineItems != null) {
                    result.orderLineItems = grpc.orderLineItems.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderLineItem.fromGRPC(e, helper);
                    });
                  } else {
                    result.orderLineItems = [];
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'orderId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'invoiceId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'shipping': {
                      'type': $root.com.wixpress.billing.api.v1.Shipping,
                      'id': 3
                    },
                    'currency': {
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'capture': {
                      'type': 'bool',
                      'id': 5
                    },
                    'orderLineItems': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.OrderLineItem,
                      'id': 6,
                      'options': {
                        '(wix.api.minSize)': 1
                      }
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 7
                    }
                  }
                };
              }
            }

            Object.defineProperty(Order.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Order');
              },
              enumerable: false,
              configurable: false
            });
            return Order;
          }());
          v1.OrderLineItem = (function() {

            class OrderLineItem {

              constructor(props) {
                this.orderLineItemId = props && props.orderLineItemId;
                this.productPricePlanId = props && props.productPricePlanId;
                this.description = props && props.description;
                this.quantity = props && props.quantity;
                this.overrideAmount = props && props.overrideAmount;
                this.taxes = props && props.taxes;
                this.taxIncluded = props && props.taxIncluded;
                this.couponCode = props && props.couponCode;
                this.serviceId = props && props.serviceId;
                this.overridePeriodStart = props && props.overridePeriodStart;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.orderLineItemId != null) {
                    $root.google.protobuf.StringValue.verify(msg.orderLineItemId, helper, errors.field('orderLineItemId'));
                  }
                  if (msg.productPricePlanId != null) {
                    if (typeof msg.productPricePlanId !== 'string') {
                      errors.field('productPricePlanId').error('string expected');
                    }
                  }
                  if (msg.description != null) {
                    if (typeof msg.description !== 'string') {
                      errors.field('description').error('string expected');
                    }
                  }
                  if (msg.quantity != null) {
                    if (!Number.isInteger(msg.quantity)) {
                      errors.field('quantity').error('integer expected');
                    }
                  }
                  if (msg.overrideAmount != null) {
                    $root.google.protobuf.Int64Value.verify(msg.overrideAmount, helper, errors.field('overrideAmount'));
                  }
                  if (msg.taxes != null) {
                    const fieldErrors = errors.field('taxes');

                    if (!Array.isArray(msg.taxes)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.taxes.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Tax.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.taxIncluded != null) {
                    $root.google.protobuf.BoolValue.verify(msg.taxIncluded, helper, errors.field('taxIncluded'));
                  }
                  if (msg.couponCode != null) {
                    $root.google.protobuf.StringValue.verify(msg.couponCode, helper, errors.field('couponCode'));
                  }
                  if (msg.serviceId != null) {
                    $root.google.protobuf.StringValue.verify(msg.serviceId, helper, errors.field('serviceId'));
                  }
                  if (msg.overridePeriodStart != null) {
                    $root.google.protobuf.Timestamp.verify(msg.overridePeriodStart, helper, errors.field('overridePeriodStart'));
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.orderLineItemId != null) {
                    json.orderLineItemId = $root.google.protobuf.StringValue.toJSON(obj.orderLineItemId, helper);
                  }
                  if (obj.productPricePlanId != null) {
                    json.productPricePlanId = obj.productPricePlanId;
                  }
                  if (obj.description != null) {
                    json.description = obj.description;
                  }
                  if (obj.quantity != null) {
                    json.quantity = obj.quantity;
                  }
                  if (obj.overrideAmount != null) {
                    json.overrideAmount = $root.google.protobuf.Int64Value.toJSON(obj.overrideAmount, helper);
                  }
                  if (obj.taxes != null) {
                    json.taxes = obj.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.toJSON(e, helper);
                    });
                  }
                  if (obj.taxIncluded != null) {
                    json.taxIncluded = $root.google.protobuf.BoolValue.toJSON(obj.taxIncluded, helper);
                  }
                  if (obj.couponCode != null) {
                    json.couponCode = $root.google.protobuf.StringValue.toJSON(obj.couponCode, helper);
                  }
                  if (obj.serviceId != null) {
                    json.serviceId = $root.google.protobuf.StringValue.toJSON(obj.serviceId, helper);
                  }
                  if (obj.overridePeriodStart != null) {
                    json.overridePeriodStart = $root.google.protobuf.Timestamp.toJSON(obj.overridePeriodStart, helper);
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.OrderLineItem();

                if (json.orderLineItemId != null) {
                  result.orderLineItemId = $root.google.protobuf.StringValue.fromJSON(json.orderLineItemId, helper);
                } else {
                  delete result.orderLineItemId;
                }
                if (json.productPricePlanId != null) {
                  result.productPricePlanId = json.productPricePlanId;
                } else {
                  result.productPricePlanId = '';
                }
                if (json.description != null) {
                  result.description = json.description;
                } else {
                  result.description = '';
                }
                if (json.quantity != null) {
                  result.quantity = json.quantity;
                } else {
                  result.quantity = 0;
                }
                if (json.overrideAmount != null) {
                  result.overrideAmount = $root.google.protobuf.Int64Value.fromJSON(json.overrideAmount, helper);
                } else {
                  delete result.overrideAmount;
                }
                if (json.taxes != null) {
                  result.taxes = json.taxes.map(e => {
                    return $root.com.wixpress.billing.api.v1.Tax.fromJSON(e, helper);
                  });
                } else {
                  result.taxes = [];
                }
                if (json.taxIncluded != null) {
                  result.taxIncluded = $root.google.protobuf.BoolValue.fromJSON(json.taxIncluded, helper);
                } else {
                  delete result.taxIncluded;
                }
                if (json.couponCode != null) {
                  result.couponCode = $root.google.protobuf.StringValue.fromJSON(json.couponCode, helper);
                } else {
                  delete result.couponCode;
                }
                if (json.serviceId != null) {
                  result.serviceId = $root.google.protobuf.StringValue.fromJSON(json.serviceId, helper);
                } else {
                  delete result.serviceId;
                }
                if (json.overridePeriodStart != null) {
                  result.overridePeriodStart = $root.google.protobuf.Timestamp.fromJSON(json.overridePeriodStart, helper);
                } else {
                  delete result.overridePeriodStart;
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.orderLineItemId != null) {
                    grpc.orderLineItemId = $root.google.protobuf.StringValue.toGRPC(obj.orderLineItemId, helper);
                  }
                  if (obj.productPricePlanId != null) {
                    grpc.productPricePlanId = obj.productPricePlanId;
                  }
                  if (obj.description != null) {
                    grpc.description = obj.description;
                  }
                  if (obj.quantity != null) {
                    grpc.quantity = obj.quantity;
                  }
                  if (obj.overrideAmount != null) {
                    grpc.overrideAmount = $root.google.protobuf.Int64Value.toGRPC(obj.overrideAmount, helper);
                  }
                  if (obj.taxes != null) {
                    grpc.taxes = obj.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.toGRPC(e, helper);
                    });
                  }
                  if (obj.taxIncluded != null) {
                    grpc.taxIncluded = $root.google.protobuf.BoolValue.toGRPC(obj.taxIncluded, helper);
                  }
                  if (obj.couponCode != null) {
                    grpc.couponCode = $root.google.protobuf.StringValue.toGRPC(obj.couponCode, helper);
                  }
                  if (obj.serviceId != null) {
                    grpc.serviceId = $root.google.protobuf.StringValue.toGRPC(obj.serviceId, helper);
                  }
                  if (obj.overridePeriodStart != null) {
                    grpc.overridePeriodStart = $root.google.protobuf.Timestamp.toGRPC(obj.overridePeriodStart, helper);
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.OrderLineItem();

                  if (grpc.orderLineItemId != null) {
                    result.orderLineItemId = $root.google.protobuf.StringValue.fromGRPC(grpc.orderLineItemId, helper);
                  } else {
                    delete result.orderLineItemId;
                  }
                  if (grpc.productPricePlanId != null) {
                    result.productPricePlanId = grpc.productPricePlanId;
                  } else {
                    result.productPricePlanId = '';
                  }
                  if (grpc.description != null) {
                    result.description = grpc.description;
                  } else {
                    result.description = '';
                  }
                  if (grpc.quantity != null) {
                    result.quantity = grpc.quantity;
                  } else {
                    result.quantity = 0;
                  }
                  if (grpc.overrideAmount != null) {
                    result.overrideAmount = $root.google.protobuf.Int64Value.fromGRPC(grpc.overrideAmount, helper);
                  } else {
                    delete result.overrideAmount;
                  }
                  if (grpc.taxes != null) {
                    result.taxes = grpc.taxes.map(e => {
                      return $root.com.wixpress.billing.api.v1.Tax.fromGRPC(e, helper);
                    });
                  } else {
                    result.taxes = [];
                  }
                  if (grpc.taxIncluded != null) {
                    result.taxIncluded = $root.google.protobuf.BoolValue.fromGRPC(grpc.taxIncluded, helper);
                  } else {
                    delete result.taxIncluded;
                  }
                  if (grpc.couponCode != null) {
                    result.couponCode = $root.google.protobuf.StringValue.fromGRPC(grpc.couponCode, helper);
                  } else {
                    delete result.couponCode;
                  }
                  if (grpc.serviceId != null) {
                    result.serviceId = $root.google.protobuf.StringValue.fromGRPC(grpc.serviceId, helper);
                  } else {
                    delete result.serviceId;
                  }
                  if (grpc.overridePeriodStart != null) {
                    result.overridePeriodStart = $root.google.protobuf.Timestamp.fromGRPC(grpc.overridePeriodStart, helper);
                  } else {
                    delete result.overridePeriodStart;
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'orderLineItemId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'productPricePlanId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'description': {
                      'type': 'string',
                      'id': 3
                    },
                    'quantity': {
                      'type': 'int32',
                      'id': 4
                    },
                    'overrideAmount': {
                      'type': $root.google.protobuf.Int64Value,
                      'id': 5
                    },
                    'taxes': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Tax,
                      'id': 6
                    },
                    'taxIncluded': {
                      'type': $root.google.protobuf.BoolValue,
                      'id': 7
                    },
                    'couponCode': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 8
                    },
                    'serviceId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 9,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'overridePeriodStart': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 10
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 11
                    }
                  }
                };
              }
            }

            Object.defineProperty(OrderLineItem.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderLineItem');
              },
              enumerable: false,
              configurable: false
            });
            return OrderLineItem;
          }());
          v1.OrderPreview = (function() {

            class OrderPreview {

              constructor(props) {
                this.currency = props && props.currency;
                this.items = props && props.items;
                this.amounts = props && props.amounts;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.items != null) {
                    const fieldErrors = errors.field('items');

                    if (!Array.isArray(msg.items)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.items.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.OrderPreviewItem.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.amounts != null) {
                    $root.com.wixpress.billing.api.v1.Amounts.verify(msg.amounts, helper, errors.field('amounts'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.items != null) {
                    json.items = obj.items.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderPreviewItem.toJSON(e, helper);
                    });
                  }
                  if (obj.amounts != null) {
                    json.amounts = $root.com.wixpress.billing.api.v1.Amounts.toJSON(obj.amounts, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.OrderPreview();

                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.items != null) {
                  result.items = json.items.map(e => {
                    return $root.com.wixpress.billing.api.v1.OrderPreviewItem.fromJSON(e, helper);
                  });
                } else {
                  result.items = [];
                }
                if (json.amounts != null) {
                  result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromJSON(json.amounts, helper);
                } else {
                  delete result.amounts;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.items != null) {
                    grpc.items = obj.items.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderPreviewItem.toGRPC(e, helper);
                    });
                  }
                  if (obj.amounts != null) {
                    grpc.amounts = $root.com.wixpress.billing.api.v1.Amounts.toGRPC(obj.amounts, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.OrderPreview();

                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.items != null) {
                    result.items = grpc.items.map(e => {
                      return $root.com.wixpress.billing.api.v1.OrderPreviewItem.fromGRPC(e, helper);
                    });
                  } else {
                    result.items = [];
                  }
                  if (grpc.amounts != null) {
                    result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromGRPC(grpc.amounts, helper);
                  } else {
                    delete result.amounts;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'currency': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'items': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.OrderPreviewItem,
                      'id': 2
                    },
                    'amounts': {
                      'type': $root.com.wixpress.billing.api.v1.Amounts,
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(OrderPreview.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderPreview');
              },
              enumerable: false,
              configurable: false
            });
            return OrderPreview;
          }());
          v1.OrderPreviewItem = (function() {

            class OrderPreviewItem {

              constructor(props) {
                this.orderPreviewItemId = props && props.orderPreviewItemId;
                this.productId = props && props.productId;
                this.quantity = props && props.quantity;
                this.unitPrice = props && props.unitPrice;
                this.cycle = props && props.cycle;
                this.amounts = props && props.amounts;
                this.nextRecurringPayment = props && props.nextRecurringPayment;
                this.coupon = props && props.coupon;
                this.overridePeriodStart = props && props.overridePeriodStart;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.orderPreviewItemId != null) {
                    if (typeof msg.orderPreviewItemId !== 'string') {
                      errors.field('orderPreviewItemId').error('string expected');
                    }
                  }
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                  if (msg.quantity != null) {
                    if (!Number.isInteger(msg.quantity)) {
                      errors.field('quantity').error('integer expected');
                    }
                  }
                  if (msg.unitPrice != null) {
                    if (!Number.isInteger(msg.unitPrice) && !Long.isLong(msg.unitPrice)) {
                      errors.field('unitPrice').error('long or integer expected');
                    }
                  }
                  if (msg.cycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.cycle, helper, errors.field('cycle'));
                  }
                  if (msg.amounts != null) {
                    $root.com.wixpress.billing.api.v1.Amounts.verify(msg.amounts, helper, errors.field('amounts'));
                  }
                  if (msg.nextRecurringPayment != null) {
                    $root.com.wixpress.billing.api.v1.RecurringPayment.verify(msg.nextRecurringPayment, helper, errors.field('nextRecurringPayment'));
                  }
                  if (msg.coupon != null) {
                    $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon.verify(msg.coupon, helper, errors.field('coupon'));
                  }
                  if (msg.overridePeriodStart != null) {
                    $root.google.protobuf.Timestamp.verify(msg.overridePeriodStart, helper, errors.field('overridePeriodStart'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.orderPreviewItemId != null) {
                    json.orderPreviewItemId = obj.orderPreviewItemId;
                  }
                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  if (obj.quantity != null) {
                    json.quantity = obj.quantity;
                  }
                  if (obj.unitPrice != null) {
                    json.unitPrice = obj.unitPrice.toString();
                  }
                  if (obj.cycle != null) {
                    json.cycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.cycle, helper);
                  }
                  if (obj.amounts != null) {
                    json.amounts = $root.com.wixpress.billing.api.v1.Amounts.toJSON(obj.amounts, helper);
                  }
                  if (obj.nextRecurringPayment != null) {
                    json.nextRecurringPayment = $root.com.wixpress.billing.api.v1.RecurringPayment.toJSON(obj.nextRecurringPayment, helper);
                  }
                  if (obj.coupon != null) {
                    json.coupon = $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon.toJSON(obj.coupon, helper);
                  }
                  if (obj.overridePeriodStart != null) {
                    json.overridePeriodStart = $root.google.protobuf.Timestamp.toJSON(obj.overridePeriodStart, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem();

                if (json.orderPreviewItemId != null) {
                  result.orderPreviewItemId = json.orderPreviewItemId;
                } else {
                  result.orderPreviewItemId = '';
                }
                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                if (json.quantity != null) {
                  result.quantity = json.quantity;
                } else {
                  result.quantity = 0;
                }
                if (json.unitPrice != null) {
                  result.unitPrice = Long.fromValue(json.unitPrice);
                } else {
                  result.unitPrice = Long.ZERO;
                }
                if (json.cycle != null) {
                  result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.cycle, helper);
                } else {
                  delete result.cycle;
                }
                if (json.amounts != null) {
                  result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromJSON(json.amounts, helper);
                } else {
                  delete result.amounts;
                }
                if (json.nextRecurringPayment != null) {
                  result.nextRecurringPayment = $root.com.wixpress.billing.api.v1.RecurringPayment.fromJSON(json.nextRecurringPayment, helper);
                } else {
                  delete result.nextRecurringPayment;
                }
                if (json.coupon != null) {
                  result.coupon = $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon.fromJSON(json.coupon, helper);
                } else {
                  delete result.coupon;
                }
                if (json.overridePeriodStart != null) {
                  result.overridePeriodStart = $root.google.protobuf.Timestamp.fromJSON(json.overridePeriodStart, helper);
                } else {
                  delete result.overridePeriodStart;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.orderPreviewItemId != null) {
                    grpc.orderPreviewItemId = obj.orderPreviewItemId;
                  }
                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  if (obj.quantity != null) {
                    grpc.quantity = obj.quantity;
                  }
                  if (obj.unitPrice != null) {
                    grpc.unitPrice = obj.unitPrice.toString();
                  }
                  if (obj.cycle != null) {
                    grpc.cycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.cycle, helper);
                  }
                  if (obj.amounts != null) {
                    grpc.amounts = $root.com.wixpress.billing.api.v1.Amounts.toGRPC(obj.amounts, helper);
                  }
                  if (obj.nextRecurringPayment != null) {
                    grpc.nextRecurringPayment = $root.com.wixpress.billing.api.v1.RecurringPayment.toGRPC(obj.nextRecurringPayment, helper);
                  }
                  if (obj.coupon != null) {
                    grpc.coupon = $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon.toGRPC(obj.coupon, helper);
                  }
                  if (obj.overridePeriodStart != null) {
                    grpc.overridePeriodStart = $root.google.protobuf.Timestamp.toGRPC(obj.overridePeriodStart, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem();

                  if (grpc.orderPreviewItemId != null) {
                    result.orderPreviewItemId = grpc.orderPreviewItemId;
                  } else {
                    result.orderPreviewItemId = '';
                  }
                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  if (grpc.quantity != null) {
                    result.quantity = grpc.quantity;
                  } else {
                    result.quantity = 0;
                  }
                  if (grpc.unitPrice != null) {
                    result.unitPrice = Long.fromValue(grpc.unitPrice);
                  } else {
                    result.unitPrice = Long.ZERO;
                  }
                  if (grpc.cycle != null) {
                    result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.cycle, helper);
                  } else {
                    delete result.cycle;
                  }
                  if (grpc.amounts != null) {
                    result.amounts = $root.com.wixpress.billing.api.v1.Amounts.fromGRPC(grpc.amounts, helper);
                  } else {
                    delete result.amounts;
                  }
                  if (grpc.nextRecurringPayment != null) {
                    result.nextRecurringPayment = $root.com.wixpress.billing.api.v1.RecurringPayment.fromGRPC(grpc.nextRecurringPayment, helper);
                  } else {
                    delete result.nextRecurringPayment;
                  }
                  if (grpc.coupon != null) {
                    result.coupon = $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon.fromGRPC(grpc.coupon, helper);
                  } else {
                    delete result.coupon;
                  }
                  if (grpc.overridePeriodStart != null) {
                    result.overridePeriodStart = $root.google.protobuf.Timestamp.fromGRPC(grpc.overridePeriodStart, helper);
                  } else {
                    delete result.overridePeriodStart;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'orderPreviewItemId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'productId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'quantity': {
                      'type': 'int32',
                      'id': 3
                    },
                    'unitPrice': {
                      'type': 'int64',
                      'id': 4
                    },
                    'cycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 5
                    },
                    'amounts': {
                      'type': $root.com.wixpress.billing.api.v1.Amounts,
                      'id': 6
                    },
                    'nextRecurringPayment': {
                      'type': $root.com.wixpress.billing.api.v1.RecurringPayment,
                      'id': 7
                    },
                    'coupon': {
                      'type': $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon,
                      'id': 8
                    },
                    'overridePeriodStart': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 9
                    }
                  },
                  'nested': {
                    'Coupon': {
                      'fields': {
                        'couponId': {
                          'type': 'google.protobuf.StringValue',
                          'id': 1,
                          'options': {
                            '(wix.api.format)': 'GUID'
                          }
                        },
                        'couponDisplayName': {
                          'type': 'google.protobuf.StringValue',
                          'id': 2
                        }
                      }
                    }
                  }
                };
              }
            }

            OrderPreviewItem.Coupon = (function() {

              class Coupon {

                constructor(props) {
                  this.couponId = props && props.couponId;
                  this.couponDisplayName = props && props.couponDisplayName;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.couponId != null) {
                      $root.google.protobuf.StringValue.verify(msg.couponId, helper, errors.field('couponId'));
                    }
                    if (msg.couponDisplayName != null) {
                      $root.google.protobuf.StringValue.verify(msg.couponDisplayName, helper, errors.field('couponDisplayName'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.couponId != null) {
                      json.couponId = $root.google.protobuf.StringValue.toJSON(obj.couponId, helper);
                    }
                    if (obj.couponDisplayName != null) {
                      json.couponDisplayName = $root.google.protobuf.StringValue.toJSON(obj.couponDisplayName, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon();

                  if (json.couponId != null) {
                    result.couponId = $root.google.protobuf.StringValue.fromJSON(json.couponId, helper);
                  } else {
                    delete result.couponId;
                  }
                  if (json.couponDisplayName != null) {
                    result.couponDisplayName = $root.google.protobuf.StringValue.fromJSON(json.couponDisplayName, helper);
                  } else {
                    delete result.couponDisplayName;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.couponId != null) {
                      grpc.couponId = $root.google.protobuf.StringValue.toGRPC(obj.couponId, helper);
                    }
                    if (obj.couponDisplayName != null) {
                      grpc.couponDisplayName = $root.google.protobuf.StringValue.toGRPC(obj.couponDisplayName, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon();

                    if (grpc.couponId != null) {
                      result.couponId = $root.google.protobuf.StringValue.fromGRPC(grpc.couponId, helper);
                    } else {
                      delete result.couponId;
                    }
                    if (grpc.couponDisplayName != null) {
                      result.couponDisplayName = $root.google.protobuf.StringValue.fromGRPC(grpc.couponDisplayName, helper);
                    } else {
                      delete result.couponDisplayName;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'couponId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'couponDisplayName': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(Coupon.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderPreviewItem.Coupon');
                },
                enumerable: false,
                configurable: false
              });
              return Coupon;
            }());
            OrderPreviewItem.Coupon = (function() {

              class Coupon {

                constructor(props) {
                  this.couponId = props && props.couponId;
                  this.couponDisplayName = props && props.couponDisplayName;
                }

                static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                  if (typeof msg !== 'object' || msg == null) {
                    errors.error('object expected');
                  } else {
                    if (msg.couponId != null) {
                      $root.google.protobuf.StringValue.verify(msg.couponId, helper, errors.field('couponId'));
                    }
                    if (msg.couponDisplayName != null) {
                      $root.google.protobuf.StringValue.verify(msg.couponDisplayName, helper, errors.field('couponDisplayName'));
                    }
                  }
                  return errors;
                }

                static toJSON(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const json = {};

                    if (obj.couponId != null) {
                      json.couponId = $root.google.protobuf.StringValue.toJSON(obj.couponId, helper);
                    }
                    if (obj.couponDisplayName != null) {
                      json.couponDisplayName = $root.google.protobuf.StringValue.toJSON(obj.couponDisplayName, helper);
                    }
                    return json;
                  }
                }

                static fromJSON(json, helper) {
                  const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon();

                  if (json.couponId != null) {
                    result.couponId = $root.google.protobuf.StringValue.fromJSON(json.couponId, helper);
                  } else {
                    delete result.couponId;
                  }
                  if (json.couponDisplayName != null) {
                    result.couponDisplayName = $root.google.protobuf.StringValue.fromJSON(json.couponDisplayName, helper);
                  } else {
                    delete result.couponDisplayName;
                  }
                  return result;
                }

                static toGRPC(obj, helper) {
                  if (obj == null) {
                    return null;
                  } else {
                    const grpc = {};

                    if (obj.couponId != null) {
                      grpc.couponId = $root.google.protobuf.StringValue.toGRPC(obj.couponId, helper);
                    }
                    if (obj.couponDisplayName != null) {
                      grpc.couponDisplayName = $root.google.protobuf.StringValue.toGRPC(obj.couponDisplayName, helper);
                    }
                    return grpc;
                  }
                }

                static fromGRPC(grpc, helper) {
                  if (grpc == null) {
                    return null;
                  } else {
                    const result = new $root.com.wixpress.billing.api.v1.OrderPreviewItem.Coupon();

                    if (grpc.couponId != null) {
                      result.couponId = $root.google.protobuf.StringValue.fromGRPC(grpc.couponId, helper);
                    } else {
                      delete result.couponId;
                    }
                    if (grpc.couponDisplayName != null) {
                      result.couponDisplayName = $root.google.protobuf.StringValue.fromGRPC(grpc.couponDisplayName, helper);
                    } else {
                      delete result.couponDisplayName;
                    }
                    return result;
                  }
                }

                static describe() {
                  return {
                    'fields': {
                      'couponId': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 1,
                        'options': {
                          '(wix.api.format)': 'GUID'
                        }
                      },
                      'couponDisplayName': {
                        'type': $root.google.protobuf.StringValue,
                        'id': 2
                      }
                    }
                  };
                }
              }

              Object.defineProperty(Coupon.prototype, '__proto', {
                value: pbjs => {
                  return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderPreviewItem.Coupon');
                },
                enumerable: false,
                configurable: false
              });
              return Coupon;
            }());
            Object.defineProperty(OrderPreviewItem.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderPreviewItem');
              },
              enumerable: false,
              configurable: false
            });
            return OrderPreviewItem;
          }());
          v1.OrderService = (function() {

            class OrderService {

              constructor() {
                if (this.constructor.name === OrderService.name) {
                  throw new TypeError('class OrderService is abstract');
                }
              }

              createOrder(aspects, msg) {
                throw new TypeError('method createOrder is abstract');
              }

              previewOrder(aspects, msg) {
                throw new TypeError('method previewOrder is abstract');
              }
            }

            OrderService.prototype.createOrder._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CreateOrderRequest,
                $root.com.wixpress.billing.api.v1.CreateOrderResponse
              ];
            };
            OrderService.prototype.previewOrder._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.PreviewOrderRequest,
                $root.com.wixpress.billing.api.v1.PreviewOrderResponse
              ];
            };
            OrderService.prototype.createOrder.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderService.CreateOrder');
            };
            OrderService.prototype.previewOrder.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderService.PreviewOrder');
            };
            Object.defineProperty(OrderService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(OrderService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.OrderService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(OrderService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.OrderService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(OrderService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return OrderService;
          }());
          v1.CreateOrderRequest = (function() {

            class CreateOrderRequest {

              constructor(props) {
                this.order = props && props.order;
                this.orderTaxContext = props && props.orderTaxContext;
                this.idempotencyKey = props && props.idempotencyKey;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.order != null) {
                    $root.com.wixpress.billing.api.v1.Order.verify(msg.order, helper, errors.field('order'));
                  }
                  if (msg.orderTaxContext != null) {
                    $root.com.wixpress.billing.api.v1.OrderTaxContext.verify(msg.orderTaxContext, helper, errors.field('orderTaxContext'));
                  }
                  if (msg.idempotencyKey != null) {
                    $root.google.protobuf.StringValue.verify(msg.idempotencyKey, helper, errors.field('idempotencyKey'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.order != null) {
                    json.order = $root.com.wixpress.billing.api.v1.Order.toJSON(obj.order, helper);
                  }
                  if (obj.orderTaxContext != null) {
                    json.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.toJSON(obj.orderTaxContext, helper);
                  }
                  if (obj.idempotencyKey != null) {
                    json.idempotencyKey = $root.google.protobuf.StringValue.toJSON(obj.idempotencyKey, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateOrderRequest();

                if (json.order != null) {
                  result.order = $root.com.wixpress.billing.api.v1.Order.fromJSON(json.order, helper);
                } else {
                  delete result.order;
                }
                if (json.orderTaxContext != null) {
                  result.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.fromJSON(json.orderTaxContext, helper);
                } else {
                  delete result.orderTaxContext;
                }
                if (json.idempotencyKey != null) {
                  result.idempotencyKey = $root.google.protobuf.StringValue.fromJSON(json.idempotencyKey, helper);
                } else {
                  delete result.idempotencyKey;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.order != null) {
                    grpc.order = $root.com.wixpress.billing.api.v1.Order.toGRPC(obj.order, helper);
                  }
                  if (obj.orderTaxContext != null) {
                    grpc.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.toGRPC(obj.orderTaxContext, helper);
                  }
                  if (obj.idempotencyKey != null) {
                    grpc.idempotencyKey = $root.google.protobuf.StringValue.toGRPC(obj.idempotencyKey, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateOrderRequest();

                  if (grpc.order != null) {
                    result.order = $root.com.wixpress.billing.api.v1.Order.fromGRPC(grpc.order, helper);
                  } else {
                    delete result.order;
                  }
                  if (grpc.orderTaxContext != null) {
                    result.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.fromGRPC(grpc.orderTaxContext, helper);
                  } else {
                    delete result.orderTaxContext;
                  }
                  if (grpc.idempotencyKey != null) {
                    result.idempotencyKey = $root.google.protobuf.StringValue.fromGRPC(grpc.idempotencyKey, helper);
                  } else {
                    delete result.idempotencyKey;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'order': {
                      'type': $root.com.wixpress.billing.api.v1.Order,
                      'id': 1
                    },
                    'orderTaxContext': {
                      'type': $root.com.wixpress.billing.api.v1.OrderTaxContext,
                      'id': 2
                    },
                    'idempotencyKey': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateOrderRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateOrderRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CreateOrderRequest;
          }());
          v1.CreateOrderResponse = (function() {

            class CreateOrderResponse {

              constructor(props) {
                this.order = props && props.order;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.order != null) {
                    $root.com.wixpress.billing.api.v1.Order.verify(msg.order, helper, errors.field('order'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.order != null) {
                    json.order = $root.com.wixpress.billing.api.v1.Order.toJSON(obj.order, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateOrderResponse();

                if (json.order != null) {
                  result.order = $root.com.wixpress.billing.api.v1.Order.fromJSON(json.order, helper);
                } else {
                  delete result.order;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.order != null) {
                    grpc.order = $root.com.wixpress.billing.api.v1.Order.toGRPC(obj.order, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateOrderResponse();

                  if (grpc.order != null) {
                    result.order = $root.com.wixpress.billing.api.v1.Order.fromGRPC(grpc.order, helper);
                  } else {
                    delete result.order;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'order': {
                      'type': $root.com.wixpress.billing.api.v1.Order,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateOrderResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateOrderResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CreateOrderResponse;
          }());
          v1.PreviewOrderRequest = (function() {

            class PreviewOrderRequest {

              constructor(props) {
                this.order = props && props.order;
                this.orderTaxContext = props && props.orderTaxContext;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.order != null) {
                    $root.com.wixpress.billing.api.v1.Order.verify(msg.order, helper, errors.field('order'));
                  }
                  if (msg.orderTaxContext != null) {
                    $root.com.wixpress.billing.api.v1.OrderTaxContext.verify(msg.orderTaxContext, helper, errors.field('orderTaxContext'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.order != null) {
                    json.order = $root.com.wixpress.billing.api.v1.Order.toJSON(obj.order, helper);
                  }
                  if (obj.orderTaxContext != null) {
                    json.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.toJSON(obj.orderTaxContext, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PreviewOrderRequest();

                if (json.order != null) {
                  result.order = $root.com.wixpress.billing.api.v1.Order.fromJSON(json.order, helper);
                } else {
                  delete result.order;
                }
                if (json.orderTaxContext != null) {
                  result.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.fromJSON(json.orderTaxContext, helper);
                } else {
                  delete result.orderTaxContext;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.order != null) {
                    grpc.order = $root.com.wixpress.billing.api.v1.Order.toGRPC(obj.order, helper);
                  }
                  if (obj.orderTaxContext != null) {
                    grpc.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.toGRPC(obj.orderTaxContext, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PreviewOrderRequest();

                  if (grpc.order != null) {
                    result.order = $root.com.wixpress.billing.api.v1.Order.fromGRPC(grpc.order, helper);
                  } else {
                    delete result.order;
                  }
                  if (grpc.orderTaxContext != null) {
                    result.orderTaxContext = $root.com.wixpress.billing.api.v1.OrderTaxContext.fromGRPC(grpc.orderTaxContext, helper);
                  } else {
                    delete result.orderTaxContext;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'order': {
                      'type': $root.com.wixpress.billing.api.v1.Order,
                      'id': 1
                    },
                    'orderTaxContext': {
                      'type': $root.com.wixpress.billing.api.v1.OrderTaxContext,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(PreviewOrderRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PreviewOrderRequest');
              },
              enumerable: false,
              configurable: false
            });
            return PreviewOrderRequest;
          }());
          v1.PreviewOrderResponse = (function() {

            class PreviewOrderResponse {

              constructor(props) {
                this.orderPreview = props && props.orderPreview;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.orderPreview != null) {
                    $root.com.wixpress.billing.api.v1.OrderPreview.verify(msg.orderPreview, helper, errors.field('orderPreview'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.orderPreview != null) {
                    json.orderPreview = $root.com.wixpress.billing.api.v1.OrderPreview.toJSON(obj.orderPreview, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.PreviewOrderResponse();

                if (json.orderPreview != null) {
                  result.orderPreview = $root.com.wixpress.billing.api.v1.OrderPreview.fromJSON(json.orderPreview, helper);
                } else {
                  delete result.orderPreview;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.orderPreview != null) {
                    grpc.orderPreview = $root.com.wixpress.billing.api.v1.OrderPreview.toGRPC(obj.orderPreview, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.PreviewOrderResponse();

                  if (grpc.orderPreview != null) {
                    result.orderPreview = $root.com.wixpress.billing.api.v1.OrderPreview.fromGRPC(grpc.orderPreview, helper);
                  } else {
                    delete result.orderPreview;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'orderPreview': {
                      'type': $root.com.wixpress.billing.api.v1.OrderPreview,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(PreviewOrderResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PreviewOrderResponse');
              },
              enumerable: false,
              configurable: false
            });
            return PreviewOrderResponse;
          }());
          v1.PaymentMethodService = (function() {

            class PaymentMethodService {

              constructor() {
                if (this.constructor.name === PaymentMethodService.name) {
                  throw new TypeError('class PaymentMethodService is abstract');
                }
              }

              listPaymentMethods(aspects, msg) {
                throw new TypeError('method listPaymentMethods is abstract');
              }
            }

            PaymentMethodService.prototype.listPaymentMethods._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListPaymentMethodsRequest,
                $root.com.wixpress.billing.api.v1.ListPaymentMethodsResponse
              ];
            };
            PaymentMethodService.prototype.listPaymentMethods.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodService.ListPaymentMethods');
            };
            Object.defineProperty(PaymentMethodService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentMethodService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.PaymentMethodService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentMethodService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentMethodService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentMethodService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return PaymentMethodService;
          }());
          v1.ListPaymentMethodsRequest = (function() {

            class ListPaymentMethodsRequest {

              constructor(props) {
                this.currency = props && props.currency;
                this.country = props && props.country;
                this.minCycle = props && props.minCycle;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.currency != null) {
                    $root.google.protobuf.StringValue.verify(msg.currency, helper, errors.field('currency'));
                  }
                  if (msg.country != null) {
                    $root.google.protobuf.StringValue.verify(msg.country, helper, errors.field('country'));
                  }
                  if (msg.minCycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.minCycle, helper, errors.field('minCycle'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.currency != null) {
                    json.currency = $root.google.protobuf.StringValue.toJSON(obj.currency, helper);
                  }
                  if (obj.country != null) {
                    json.country = $root.google.protobuf.StringValue.toJSON(obj.country, helper);
                  }
                  if (obj.minCycle != null) {
                    json.minCycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.minCycle, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListPaymentMethodsRequest();

                if (json.currency != null) {
                  result.currency = $root.google.protobuf.StringValue.fromJSON(json.currency, helper);
                } else {
                  delete result.currency;
                }
                if (json.country != null) {
                  result.country = $root.google.protobuf.StringValue.fromJSON(json.country, helper);
                } else {
                  delete result.country;
                }
                if (json.minCycle != null) {
                  result.minCycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.minCycle, helper);
                } else {
                  delete result.minCycle;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.currency != null) {
                    grpc.currency = $root.google.protobuf.StringValue.toGRPC(obj.currency, helper);
                  }
                  if (obj.country != null) {
                    grpc.country = $root.google.protobuf.StringValue.toGRPC(obj.country, helper);
                  }
                  if (obj.minCycle != null) {
                    grpc.minCycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.minCycle, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListPaymentMethodsRequest();

                  if (grpc.currency != null) {
                    result.currency = $root.google.protobuf.StringValue.fromGRPC(grpc.currency, helper);
                  } else {
                    delete result.currency;
                  }
                  if (grpc.country != null) {
                    result.country = $root.google.protobuf.StringValue.fromGRPC(grpc.country, helper);
                  } else {
                    delete result.country;
                  }
                  if (grpc.minCycle != null) {
                    result.minCycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.minCycle, helper);
                  } else {
                    delete result.minCycle;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'currency': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'country': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'COUNTRY'
                      }
                    },
                    'minCycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListPaymentMethodsRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListPaymentMethodsRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListPaymentMethodsRequest;
          }());
          v1.ListPaymentMethodsResponse = (function() {

            class ListPaymentMethodsResponse {

              constructor(props) {
                this.localPaymentMethods = props && props.localPaymentMethods;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.localPaymentMethods != null) {
                    const fieldErrors = errors.field('localPaymentMethods');

                    if (!Array.isArray(msg.localPaymentMethods)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.localPaymentMethods.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.LocalPaymentMethods.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.localPaymentMethods != null) {
                    json.localPaymentMethods = obj.localPaymentMethods.map(e => {
                      return $root.com.wixpress.billing.api.v1.LocalPaymentMethods.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListPaymentMethodsResponse();

                if (json.localPaymentMethods != null) {
                  result.localPaymentMethods = json.localPaymentMethods.map(e => {
                    return $root.com.wixpress.billing.api.v1.LocalPaymentMethods.fromJSON(e, helper);
                  });
                } else {
                  result.localPaymentMethods = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.localPaymentMethods != null) {
                    grpc.localPaymentMethods = obj.localPaymentMethods.map(e => {
                      return $root.com.wixpress.billing.api.v1.LocalPaymentMethods.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListPaymentMethodsResponse();

                  if (grpc.localPaymentMethods != null) {
                    result.localPaymentMethods = grpc.localPaymentMethods.map(e => {
                      return $root.com.wixpress.billing.api.v1.LocalPaymentMethods.fromGRPC(e, helper);
                    });
                  } else {
                    result.localPaymentMethods = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'localPaymentMethods': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.LocalPaymentMethods,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListPaymentMethodsResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListPaymentMethodsResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListPaymentMethodsResponse;
          }());
          v1.PaymentSourceService = (function() {

            class PaymentSourceService {

              constructor() {
                if (this.constructor.name === PaymentSourceService.name) {
                  throw new TypeError('class PaymentSourceService is abstract');
                }
              }

              listPaymentSources(aspects, msg) {
                throw new TypeError('method listPaymentSources is abstract');
              }

              getPaymentSource(aspects, msg) {
                throw new TypeError('method getPaymentSource is abstract');
              }

              createPaymentSource(aspects, msg) {
                throw new TypeError('method createPaymentSource is abstract');
              }

              updatePaymentSource(aspects, msg) {
                throw new TypeError('method updatePaymentSource is abstract');
              }

              deletePaymentSource(aspects, msg) {
                throw new TypeError('method deletePaymentSource is abstract');
              }
            }

            PaymentSourceService.prototype.listPaymentSources._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListPaymentSourcesRequest,
                $root.com.wixpress.billing.api.v1.ListPaymentSourcesResponse
              ];
            };
            PaymentSourceService.prototype.getPaymentSource._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetPaymentSourceRequest,
                $root.com.wixpress.billing.api.v1.GetPaymentSourceResponse
              ];
            };
            PaymentSourceService.prototype.createPaymentSource._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CreatePaymentSourceRequest,
                $root.com.wixpress.billing.api.v1.CreatePaymentSourceResponse
              ];
            };
            PaymentSourceService.prototype.updatePaymentSource._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.UpdatePaymentSourceRequest,
                $root.com.wixpress.billing.api.v1.UpdatePaymentSourceResponse
              ];
            };
            PaymentSourceService.prototype.deletePaymentSource._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.DeletePaymentSourceRequest,
                $root.com.wixpress.billing.api.v1.DeletePaymentSourceResponse
              ];
            };
            PaymentSourceService.prototype.listPaymentSources.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService.ListPaymentSources');
            };
            PaymentSourceService.prototype.getPaymentSource.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService.GetPaymentSource');
            };
            PaymentSourceService.prototype.createPaymentSource.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService.CreatePaymentSource');
            };
            PaymentSourceService.prototype.updatePaymentSource.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService.UpdatePaymentSource');
            };
            PaymentSourceService.prototype.deletePaymentSource.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService.DeletePaymentSource');
            };
            Object.defineProperty(PaymentSourceService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentSourceService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.PaymentSourceService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentSourceService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.PaymentSourceService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(PaymentSourceService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return PaymentSourceService;
          }());
          v1.ListPaymentSourcesRequest = (function() {

            class ListPaymentSourcesRequest {

              constructor(props) {
                this.query = props && props.query;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.query != null) {
                    $root.wix.common.Query.verify(msg.query, helper, errors.field('query'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.query != null) {
                    json.query = $root.wix.common.Query.toJSON(obj.query, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListPaymentSourcesRequest();

                if (json.query != null) {
                  result.query = $root.wix.common.Query.fromJSON(json.query, helper);
                } else {
                  delete result.query;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.query != null) {
                    grpc.query = $root.wix.common.Query.toGRPC(obj.query, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListPaymentSourcesRequest();

                  if (grpc.query != null) {
                    result.query = $root.wix.common.Query.fromGRPC(grpc.query, helper);
                  } else {
                    delete result.query;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'query': {
                      'type': $root.wix.common.Query,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListPaymentSourcesRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListPaymentSourcesRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListPaymentSourcesRequest;
          }());
          v1.ListPaymentSourcesResponse = (function() {

            class ListPaymentSourcesResponse {

              constructor(props) {
                this.paymentSources = props && props.paymentSources;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSources != null) {
                    const fieldErrors = errors.field('paymentSources');

                    if (!Array.isArray(msg.paymentSources)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.paymentSources.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.PaymentSource.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSources != null) {
                    json.paymentSources = obj.paymentSources.map(e => {
                      return $root.com.wixpress.billing.api.v1.PaymentSource.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListPaymentSourcesResponse();

                if (json.paymentSources != null) {
                  result.paymentSources = json.paymentSources.map(e => {
                    return $root.com.wixpress.billing.api.v1.PaymentSource.fromJSON(e, helper);
                  });
                } else {
                  result.paymentSources = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSources != null) {
                    grpc.paymentSources = obj.paymentSources.map(e => {
                      return $root.com.wixpress.billing.api.v1.PaymentSource.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListPaymentSourcesResponse();

                  if (grpc.paymentSources != null) {
                    result.paymentSources = grpc.paymentSources.map(e => {
                      return $root.com.wixpress.billing.api.v1.PaymentSource.fromGRPC(e, helper);
                    });
                  } else {
                    result.paymentSources = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSources': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListPaymentSourcesResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListPaymentSourcesResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListPaymentSourcesResponse;
          }());
          v1.GetPaymentSourceRequest = (function() {

            class GetPaymentSourceRequest {

              constructor(props) {
                this.paymentSourceId = props && props.paymentSourceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetPaymentSourceRequest();

                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetPaymentSourceRequest();

                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetPaymentSourceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetPaymentSourceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetPaymentSourceRequest;
          }());
          v1.GetPaymentSourceResponse = (function() {

            class GetPaymentSourceResponse {

              constructor(props) {
                this.paymentSource = props && props.paymentSource;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSource != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSource.verify(msg.paymentSource, helper, errors.field('paymentSource'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSource != null) {
                    json.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toJSON(obj.paymentSource, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetPaymentSourceResponse();

                if (json.paymentSource != null) {
                  result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromJSON(json.paymentSource, helper);
                } else {
                  delete result.paymentSource;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSource != null) {
                    grpc.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toGRPC(obj.paymentSource, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetPaymentSourceResponse();

                  if (grpc.paymentSource != null) {
                    result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromGRPC(grpc.paymentSource, helper);
                  } else {
                    delete result.paymentSource;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSource': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetPaymentSourceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetPaymentSourceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetPaymentSourceResponse;
          }());
          v1.CreatePaymentSourceRequest = (function() {

            class CreatePaymentSourceRequest {

              constructor(props) {
                this.paymentSourceDetails = props && props.paymentSourceDetails;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSourceDetails != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSourceDetails.verify(msg.paymentSourceDetails, helper, errors.field('paymentSourceDetails'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSourceDetails != null) {
                    json.paymentSourceDetails = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.toJSON(obj.paymentSourceDetails, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreatePaymentSourceRequest();

                if (json.paymentSourceDetails != null) {
                  result.paymentSourceDetails = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.fromJSON(json.paymentSourceDetails, helper);
                } else {
                  delete result.paymentSourceDetails;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSourceDetails != null) {
                    grpc.paymentSourceDetails = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.toGRPC(obj.paymentSourceDetails, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreatePaymentSourceRequest();

                  if (grpc.paymentSourceDetails != null) {
                    result.paymentSourceDetails = $root.com.wixpress.billing.api.v1.PaymentSourceDetails.fromGRPC(grpc.paymentSourceDetails, helper);
                  } else {
                    delete result.paymentSourceDetails;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSourceDetails': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSourceDetails,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreatePaymentSourceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreatePaymentSourceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CreatePaymentSourceRequest;
          }());
          v1.CreatePaymentSourceResponse = (function() {

            class CreatePaymentSourceResponse {

              constructor(props) {
                this.paymentSource = props && props.paymentSource;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSource != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSource.verify(msg.paymentSource, helper, errors.field('paymentSource'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSource != null) {
                    json.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toJSON(obj.paymentSource, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreatePaymentSourceResponse();

                if (json.paymentSource != null) {
                  result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromJSON(json.paymentSource, helper);
                } else {
                  delete result.paymentSource;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSource != null) {
                    grpc.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toGRPC(obj.paymentSource, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreatePaymentSourceResponse();

                  if (grpc.paymentSource != null) {
                    result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromGRPC(grpc.paymentSource, helper);
                  } else {
                    delete result.paymentSource;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSource': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreatePaymentSourceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreatePaymentSourceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CreatePaymentSourceResponse;
          }());
          v1.UpdatePaymentSourceRequest = (function() {

            class UpdatePaymentSourceRequest {

              constructor(props) {
                this.paymentSource = props && props.paymentSource;
                this.fieldMask = props && props.fieldMask;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSource != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSource.verify(msg.paymentSource, helper, errors.field('paymentSource'));
                  }
                  if (msg.fieldMask != null) {
                    $root.google.protobuf.FieldMask.verify(msg.fieldMask, helper, errors.field('fieldMask'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSource != null) {
                    json.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toJSON(obj.paymentSource, helper);
                  }
                  if (obj.fieldMask != null) {
                    json.fieldMask = $root.google.protobuf.FieldMask.toJSON(obj.fieldMask, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdatePaymentSourceRequest();

                if (json.paymentSource != null) {
                  result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromJSON(json.paymentSource, helper);
                } else {
                  delete result.paymentSource;
                }
                if (json.fieldMask != null) {
                  result.fieldMask = $root.google.protobuf.FieldMask.fromJSON(json.fieldMask, helper);
                } else {
                  delete result.fieldMask;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSource != null) {
                    grpc.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toGRPC(obj.paymentSource, helper);
                  }
                  if (obj.fieldMask != null) {
                    grpc.fieldMask = $root.google.protobuf.FieldMask.toGRPC(obj.fieldMask, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdatePaymentSourceRequest();

                  if (grpc.paymentSource != null) {
                    result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromGRPC(grpc.paymentSource, helper);
                  } else {
                    delete result.paymentSource;
                  }
                  if (grpc.fieldMask != null) {
                    result.fieldMask = $root.google.protobuf.FieldMask.fromGRPC(grpc.fieldMask, helper);
                  } else {
                    delete result.fieldMask;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSource': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource,
                      'id': 1
                    },
                    'fieldMask': {
                      'type': $root.google.protobuf.FieldMask,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdatePaymentSourceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdatePaymentSourceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return UpdatePaymentSourceRequest;
          }());
          v1.UpdatePaymentSourceResponse = (function() {

            class UpdatePaymentSourceResponse {

              constructor(props) {
                this.paymentSource = props && props.paymentSource;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSource != null) {
                    $root.com.wixpress.billing.api.v1.PaymentSource.verify(msg.paymentSource, helper, errors.field('paymentSource'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSource != null) {
                    json.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toJSON(obj.paymentSource, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdatePaymentSourceResponse();

                if (json.paymentSource != null) {
                  result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromJSON(json.paymentSource, helper);
                } else {
                  delete result.paymentSource;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSource != null) {
                    grpc.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.toGRPC(obj.paymentSource, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdatePaymentSourceResponse();

                  if (grpc.paymentSource != null) {
                    result.paymentSource = $root.com.wixpress.billing.api.v1.PaymentSource.fromGRPC(grpc.paymentSource, helper);
                  } else {
                    delete result.paymentSource;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSource': {
                      'type': $root.com.wixpress.billing.api.v1.PaymentSource,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdatePaymentSourceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdatePaymentSourceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return UpdatePaymentSourceResponse;
          }());
          v1.DeletePaymentSourceRequest = (function() {

            class DeletePaymentSourceRequest {

              constructor(props) {
                this.paymentSourceId = props && props.paymentSourceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeletePaymentSourceRequest();

                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeletePaymentSourceRequest();

                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(DeletePaymentSourceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeletePaymentSourceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return DeletePaymentSourceRequest;
          }());
          v1.DeletePaymentSourceResponse = (function() {

            class DeletePaymentSourceResponse {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeletePaymentSourceResponse();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeletePaymentSourceResponse();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(DeletePaymentSourceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeletePaymentSourceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return DeletePaymentSourceResponse;
          }());
          v1.Product = (function() {

            class Product {

              constructor(props) {
                this.productId = props && props.productId;
                this.vendorId = props && props.vendorId;
                this.name = props && props.name;
                this.shippable = props && props.shippable;
                this.active = props && props.active;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productId != null) {
                    $root.google.protobuf.StringValue.verify(msg.productId, helper, errors.field('productId'));
                  }
                  if (msg.vendorId != null) {
                    $root.google.protobuf.StringValue.verify(msg.vendorId, helper, errors.field('vendorId'));
                  }
                  if (msg.name != null) {
                    if (typeof msg.name !== 'string') {
                      errors.field('name').error('string expected');
                    }
                  }
                  if (msg.shippable != null) {
                    if (typeof msg.shippable !== 'boolean') {
                      errors.field('shippable').error('boolean expected');
                    }
                  }
                  if (msg.active != null) {
                    if (typeof msg.active !== 'boolean') {
                      errors.field('active').error('boolean expected');
                    }
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productId != null) {
                    json.productId = $root.google.protobuf.StringValue.toJSON(obj.productId, helper);
                  }
                  if (obj.vendorId != null) {
                    json.vendorId = $root.google.protobuf.StringValue.toJSON(obj.vendorId, helper);
                  }
                  if (obj.name != null) {
                    json.name = obj.name;
                  }
                  if (obj.shippable != null) {
                    json.shippable = obj.shippable;
                  }
                  if (obj.active != null) {
                    json.active = obj.active;
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Product();

                if (json.productId != null) {
                  result.productId = $root.google.protobuf.StringValue.fromJSON(json.productId, helper);
                } else {
                  delete result.productId;
                }
                if (json.vendorId != null) {
                  result.vendorId = $root.google.protobuf.StringValue.fromJSON(json.vendorId, helper);
                } else {
                  delete result.vendorId;
                }
                if (json.name != null) {
                  result.name = json.name;
                } else {
                  result.name = '';
                }
                if (json.shippable != null) {
                  result.shippable = json.shippable;
                } else {
                  result.shippable = false;
                }
                if (json.active != null) {
                  result.active = json.active;
                } else {
                  result.active = false;
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productId != null) {
                    grpc.productId = $root.google.protobuf.StringValue.toGRPC(obj.productId, helper);
                  }
                  if (obj.vendorId != null) {
                    grpc.vendorId = $root.google.protobuf.StringValue.toGRPC(obj.vendorId, helper);
                  }
                  if (obj.name != null) {
                    grpc.name = obj.name;
                  }
                  if (obj.shippable != null) {
                    grpc.shippable = obj.shippable;
                  }
                  if (obj.active != null) {
                    grpc.active = obj.active;
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Product();

                  if (grpc.productId != null) {
                    result.productId = $root.google.protobuf.StringValue.fromGRPC(grpc.productId, helper);
                  } else {
                    delete result.productId;
                  }
                  if (grpc.vendorId != null) {
                    result.vendorId = $root.google.protobuf.StringValue.fromGRPC(grpc.vendorId, helper);
                  } else {
                    delete result.vendorId;
                  }
                  if (grpc.name != null) {
                    result.name = grpc.name;
                  } else {
                    result.name = '';
                  }
                  if (grpc.shippable != null) {
                    result.shippable = grpc.shippable;
                  } else {
                    result.shippable = false;
                  }
                  if (grpc.active != null) {
                    result.active = grpc.active;
                  } else {
                    result.active = false;
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'vendorId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'name': {
                      'type': 'string',
                      'id': 3
                    },
                    'shippable': {
                      'type': 'bool',
                      'id': 4
                    },
                    'active': {
                      'type': 'bool',
                      'id': 5
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 6
                    }
                  }
                };
              }
            }

            Object.defineProperty(Product.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Product');
              },
              enumerable: false,
              configurable: false
            });
            return Product;
          }());
          v1.ProductPricePlan = (function() {

            class ProductPricePlan {

              constructor(props) {
                this.productPricePlanId = props && props.productPricePlanId;
                this.productId = props && props.productId;
                this.currency = props && props.currency;
                this.amount = props && props.amount;
                this.cycle = props && props.cycle;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlanId != null) {
                    $root.google.protobuf.StringValue.verify(msg.productPricePlanId, helper, errors.field('productPricePlanId'));
                  }
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.amount != null) {
                    if (!Number.isInteger(msg.amount) && !Long.isLong(msg.amount)) {
                      errors.field('amount').error('long or integer expected');
                    }
                  }
                  if (msg.cycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.cycle, helper, errors.field('cycle'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlanId != null) {
                    json.productPricePlanId = $root.google.protobuf.StringValue.toJSON(obj.productPricePlanId, helper);
                  }
                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.amount != null) {
                    json.amount = obj.amount.toString();
                  }
                  if (obj.cycle != null) {
                    json.cycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.cycle, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ProductPricePlan();

                if (json.productPricePlanId != null) {
                  result.productPricePlanId = $root.google.protobuf.StringValue.fromJSON(json.productPricePlanId, helper);
                } else {
                  delete result.productPricePlanId;
                }
                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.amount != null) {
                  result.amount = Long.fromValue(json.amount);
                } else {
                  result.amount = Long.ZERO;
                }
                if (json.cycle != null) {
                  result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.cycle, helper);
                } else {
                  delete result.cycle;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlanId != null) {
                    grpc.productPricePlanId = $root.google.protobuf.StringValue.toGRPC(obj.productPricePlanId, helper);
                  }
                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.amount != null) {
                    grpc.amount = obj.amount.toString();
                  }
                  if (obj.cycle != null) {
                    grpc.cycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.cycle, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ProductPricePlan();

                  if (grpc.productPricePlanId != null) {
                    result.productPricePlanId = $root.google.protobuf.StringValue.fromGRPC(grpc.productPricePlanId, helper);
                  } else {
                    delete result.productPricePlanId;
                  }
                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.amount != null) {
                    result.amount = Long.fromValue(grpc.amount);
                  } else {
                    result.amount = Long.ZERO;
                  }
                  if (grpc.cycle != null) {
                    result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.cycle, helper);
                  } else {
                    delete result.cycle;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlanId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'productId': {
                      'type': 'string',
                      'id': 3,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'currency': {
                      'type': 'string',
                      'id': 4,
                      'options': {
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'amount': {
                      'type': 'int64',
                      'id': 5
                    },
                    'cycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 6
                    }
                  }
                };
              }
            }

            Object.defineProperty(ProductPricePlan.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlan');
              },
              enumerable: false,
              configurable: false
            });
            return ProductPricePlan;
          }());
          v1.ProductPricePlanService = (function() {

            class ProductPricePlanService {

              constructor() {
                if (this.constructor.name === ProductPricePlanService.name) {
                  throw new TypeError('class ProductPricePlanService is abstract');
                }
              }

              listProductPricePlans(aspects, msg) {
                throw new TypeError('method listProductPricePlans is abstract');
              }

              createProductPricePlan(aspects, msg) {
                throw new TypeError('method createProductPricePlan is abstract');
              }

              updateProductPricePlan(aspects, msg) {
                throw new TypeError('method updateProductPricePlan is abstract');
              }

              deleteProductPricePlan(aspects, msg) {
                throw new TypeError('method deleteProductPricePlan is abstract');
              }
            }

            ProductPricePlanService.prototype.listProductPricePlans._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListProductPricePlansRequest,
                $root.com.wixpress.billing.api.v1.ListProductPricePlansResponse
              ];
            };
            ProductPricePlanService.prototype.createProductPricePlan._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CreateProductPricePlanRequest,
                $root.com.wixpress.billing.api.v1.CreateProductPricePlanResponse
              ];
            };
            ProductPricePlanService.prototype.updateProductPricePlan._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.UpdateProductPricePlanRequest,
                $root.com.wixpress.billing.api.v1.UpdateProductPricePlanResponse
              ];
            };
            ProductPricePlanService.prototype.deleteProductPricePlan._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.DeleteProductPricePlanRequest,
                $root.com.wixpress.billing.api.v1.DeleteProductPricePlanResponse
              ];
            };
            ProductPricePlanService.prototype.listProductPricePlans.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlanService.ListProductPricePlans');
            };
            ProductPricePlanService.prototype.createProductPricePlan.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlanService.CreateProductPricePlan');
            };
            ProductPricePlanService.prototype.updateProductPricePlan.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlanService.UpdateProductPricePlan');
            };
            ProductPricePlanService.prototype.deleteProductPricePlan.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlanService.DeleteProductPricePlan');
            };
            Object.defineProperty(ProductPricePlanService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductPricePlanService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.ProductPricePlanService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductPricePlanService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductPricePlanService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductPricePlanService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return ProductPricePlanService;
          }());
          v1.ListProductPricePlansRequest = (function() {

            class ListProductPricePlansRequest {

              constructor(props) {
                this.productId = props && props.productId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListProductPricePlansRequest();

                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListProductPricePlansRequest();

                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListProductPricePlansRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListProductPricePlansRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListProductPricePlansRequest;
          }());
          v1.ListProductPricePlansResponse = (function() {

            class ListProductPricePlansResponse {

              constructor(props) {
                this.productPricePlans = props && props.productPricePlans;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlans != null) {
                    const fieldErrors = errors.field('productPricePlans');

                    if (!Array.isArray(msg.productPricePlans)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.productPricePlans.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.ProductPricePlan.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlans != null) {
                    json.productPricePlans = obj.productPricePlans.map(e => {
                      return $root.com.wixpress.billing.api.v1.ProductPricePlan.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListProductPricePlansResponse();

                if (json.productPricePlans != null) {
                  result.productPricePlans = json.productPricePlans.map(e => {
                    return $root.com.wixpress.billing.api.v1.ProductPricePlan.fromJSON(e, helper);
                  });
                } else {
                  result.productPricePlans = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlans != null) {
                    grpc.productPricePlans = obj.productPricePlans.map(e => {
                      return $root.com.wixpress.billing.api.v1.ProductPricePlan.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListProductPricePlansResponse();

                  if (grpc.productPricePlans != null) {
                    result.productPricePlans = grpc.productPricePlans.map(e => {
                      return $root.com.wixpress.billing.api.v1.ProductPricePlan.fromGRPC(e, helper);
                    });
                  } else {
                    result.productPricePlans = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlans': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.ProductPricePlan,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListProductPricePlansResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListProductPricePlansResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListProductPricePlansResponse;
          }());
          v1.CreateProductPricePlanRequest = (function() {

            class CreateProductPricePlanRequest {

              constructor(props) {
                this.productPricePlan = props && props.productPricePlan;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlan != null) {
                    $root.com.wixpress.billing.api.v1.ProductPricePlan.verify(msg.productPricePlan, helper, errors.field('productPricePlan'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlan != null) {
                    json.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toJSON(obj.productPricePlan, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateProductPricePlanRequest();

                if (json.productPricePlan != null) {
                  result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromJSON(json.productPricePlan, helper);
                } else {
                  delete result.productPricePlan;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlan != null) {
                    grpc.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toGRPC(obj.productPricePlan, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateProductPricePlanRequest();

                  if (grpc.productPricePlan != null) {
                    result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromGRPC(grpc.productPricePlan, helper);
                  } else {
                    delete result.productPricePlan;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlan': {
                      'type': $root.com.wixpress.billing.api.v1.ProductPricePlan,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateProductPricePlanRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateProductPricePlanRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CreateProductPricePlanRequest;
          }());
          v1.CreateProductPricePlanResponse = (function() {

            class CreateProductPricePlanResponse {

              constructor(props) {
                this.productPricePlan = props && props.productPricePlan;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlan != null) {
                    $root.com.wixpress.billing.api.v1.ProductPricePlan.verify(msg.productPricePlan, helper, errors.field('productPricePlan'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlan != null) {
                    json.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toJSON(obj.productPricePlan, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateProductPricePlanResponse();

                if (json.productPricePlan != null) {
                  result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromJSON(json.productPricePlan, helper);
                } else {
                  delete result.productPricePlan;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlan != null) {
                    grpc.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toGRPC(obj.productPricePlan, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateProductPricePlanResponse();

                  if (grpc.productPricePlan != null) {
                    result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromGRPC(grpc.productPricePlan, helper);
                  } else {
                    delete result.productPricePlan;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlan': {
                      'type': $root.com.wixpress.billing.api.v1.ProductPricePlan,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateProductPricePlanResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateProductPricePlanResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CreateProductPricePlanResponse;
          }());
          v1.UpdateProductPricePlanRequest = (function() {

            class UpdateProductPricePlanRequest {

              constructor(props) {
                this.productPricePlan = props && props.productPricePlan;
                this.fieldMask = props && props.fieldMask;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlan != null) {
                    $root.com.wixpress.billing.api.v1.ProductPricePlan.verify(msg.productPricePlan, helper, errors.field('productPricePlan'));
                  }
                  if (msg.fieldMask != null) {
                    $root.google.protobuf.FieldMask.verify(msg.fieldMask, helper, errors.field('fieldMask'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlan != null) {
                    json.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toJSON(obj.productPricePlan, helper);
                  }
                  if (obj.fieldMask != null) {
                    json.fieldMask = $root.google.protobuf.FieldMask.toJSON(obj.fieldMask, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateProductPricePlanRequest();

                if (json.productPricePlan != null) {
                  result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromJSON(json.productPricePlan, helper);
                } else {
                  delete result.productPricePlan;
                }
                if (json.fieldMask != null) {
                  result.fieldMask = $root.google.protobuf.FieldMask.fromJSON(json.fieldMask, helper);
                } else {
                  delete result.fieldMask;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlan != null) {
                    grpc.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toGRPC(obj.productPricePlan, helper);
                  }
                  if (obj.fieldMask != null) {
                    grpc.fieldMask = $root.google.protobuf.FieldMask.toGRPC(obj.fieldMask, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateProductPricePlanRequest();

                  if (grpc.productPricePlan != null) {
                    result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromGRPC(grpc.productPricePlan, helper);
                  } else {
                    delete result.productPricePlan;
                  }
                  if (grpc.fieldMask != null) {
                    result.fieldMask = $root.google.protobuf.FieldMask.fromGRPC(grpc.fieldMask, helper);
                  } else {
                    delete result.fieldMask;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlan': {
                      'type': $root.com.wixpress.billing.api.v1.ProductPricePlan,
                      'id': 1
                    },
                    'fieldMask': {
                      'type': $root.google.protobuf.FieldMask,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateProductPricePlanRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateProductPricePlanRequest');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateProductPricePlanRequest;
          }());
          v1.UpdateProductPricePlanResponse = (function() {

            class UpdateProductPricePlanResponse {

              constructor(props) {
                this.productPricePlan = props && props.productPricePlan;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productPricePlan != null) {
                    $root.com.wixpress.billing.api.v1.ProductPricePlan.verify(msg.productPricePlan, helper, errors.field('productPricePlan'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productPricePlan != null) {
                    json.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toJSON(obj.productPricePlan, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateProductPricePlanResponse();

                if (json.productPricePlan != null) {
                  result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromJSON(json.productPricePlan, helper);
                } else {
                  delete result.productPricePlan;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productPricePlan != null) {
                    grpc.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.toGRPC(obj.productPricePlan, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateProductPricePlanResponse();

                  if (grpc.productPricePlan != null) {
                    result.productPricePlan = $root.com.wixpress.billing.api.v1.ProductPricePlan.fromGRPC(grpc.productPricePlan, helper);
                  } else {
                    delete result.productPricePlan;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productPricePlan': {
                      'type': $root.com.wixpress.billing.api.v1.ProductPricePlan,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateProductPricePlanResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateProductPricePlanResponse');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateProductPricePlanResponse;
          }());
          v1.DeleteProductPricePlanRequest = (function() {

            class DeleteProductPricePlanRequest {

              constructor(props) {
                this.productId = props && props.productId;
                this.productPricePlanId = props && props.productPricePlanId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                  if (msg.productPricePlanId != null) {
                    if (typeof msg.productPricePlanId !== 'string') {
                      errors.field('productPricePlanId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  if (obj.productPricePlanId != null) {
                    json.productPricePlanId = obj.productPricePlanId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeleteProductPricePlanRequest();

                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                if (json.productPricePlanId != null) {
                  result.productPricePlanId = json.productPricePlanId;
                } else {
                  result.productPricePlanId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  if (obj.productPricePlanId != null) {
                    grpc.productPricePlanId = obj.productPricePlanId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeleteProductPricePlanRequest();

                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  if (grpc.productPricePlanId != null) {
                    result.productPricePlanId = grpc.productPricePlanId;
                  } else {
                    result.productPricePlanId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'productPricePlanId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(DeleteProductPricePlanRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeleteProductPricePlanRequest');
              },
              enumerable: false,
              configurable: false
            });
            return DeleteProductPricePlanRequest;
          }());
          v1.DeleteProductPricePlanResponse = (function() {

            class DeleteProductPricePlanResponse {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeleteProductPricePlanResponse();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeleteProductPricePlanResponse();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(DeleteProductPricePlanResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeleteProductPricePlanResponse');
              },
              enumerable: false,
              configurable: false
            });
            return DeleteProductPricePlanResponse;
          }());
          v1.ProductService = (function() {

            class ProductService {

              constructor() {
                if (this.constructor.name === ProductService.name) {
                  throw new TypeError('class ProductService is abstract');
                }
              }

              listProducts(aspects, msg) {
                throw new TypeError('method listProducts is abstract');
              }

              getProduct(aspects, msg) {
                throw new TypeError('method getProduct is abstract');
              }

              createProduct(aspects, msg) {
                throw new TypeError('method createProduct is abstract');
              }

              updateProduct(aspects, msg) {
                throw new TypeError('method updateProduct is abstract');
              }

              deleteProduct(aspects, msg) {
                throw new TypeError('method deleteProduct is abstract');
              }
            }

            ProductService.prototype.listProducts._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListProductsRequest,
                $root.com.wixpress.billing.api.v1.ListProductsResponse
              ];
            };
            ProductService.prototype.getProduct._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetProductRequest,
                $root.com.wixpress.billing.api.v1.GetProductResponse
              ];
            };
            ProductService.prototype.createProduct._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.CreateProductRequest,
                $root.com.wixpress.billing.api.v1.CreateProductResponse
              ];
            };
            ProductService.prototype.updateProduct._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.UpdateProductRequest,
                $root.com.wixpress.billing.api.v1.UpdateProductResponse
              ];
            };
            ProductService.prototype.deleteProduct._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.DeleteProductRequest,
                $root.com.wixpress.billing.api.v1.DeleteProductResponse
              ];
            };
            ProductService.prototype.listProducts.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService.ListProducts');
            };
            ProductService.prototype.getProduct.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService.GetProduct');
            };
            ProductService.prototype.createProduct.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService.CreateProduct');
            };
            ProductService.prototype.updateProduct.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService.UpdateProduct');
            };
            ProductService.prototype.deleteProduct.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService.DeleteProduct');
            };
            Object.defineProperty(ProductService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.ProductService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ProductService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ProductService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return ProductService;
          }());
          v1.ListProductsRequest = (function() {

            class ListProductsRequest {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListProductsRequest();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListProductsRequest();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(ListProductsRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListProductsRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListProductsRequest;
          }());
          v1.ListProductsResponse = (function() {

            class ListProductsResponse {

              constructor(props) {
                this.products = props && props.products;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.products != null) {
                    const fieldErrors = errors.field('products');

                    if (!Array.isArray(msg.products)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.products.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Product.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.products != null) {
                    json.products = obj.products.map(e => {
                      return $root.com.wixpress.billing.api.v1.Product.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListProductsResponse();

                if (json.products != null) {
                  result.products = json.products.map(e => {
                    return $root.com.wixpress.billing.api.v1.Product.fromJSON(e, helper);
                  });
                } else {
                  result.products = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.products != null) {
                    grpc.products = obj.products.map(e => {
                      return $root.com.wixpress.billing.api.v1.Product.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListProductsResponse();

                  if (grpc.products != null) {
                    result.products = grpc.products.map(e => {
                      return $root.com.wixpress.billing.api.v1.Product.fromGRPC(e, helper);
                    });
                  } else {
                    result.products = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'products': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListProductsResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListProductsResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListProductsResponse;
          }());
          v1.GetProductRequest = (function() {

            class GetProductRequest {

              constructor(props) {
                this.productId = props && props.productId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetProductRequest();

                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetProductRequest();

                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetProductRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetProductRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetProductRequest;
          }());
          v1.GetProductResponse = (function() {

            class GetProductResponse {

              constructor(props) {
                this.product = props && props.product;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.product != null) {
                    $root.com.wixpress.billing.api.v1.Product.verify(msg.product, helper, errors.field('product'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.product != null) {
                    json.product = $root.com.wixpress.billing.api.v1.Product.toJSON(obj.product, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetProductResponse();

                if (json.product != null) {
                  result.product = $root.com.wixpress.billing.api.v1.Product.fromJSON(json.product, helper);
                } else {
                  delete result.product;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.product != null) {
                    grpc.product = $root.com.wixpress.billing.api.v1.Product.toGRPC(obj.product, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetProductResponse();

                  if (grpc.product != null) {
                    result.product = $root.com.wixpress.billing.api.v1.Product.fromGRPC(grpc.product, helper);
                  } else {
                    delete result.product;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'product': {
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetProductResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetProductResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetProductResponse;
          }());
          v1.CreateProductRequest = (function() {

            class CreateProductRequest {

              constructor(props) {
                this.product = props && props.product;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.product != null) {
                    $root.com.wixpress.billing.api.v1.Product.verify(msg.product, helper, errors.field('product'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.product != null) {
                    json.product = $root.com.wixpress.billing.api.v1.Product.toJSON(obj.product, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateProductRequest();

                if (json.product != null) {
                  result.product = $root.com.wixpress.billing.api.v1.Product.fromJSON(json.product, helper);
                } else {
                  delete result.product;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.product != null) {
                    grpc.product = $root.com.wixpress.billing.api.v1.Product.toGRPC(obj.product, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateProductRequest();

                  if (grpc.product != null) {
                    result.product = $root.com.wixpress.billing.api.v1.Product.fromGRPC(grpc.product, helper);
                  } else {
                    delete result.product;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'product': {
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateProductRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateProductRequest');
              },
              enumerable: false,
              configurable: false
            });
            return CreateProductRequest;
          }());
          v1.CreateProductResponse = (function() {

            class CreateProductResponse {

              constructor(props) {
                this.product = props && props.product;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.product != null) {
                    $root.com.wixpress.billing.api.v1.Product.verify(msg.product, helper, errors.field('product'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.product != null) {
                    json.product = $root.com.wixpress.billing.api.v1.Product.toJSON(obj.product, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.CreateProductResponse();

                if (json.product != null) {
                  result.product = $root.com.wixpress.billing.api.v1.Product.fromJSON(json.product, helper);
                } else {
                  delete result.product;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.product != null) {
                    grpc.product = $root.com.wixpress.billing.api.v1.Product.toGRPC(obj.product, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.CreateProductResponse();

                  if (grpc.product != null) {
                    result.product = $root.com.wixpress.billing.api.v1.Product.fromGRPC(grpc.product, helper);
                  } else {
                    delete result.product;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'product': {
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(CreateProductResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.CreateProductResponse');
              },
              enumerable: false,
              configurable: false
            });
            return CreateProductResponse;
          }());
          v1.UpdateProductRequest = (function() {

            class UpdateProductRequest {

              constructor(props) {
                this.product = props && props.product;
                this.fieldMask = props && props.fieldMask;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.product != null) {
                    $root.com.wixpress.billing.api.v1.Product.verify(msg.product, helper, errors.field('product'));
                  }
                  if (msg.fieldMask != null) {
                    $root.google.protobuf.FieldMask.verify(msg.fieldMask, helper, errors.field('fieldMask'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.product != null) {
                    json.product = $root.com.wixpress.billing.api.v1.Product.toJSON(obj.product, helper);
                  }
                  if (obj.fieldMask != null) {
                    json.fieldMask = $root.google.protobuf.FieldMask.toJSON(obj.fieldMask, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateProductRequest();

                if (json.product != null) {
                  result.product = $root.com.wixpress.billing.api.v1.Product.fromJSON(json.product, helper);
                } else {
                  delete result.product;
                }
                if (json.fieldMask != null) {
                  result.fieldMask = $root.google.protobuf.FieldMask.fromJSON(json.fieldMask, helper);
                } else {
                  delete result.fieldMask;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.product != null) {
                    grpc.product = $root.com.wixpress.billing.api.v1.Product.toGRPC(obj.product, helper);
                  }
                  if (obj.fieldMask != null) {
                    grpc.fieldMask = $root.google.protobuf.FieldMask.toGRPC(obj.fieldMask, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateProductRequest();

                  if (grpc.product != null) {
                    result.product = $root.com.wixpress.billing.api.v1.Product.fromGRPC(grpc.product, helper);
                  } else {
                    delete result.product;
                  }
                  if (grpc.fieldMask != null) {
                    result.fieldMask = $root.google.protobuf.FieldMask.fromGRPC(grpc.fieldMask, helper);
                  } else {
                    delete result.fieldMask;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'product': {
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    },
                    'fieldMask': {
                      'type': $root.google.protobuf.FieldMask,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateProductRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateProductRequest');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateProductRequest;
          }());
          v1.UpdateProductResponse = (function() {

            class UpdateProductResponse {

              constructor(props) {
                this.product = props && props.product;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.product != null) {
                    $root.com.wixpress.billing.api.v1.Product.verify(msg.product, helper, errors.field('product'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.product != null) {
                    json.product = $root.com.wixpress.billing.api.v1.Product.toJSON(obj.product, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateProductResponse();

                if (json.product != null) {
                  result.product = $root.com.wixpress.billing.api.v1.Product.fromJSON(json.product, helper);
                } else {
                  delete result.product;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.product != null) {
                    grpc.product = $root.com.wixpress.billing.api.v1.Product.toGRPC(obj.product, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateProductResponse();

                  if (grpc.product != null) {
                    result.product = $root.com.wixpress.billing.api.v1.Product.fromGRPC(grpc.product, helper);
                  } else {
                    delete result.product;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'product': {
                      'type': $root.com.wixpress.billing.api.v1.Product,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateProductResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateProductResponse');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateProductResponse;
          }());
          v1.DeleteProductRequest = (function() {

            class DeleteProductRequest {

              constructor(props) {
                this.productId = props && props.productId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.productId != null) {
                    if (typeof msg.productId !== 'string') {
                      errors.field('productId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.productId != null) {
                    json.productId = obj.productId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeleteProductRequest();

                if (json.productId != null) {
                  result.productId = json.productId;
                } else {
                  result.productId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.productId != null) {
                    grpc.productId = obj.productId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeleteProductRequest();

                  if (grpc.productId != null) {
                    result.productId = grpc.productId;
                  } else {
                    result.productId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'productId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(DeleteProductRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeleteProductRequest');
              },
              enumerable: false,
              configurable: false
            });
            return DeleteProductRequest;
          }());
          v1.DeleteProductResponse = (function() {

            class DeleteProductResponse {

              constructor(props) {}

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (!(typeof msg === 'object' && !Array.isArray(msg) && Object.keys(msg).length === 0)) {
                    errors.error('empty object expected');
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.DeleteProductResponse();

                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.DeleteProductResponse();

                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {}
                };
              }
            }

            Object.defineProperty(DeleteProductResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.DeleteProductResponse');
              },
              enumerable: false,
              configurable: false
            });
            return DeleteProductResponse;
          }());
          v1.Service = (function() {

            class Service {

              constructor(props) {
                this.serviceId = props && props.serviceId;
                this.lastInvoiceId = props && props.lastInvoiceId;
                this.productId = props && props.productId;
                this.createdOn = props && props.createdOn;
                this.endOfPeriod = props && props.endOfPeriod;
                this.nextRenewal = props && props.nextRenewal;
                this.lastRenewal = props && props.lastRenewal;
                this.status = props && props.status;
                this.currency = props && props.currency;
                this.cycle = props && props.cycle;
                this.quantity = props && props.quantity;
                this.paymentSourceId = props && props.paymentSourceId;
                this.metadata = props && props.metadata;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.serviceId != null) {
                    $root.google.protobuf.StringValue.verify(msg.serviceId, helper, errors.field('serviceId'));
                  }
                  if (msg.lastInvoiceId != null) {
                    if (typeof msg.lastInvoiceId !== 'string') {
                      errors.field('lastInvoiceId').error('string expected');
                    }
                  }
                  if (msg.productId != null) {
                    $root.google.protobuf.StringValue.verify(msg.productId, helper, errors.field('productId'));
                  }
                  if (msg.createdOn != null) {
                    $root.google.protobuf.Timestamp.verify(msg.createdOn, helper, errors.field('createdOn'));
                  }
                  if (msg.endOfPeriod != null) {
                    $root.google.protobuf.Timestamp.verify(msg.endOfPeriod, helper, errors.field('endOfPeriod'));
                  }
                  if (msg.nextRenewal != null) {
                    $root.google.protobuf.Timestamp.verify(msg.nextRenewal, helper, errors.field('nextRenewal'));
                  }
                  if (msg.lastRenewal != null) {
                    $root.google.protobuf.Timestamp.verify(msg.lastRenewal, helper, errors.field('lastRenewal'));
                  }
                  if (msg.status != null) {
                    $root.com.wixpress.billing.api.v1.Service.ServiceStatus.verify(msg.status, helper, errors.field('status'));
                  }
                  if (msg.currency != null) {
                    if (typeof msg.currency !== 'string') {
                      errors.field('currency').error('string expected');
                    }
                  }
                  if (msg.cycle != null) {
                    $root.com.wixpress.billing.api.v1.Cycle.verify(msg.cycle, helper, errors.field('cycle'));
                  }
                  if (msg.quantity != null) {
                    if (!Number.isInteger(msg.quantity)) {
                      errors.field('quantity').error('integer expected');
                    }
                  }
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                  if (msg.metadata != null) {
                    const fieldErrors = errors.field('metadata');

                    if (msg.metadata != null && (!(typeof msg.metadata === 'object') || Array.isArray(msg.metadata))) {
                      fieldErrors.error('object expected');
                    } else {
                      for (let key in msg.metadata) {
                        const keyErrors = fieldErrors.index(key);
                        if (typeof msg.metadata[key] !== 'string') {
                          keyErrors.field('value').error('string expected');
                        }
                      }
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.serviceId != null) {
                    json.serviceId = $root.google.protobuf.StringValue.toJSON(obj.serviceId, helper);
                  }
                  if (obj.lastInvoiceId != null) {
                    json.lastInvoiceId = obj.lastInvoiceId;
                  }
                  if (obj.productId != null) {
                    json.productId = $root.google.protobuf.StringValue.toJSON(obj.productId, helper);
                  }
                  if (obj.createdOn != null) {
                    json.createdOn = $root.google.protobuf.Timestamp.toJSON(obj.createdOn, helper);
                  }
                  if (obj.endOfPeriod != null) {
                    json.endOfPeriod = $root.google.protobuf.Timestamp.toJSON(obj.endOfPeriod, helper);
                  }
                  if (obj.nextRenewal != null) {
                    json.nextRenewal = $root.google.protobuf.Timestamp.toJSON(obj.nextRenewal, helper);
                  }
                  if (obj.lastRenewal != null) {
                    json.lastRenewal = $root.google.protobuf.Timestamp.toJSON(obj.lastRenewal, helper);
                  }
                  if (obj.status != null) {
                    json.status = $root.com.wixpress.billing.api.v1.Service.ServiceStatus[obj.status];
                  }
                  if (obj.currency != null) {
                    json.currency = obj.currency;
                  }
                  if (obj.cycle != null) {
                    json.cycle = $root.com.wixpress.billing.api.v1.Cycle.toJSON(obj.cycle, helper);
                  }
                  if (obj.quantity != null) {
                    json.quantity = obj.quantity;
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.metadata != null) {
                    json.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Service();

                if (json.serviceId != null) {
                  result.serviceId = $root.google.protobuf.StringValue.fromJSON(json.serviceId, helper);
                } else {
                  delete result.serviceId;
                }
                if (json.lastInvoiceId != null) {
                  result.lastInvoiceId = json.lastInvoiceId;
                } else {
                  result.lastInvoiceId = '';
                }
                if (json.productId != null) {
                  result.productId = $root.google.protobuf.StringValue.fromJSON(json.productId, helper);
                } else {
                  delete result.productId;
                }
                if (json.createdOn != null) {
                  result.createdOn = $root.google.protobuf.Timestamp.fromJSON(json.createdOn, helper);
                } else {
                  delete result.createdOn;
                }
                if (json.endOfPeriod != null) {
                  result.endOfPeriod = $root.google.protobuf.Timestamp.fromJSON(json.endOfPeriod, helper);
                } else {
                  delete result.endOfPeriod;
                }
                if (json.nextRenewal != null) {
                  result.nextRenewal = $root.google.protobuf.Timestamp.fromJSON(json.nextRenewal, helper);
                } else {
                  delete result.nextRenewal;
                }
                if (json.lastRenewal != null) {
                  result.lastRenewal = $root.google.protobuf.Timestamp.fromJSON(json.lastRenewal, helper);
                } else {
                  delete result.lastRenewal;
                }
                if (json.status != null) {
                  result.status = $root.com.wixpress.billing.api.v1.Service.ServiceStatus[json.status];
                } else {
                  result.status = 0;
                }
                if (json.currency != null) {
                  result.currency = json.currency;
                } else {
                  result.currency = '';
                }
                if (json.cycle != null) {
                  result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromJSON(json.cycle, helper);
                } else {
                  delete result.cycle;
                }
                if (json.quantity != null) {
                  result.quantity = json.quantity;
                } else {
                  result.quantity = 0;
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                if (json.metadata != null) {
                  result.metadata = Object.entries(json.metadata).reduce((acc, [k, v]) => {
                    acc[k] = v;
                    return acc;
                  }, {});
                } else {
                  delete result.metadata;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.serviceId != null) {
                    grpc.serviceId = $root.google.protobuf.StringValue.toGRPC(obj.serviceId, helper);
                  }
                  if (obj.lastInvoiceId != null) {
                    grpc.lastInvoiceId = obj.lastInvoiceId;
                  }
                  if (obj.productId != null) {
                    grpc.productId = $root.google.protobuf.StringValue.toGRPC(obj.productId, helper);
                  }
                  if (obj.createdOn != null) {
                    grpc.createdOn = $root.google.protobuf.Timestamp.toGRPC(obj.createdOn, helper);
                  }
                  if (obj.endOfPeriod != null) {
                    grpc.endOfPeriod = $root.google.protobuf.Timestamp.toGRPC(obj.endOfPeriod, helper);
                  }
                  if (obj.nextRenewal != null) {
                    grpc.nextRenewal = $root.google.protobuf.Timestamp.toGRPC(obj.nextRenewal, helper);
                  }
                  if (obj.lastRenewal != null) {
                    grpc.lastRenewal = $root.google.protobuf.Timestamp.toGRPC(obj.lastRenewal, helper);
                  }
                  if (obj.status != null) {
                    grpc.status = obj.status;
                  }
                  if (obj.currency != null) {
                    grpc.currency = obj.currency;
                  }
                  if (obj.cycle != null) {
                    grpc.cycle = $root.com.wixpress.billing.api.v1.Cycle.toGRPC(obj.cycle, helper);
                  }
                  if (obj.quantity != null) {
                    grpc.quantity = obj.quantity;
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.metadata != null) {
                    grpc.metadata = Object.entries(obj.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Service();

                  if (grpc.serviceId != null) {
                    result.serviceId = $root.google.protobuf.StringValue.fromGRPC(grpc.serviceId, helper);
                  } else {
                    delete result.serviceId;
                  }
                  if (grpc.lastInvoiceId != null) {
                    result.lastInvoiceId = grpc.lastInvoiceId;
                  } else {
                    result.lastInvoiceId = '';
                  }
                  if (grpc.productId != null) {
                    result.productId = $root.google.protobuf.StringValue.fromGRPC(grpc.productId, helper);
                  } else {
                    delete result.productId;
                  }
                  if (grpc.createdOn != null) {
                    result.createdOn = $root.google.protobuf.Timestamp.fromGRPC(grpc.createdOn, helper);
                  } else {
                    delete result.createdOn;
                  }
                  if (grpc.endOfPeriod != null) {
                    result.endOfPeriod = $root.google.protobuf.Timestamp.fromGRPC(grpc.endOfPeriod, helper);
                  } else {
                    delete result.endOfPeriod;
                  }
                  if (grpc.nextRenewal != null) {
                    result.nextRenewal = $root.google.protobuf.Timestamp.fromGRPC(grpc.nextRenewal, helper);
                  } else {
                    delete result.nextRenewal;
                  }
                  if (grpc.lastRenewal != null) {
                    result.lastRenewal = $root.google.protobuf.Timestamp.fromGRPC(grpc.lastRenewal, helper);
                  } else {
                    delete result.lastRenewal;
                  }
                  if (grpc.status != null) {
                    result.status = grpc.status;
                  } else {
                    result.status = 0;
                  }
                  if (grpc.currency != null) {
                    result.currency = grpc.currency;
                  } else {
                    result.currency = '';
                  }
                  if (grpc.cycle != null) {
                    result.cycle = $root.com.wixpress.billing.api.v1.Cycle.fromGRPC(grpc.cycle, helper);
                  } else {
                    delete result.cycle;
                  }
                  if (grpc.quantity != null) {
                    result.quantity = grpc.quantity;
                  } else {
                    result.quantity = 0;
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  if (grpc.metadata != null) {
                    result.metadata = Object.entries(grpc.metadata).reduce((acc, [k, v]) => {
                      acc[k] = v;
                      return acc;
                    }, {});
                  } else {
                    delete result.metadata;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'serviceId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'lastInvoiceId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'productId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 3,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'createdOn': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 4,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'endOfPeriod': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 5,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'nextRenewal': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 6,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'lastRenewal': {
                      'type': $root.google.protobuf.Timestamp,
                      'id': 7,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'status': {
                      'type': $root.com.wixpress.billing.api.v1.Service.ServiceStatus,
                      'id': 8,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'currency': {
                      'type': 'string',
                      'id': 9,
                      'options': {
                        '(wix.api.readOnly)': true,
                        '(wix.api.format)': 'CURRENCY'
                      }
                    },
                    'cycle': {
                      'type': $root.com.wixpress.billing.api.v1.Cycle,
                      'id': 10,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'quantity': {
                      'type': 'int32',
                      'id': 11,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 12,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    },
                    'metadata': {
                      'keyType': 'string',
                      'type': 'string',
                      'id': 13,
                      'options': {
                        '(wix.api.readOnly)': true
                      }
                    }
                  },
                  'nested': {
                    'ServiceStatus': {
                      'values': {
                        'UNKNOWN': 0,
                        'ACTIVE': 1,
                        'CANCELED': 2,
                        'FRAUDULENT': 3,
                        'SUSPENDED': 4,
                        'UNPAID': 5
                      }
                    }
                  }
                };
              }
            }

            Service.ServiceStatus = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'ACTIVE': 1,
              1: 'ACTIVE',
              'CANCELED': 2,
              2: 'CANCELED',
              'FRAUDULENT': 3,
              3: 'FRAUDULENT',
              'SUSPENDED': 4,
              4: 'SUSPENDED',
              'UNPAID': 5,
              5: 'UNPAID'
            };
            Service.ServiceStatus = {
              verify: (value, helper, errors = helper.verification.Errors.empty()) => {
                switch (value) {
                  default: {
                    errors.error('enum expected');
                  }
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                }
                return errors;
              },
              'UNKNOWN': 0,
              0: 'UNKNOWN',
              'ACTIVE': 1,
              1: 'ACTIVE',
              'CANCELED': 2,
              2: 'CANCELED',
              'FRAUDULENT': 3,
              3: 'FRAUDULENT',
              'SUSPENDED': 4,
              4: 'SUSPENDED',
              'UNPAID': 5,
              5: 'UNPAID'
            };
            Object.defineProperty(Service.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Service');
              },
              enumerable: false,
              configurable: false
            });
            return Service;
          }());
          v1.ServiceService = (function() {

            class ServiceService {

              constructor() {
                if (this.constructor.name === ServiceService.name) {
                  throw new TypeError('class ServiceService is abstract');
                }
              }

              listServices(aspects, msg) {
                throw new TypeError('method listServices is abstract');
              }

              getService(aspects, msg) {
                throw new TypeError('method getService is abstract');
              }

              updateService(aspects, msg) {
                throw new TypeError('method updateService is abstract');
              }

              bulkUpdatePaymentSource(aspects, msg) {
                throw new TypeError('method bulkUpdatePaymentSource is abstract');
              }
            }

            ServiceService.prototype.listServices._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.ListServicesRequest,
                $root.com.wixpress.billing.api.v1.ListServicesResponse
              ];
            };
            ServiceService.prototype.getService._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetServiceRequest,
                $root.com.wixpress.billing.api.v1.GetServiceResponse
              ];
            };
            ServiceService.prototype.updateService._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.UpdateServiceRequest,
                $root.com.wixpress.billing.api.v1.UpdateServiceResponse
              ];
            };
            ServiceService.prototype.bulkUpdatePaymentSource._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceRequest,
                $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceResponse
              ];
            };
            ServiceService.prototype.listServices.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ServiceService.ListServices');
            };
            ServiceService.prototype.getService.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ServiceService.GetService');
            };
            ServiceService.prototype.updateService.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ServiceService.UpdateService');
            };
            ServiceService.prototype.bulkUpdatePaymentSource.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ServiceService.BulkUpdatePaymentSource');
            };
            Object.defineProperty(ServiceService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ServiceService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.ServiceService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ServiceService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ServiceService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(ServiceService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return ServiceService;
          }());
          v1.ListServicesRequest = (function() {

            class ListServicesRequest {

              constructor(props) {
                this.paging = props && props.paging;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.paging != null) {
                    $root.wix.common.Paging.verify(msg.paging, helper, errors.field('paging'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.paging != null) {
                    json.paging = $root.wix.common.Paging.toJSON(obj.paging, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListServicesRequest();

                if (json.paging != null) {
                  result.paging = $root.wix.common.Paging.fromJSON(json.paging, helper);
                } else {
                  delete result.paging;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.paging != null) {
                    grpc.paging = $root.wix.common.Paging.toGRPC(obj.paging, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListServicesRequest();

                  if (grpc.paging != null) {
                    result.paging = $root.wix.common.Paging.fromGRPC(grpc.paging, helper);
                  } else {
                    delete result.paging;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'paging': {
                      'type': $root.wix.common.Paging,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListServicesRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListServicesRequest');
              },
              enumerable: false,
              configurable: false
            });
            return ListServicesRequest;
          }());
          v1.ListServicesResponse = (function() {

            class ListServicesResponse {

              constructor(props) {
                this.services = props && props.services;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.services != null) {
                    const fieldErrors = errors.field('services');

                    if (!Array.isArray(msg.services)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.services.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Service.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.services != null) {
                    json.services = obj.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.toJSON(e, helper);
                    });
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.ListServicesResponse();

                if (json.services != null) {
                  result.services = json.services.map(e => {
                    return $root.com.wixpress.billing.api.v1.Service.fromJSON(e, helper);
                  });
                } else {
                  result.services = [];
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.services != null) {
                    grpc.services = obj.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.toGRPC(e, helper);
                    });
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.ListServicesResponse();

                  if (grpc.services != null) {
                    result.services = grpc.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.fromGRPC(e, helper);
                    });
                  } else {
                    result.services = [];
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'services': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Service,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(ListServicesResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.ListServicesResponse');
              },
              enumerable: false,
              configurable: false
            });
            return ListServicesResponse;
          }());
          v1.GetServiceRequest = (function() {

            class GetServiceRequest {

              constructor(props) {
                this.serviceId = props && props.serviceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.serviceId != null) {
                    if (typeof msg.serviceId !== 'string') {
                      errors.field('serviceId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.serviceId != null) {
                    json.serviceId = obj.serviceId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetServiceRequest();

                if (json.serviceId != null) {
                  result.serviceId = json.serviceId;
                } else {
                  result.serviceId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.serviceId != null) {
                    grpc.serviceId = obj.serviceId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetServiceRequest();

                  if (grpc.serviceId != null) {
                    result.serviceId = grpc.serviceId;
                  } else {
                    result.serviceId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'serviceId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetServiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetServiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetServiceRequest;
          }());
          v1.GetServiceResponse = (function() {

            class GetServiceResponse {

              constructor(props) {
                this.service = props && props.service;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.service != null) {
                    $root.com.wixpress.billing.api.v1.Service.verify(msg.service, helper, errors.field('service'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.service != null) {
                    json.service = $root.com.wixpress.billing.api.v1.Service.toJSON(obj.service, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetServiceResponse();

                if (json.service != null) {
                  result.service = $root.com.wixpress.billing.api.v1.Service.fromJSON(json.service, helper);
                } else {
                  delete result.service;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.service != null) {
                    grpc.service = $root.com.wixpress.billing.api.v1.Service.toGRPC(obj.service, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetServiceResponse();

                  if (grpc.service != null) {
                    result.service = $root.com.wixpress.billing.api.v1.Service.fromGRPC(grpc.service, helper);
                  } else {
                    delete result.service;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'service': {
                      'type': $root.com.wixpress.billing.api.v1.Service,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetServiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetServiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetServiceResponse;
          }());
          v1.UpdateServiceRequest = (function() {

            class UpdateServiceRequest {

              constructor(props) {
                this.service = props && props.service;
                this.fieldMask = props && props.fieldMask;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.service != null) {
                    $root.com.wixpress.billing.api.v1.Service.verify(msg.service, helper, errors.field('service'));
                  }
                  if (msg.fieldMask != null) {
                    $root.google.protobuf.FieldMask.verify(msg.fieldMask, helper, errors.field('fieldMask'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.service != null) {
                    json.service = $root.com.wixpress.billing.api.v1.Service.toJSON(obj.service, helper);
                  }
                  if (obj.fieldMask != null) {
                    json.fieldMask = $root.google.protobuf.FieldMask.toJSON(obj.fieldMask, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateServiceRequest();

                if (json.service != null) {
                  result.service = $root.com.wixpress.billing.api.v1.Service.fromJSON(json.service, helper);
                } else {
                  delete result.service;
                }
                if (json.fieldMask != null) {
                  result.fieldMask = $root.google.protobuf.FieldMask.fromJSON(json.fieldMask, helper);
                } else {
                  delete result.fieldMask;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.service != null) {
                    grpc.service = $root.com.wixpress.billing.api.v1.Service.toGRPC(obj.service, helper);
                  }
                  if (obj.fieldMask != null) {
                    grpc.fieldMask = $root.google.protobuf.FieldMask.toGRPC(obj.fieldMask, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateServiceRequest();

                  if (grpc.service != null) {
                    result.service = $root.com.wixpress.billing.api.v1.Service.fromGRPC(grpc.service, helper);
                  } else {
                    delete result.service;
                  }
                  if (grpc.fieldMask != null) {
                    result.fieldMask = $root.google.protobuf.FieldMask.fromGRPC(grpc.fieldMask, helper);
                  } else {
                    delete result.fieldMask;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'service': {
                      'type': $root.com.wixpress.billing.api.v1.Service,
                      'id': 1
                    },
                    'fieldMask': {
                      'type': $root.google.protobuf.FieldMask,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateServiceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateServiceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateServiceRequest;
          }());
          v1.UpdateServiceResponse = (function() {

            class UpdateServiceResponse {

              constructor(props) {
                this.service = props && props.service;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.service != null) {
                    $root.com.wixpress.billing.api.v1.Service.verify(msg.service, helper, errors.field('service'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.service != null) {
                    json.service = $root.com.wixpress.billing.api.v1.Service.toJSON(obj.service, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateServiceResponse();

                if (json.service != null) {
                  result.service = $root.com.wixpress.billing.api.v1.Service.fromJSON(json.service, helper);
                } else {
                  delete result.service;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.service != null) {
                    grpc.service = $root.com.wixpress.billing.api.v1.Service.toGRPC(obj.service, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateServiceResponse();

                  if (grpc.service != null) {
                    result.service = $root.com.wixpress.billing.api.v1.Service.fromGRPC(grpc.service, helper);
                  } else {
                    delete result.service;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'service': {
                      'type': $root.com.wixpress.billing.api.v1.Service,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateServiceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateServiceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateServiceResponse;
          }());
          v1.BulkUpdatePaymentSourceRequest = (function() {

            class BulkUpdatePaymentSourceRequest {

              constructor(props) {
                this.serviceIds = props && props.serviceIds;
                this.paymentSourceId = props && props.paymentSourceId;
                this.autoCreateVerificationInvoice = props && props.autoCreateVerificationInvoice;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.serviceIds != null) {
                    const fieldErrors = errors.field('serviceIds');

                    if (!Array.isArray(msg.serviceIds)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.serviceIds.forEach((value, index) => {
                        if (typeof value !== 'string') {
                          fieldErrors.index(index).error('string expected');
                        }
                      });
                    }
                  }
                  if (msg.paymentSourceId != null) {
                    if (typeof msg.paymentSourceId !== 'string') {
                      errors.field('paymentSourceId').error('string expected');
                    }
                  }
                  if (msg.autoCreateVerificationInvoice != null) {
                    if (typeof msg.autoCreateVerificationInvoice !== 'boolean') {
                      errors.field('autoCreateVerificationInvoice').error('boolean expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.serviceIds != null) {
                    json.serviceIds = obj.serviceIds.map(e => {
                      return e;
                    });
                  }
                  if (obj.paymentSourceId != null) {
                    json.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.autoCreateVerificationInvoice != null) {
                    json.autoCreateVerificationInvoice = obj.autoCreateVerificationInvoice;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceRequest();

                if (json.serviceIds != null) {
                  result.serviceIds = json.serviceIds.map(e => {
                    return e;
                  });
                } else {
                  result.serviceIds = [];
                }
                if (json.paymentSourceId != null) {
                  result.paymentSourceId = json.paymentSourceId;
                } else {
                  result.paymentSourceId = '';
                }
                if (json.autoCreateVerificationInvoice != null) {
                  result.autoCreateVerificationInvoice = json.autoCreateVerificationInvoice;
                } else {
                  result.autoCreateVerificationInvoice = false;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.serviceIds != null) {
                    grpc.serviceIds = obj.serviceIds.map(e => {
                      return e;
                    });
                  }
                  if (obj.paymentSourceId != null) {
                    grpc.paymentSourceId = obj.paymentSourceId;
                  }
                  if (obj.autoCreateVerificationInvoice != null) {
                    grpc.autoCreateVerificationInvoice = obj.autoCreateVerificationInvoice;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceRequest();

                  if (grpc.serviceIds != null) {
                    result.serviceIds = grpc.serviceIds.map(e => {
                      return e;
                    });
                  } else {
                    result.serviceIds = [];
                  }
                  if (grpc.paymentSourceId != null) {
                    result.paymentSourceId = grpc.paymentSourceId;
                  } else {
                    result.paymentSourceId = '';
                  }
                  if (grpc.autoCreateVerificationInvoice != null) {
                    result.autoCreateVerificationInvoice = grpc.autoCreateVerificationInvoice;
                  } else {
                    result.autoCreateVerificationInvoice = false;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'serviceIds': {
                      'rule': 'repeated',
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.minLength)': 1
                      }
                    },
                    'paymentSourceId': {
                      'type': 'string',
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    },
                    'autoCreateVerificationInvoice': {
                      'type': 'bool',
                      'id': 3
                    }
                  }
                };
              }
            }

            Object.defineProperty(BulkUpdatePaymentSourceRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.BulkUpdatePaymentSourceRequest');
              },
              enumerable: false,
              configurable: false
            });
            return BulkUpdatePaymentSourceRequest;
          }());
          v1.BulkUpdatePaymentSourceResponse = (function() {

            class BulkUpdatePaymentSourceResponse {

              constructor(props) {
                this.services = props && props.services;
                this.verificationInvoiceId = props && props.verificationInvoiceId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.services != null) {
                    const fieldErrors = errors.field('services');

                    if (!Array.isArray(msg.services)) {
                      fieldErrors.error('array expected');
                    } else {
                      msg.services.forEach((value, index) => {
                        $root.com.wixpress.billing.api.v1.Service.verify(value, helper, fieldErrors.index(index));
                      });
                    }
                  }
                  if (msg.verificationInvoiceId != null) {
                    $root.google.protobuf.StringValue.verify(msg.verificationInvoiceId, helper, errors.field('verificationInvoiceId'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.services != null) {
                    json.services = obj.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.toJSON(e, helper);
                    });
                  }
                  if (obj.verificationInvoiceId != null) {
                    json.verificationInvoiceId = $root.google.protobuf.StringValue.toJSON(obj.verificationInvoiceId, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceResponse();

                if (json.services != null) {
                  result.services = json.services.map(e => {
                    return $root.com.wixpress.billing.api.v1.Service.fromJSON(e, helper);
                  });
                } else {
                  result.services = [];
                }
                if (json.verificationInvoiceId != null) {
                  result.verificationInvoiceId = $root.google.protobuf.StringValue.fromJSON(json.verificationInvoiceId, helper);
                } else {
                  delete result.verificationInvoiceId;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.services != null) {
                    grpc.services = obj.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.toGRPC(e, helper);
                    });
                  }
                  if (obj.verificationInvoiceId != null) {
                    grpc.verificationInvoiceId = $root.google.protobuf.StringValue.toGRPC(obj.verificationInvoiceId, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.BulkUpdatePaymentSourceResponse();

                  if (grpc.services != null) {
                    result.services = grpc.services.map(e => {
                      return $root.com.wixpress.billing.api.v1.Service.fromGRPC(e, helper);
                    });
                  } else {
                    result.services = [];
                  }
                  if (grpc.verificationInvoiceId != null) {
                    result.verificationInvoiceId = $root.google.protobuf.StringValue.fromGRPC(grpc.verificationInvoiceId, helper);
                  } else {
                    delete result.verificationInvoiceId;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'services': {
                      'rule': 'repeated',
                      'type': $root.com.wixpress.billing.api.v1.Service,
                      'id': 1
                    },
                    'verificationInvoiceId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 2,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(BulkUpdatePaymentSourceResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.BulkUpdatePaymentSourceResponse');
              },
              enumerable: false,
              configurable: false
            });
            return BulkUpdatePaymentSourceResponse;
          }());
          v1.TaxService = (function() {

            class TaxService {

              constructor() {
                if (this.constructor.name === TaxService.name) {
                  throw new TypeError('class TaxService is abstract');
                }
              }

              getTax(aspects, msg) {
                throw new TypeError('method getTax is abstract');
              }
            }

            TaxService.prototype.getTax._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetTaxRequest,
                $root.com.wixpress.billing.api.v1.GetTaxResponse
              ];
            };
            TaxService.prototype.getTax.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.TaxService.GetTax');
            };
            Object.defineProperty(TaxService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(TaxService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.TaxService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(TaxService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.TaxService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(TaxService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return TaxService;
          }());
          v1.GetTaxRequest = (function() {

            class GetTaxRequest {

              constructor(props) {
                this.country = props && props.country;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.country != null) {
                    if (typeof msg.country !== 'string') {
                      errors.field('country').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.country != null) {
                    json.country = obj.country;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetTaxRequest();

                if (json.country != null) {
                  result.country = json.country;
                } else {
                  result.country = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.country != null) {
                    grpc.country = obj.country;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetTaxRequest();

                  if (grpc.country != null) {
                    result.country = grpc.country;
                  } else {
                    result.country = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'country': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'COUNTRY'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetTaxRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetTaxRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetTaxRequest;
          }());
          v1.GetTaxResponse = (function() {

            class GetTaxResponse {

              constructor(props) {
                this.tax = props && props.tax;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.tax != null) {
                    $root.com.wixpress.billing.api.v1.Tax.verify(msg.tax, helper, errors.field('tax'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.tax != null) {
                    json.tax = $root.com.wixpress.billing.api.v1.Tax.toJSON(obj.tax, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetTaxResponse();

                if (json.tax != null) {
                  result.tax = $root.com.wixpress.billing.api.v1.Tax.fromJSON(json.tax, helper);
                } else {
                  delete result.tax;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.tax != null) {
                    grpc.tax = $root.com.wixpress.billing.api.v1.Tax.toGRPC(obj.tax, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetTaxResponse();

                  if (grpc.tax != null) {
                    result.tax = $root.com.wixpress.billing.api.v1.Tax.fromGRPC(grpc.tax, helper);
                  } else {
                    delete result.tax;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'tax': {
                      'type': $root.com.wixpress.billing.api.v1.Tax,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetTaxResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetTaxResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetTaxResponse;
          }());
          v1.Vendor = (function() {

            class Vendor {

              constructor(props) {
                this.vendorId = props && props.vendorId;
                this.name = props && props.name;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.vendorId != null) {
                    $root.google.protobuf.StringValue.verify(msg.vendorId, helper, errors.field('vendorId'));
                  }
                  if (msg.name != null) {
                    if (typeof msg.name !== 'string') {
                      errors.field('name').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.vendorId != null) {
                    json.vendorId = $root.google.protobuf.StringValue.toJSON(obj.vendorId, helper);
                  }
                  if (obj.name != null) {
                    json.name = obj.name;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.Vendor();

                if (json.vendorId != null) {
                  result.vendorId = $root.google.protobuf.StringValue.fromJSON(json.vendorId, helper);
                } else {
                  delete result.vendorId;
                }
                if (json.name != null) {
                  result.name = json.name;
                } else {
                  result.name = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.vendorId != null) {
                    grpc.vendorId = $root.google.protobuf.StringValue.toGRPC(obj.vendorId, helper);
                  }
                  if (obj.name != null) {
                    grpc.name = obj.name;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.Vendor();

                  if (grpc.vendorId != null) {
                    result.vendorId = $root.google.protobuf.StringValue.fromGRPC(grpc.vendorId, helper);
                  } else {
                    delete result.vendorId;
                  }
                  if (grpc.name != null) {
                    result.name = grpc.name;
                  } else {
                    result.name = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'vendorId': {
                      'type': $root.google.protobuf.StringValue,
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID',
                        '(wix.api.readOnly)': true
                      }
                    },
                    'name': {
                      'type': 'string',
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(Vendor.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.Vendor');
              },
              enumerable: false,
              configurable: false
            });
            return Vendor;
          }());
          v1.VendorService = (function() {

            class VendorService {

              constructor() {
                if (this.constructor.name === VendorService.name) {
                  throw new TypeError('class VendorService is abstract');
                }
              }

              getVendor(aspects, msg) {
                throw new TypeError('method getVendor is abstract');
              }

              updateVendor(aspects, msg) {
                throw new TypeError('method updateVendor is abstract');
              }
            }

            VendorService.prototype.getVendor._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.GetVendorRequest,
                $root.com.wixpress.billing.api.v1.GetVendorResponse
              ];
            };
            VendorService.prototype.updateVendor._messageTypes = function() {
              return [
                $root.com.wixpress.billing.api.v1.UpdateVendorRequest,
                $root.com.wixpress.billing.api.v1.UpdateVendorResponse
              ];
            };
            VendorService.prototype.getVendor.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.VendorService.GetVendor');
            };
            VendorService.prototype.updateVendor.__proto = pbjs => {
              return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.VendorService.UpdateVendor');
            };
            Object.defineProperty(VendorService.prototype, '__isRpcService__', {
              value: true,
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(VendorService.prototype, '__fqn__', {
              value: 'com.wixpress.billing.api.v1.VendorService',
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(VendorService.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.VendorService');
              },
              enumerable: false,
              configurable: false
            });
            Object.defineProperty(VendorService.prototype, '__options__', {
              value: $root.__options,
              enumerable: false,
              configurable: false
            });
            return VendorService;
          }());
          v1.GetVendorRequest = (function() {

            class GetVendorRequest {

              constructor(props) {
                this.vendorId = props && props.vendorId;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.vendorId != null) {
                    if (typeof msg.vendorId !== 'string') {
                      errors.field('vendorId').error('string expected');
                    }
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.vendorId != null) {
                    json.vendorId = obj.vendorId;
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetVendorRequest();

                if (json.vendorId != null) {
                  result.vendorId = json.vendorId;
                } else {
                  result.vendorId = '';
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.vendorId != null) {
                    grpc.vendorId = obj.vendorId;
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetVendorRequest();

                  if (grpc.vendorId != null) {
                    result.vendorId = grpc.vendorId;
                  } else {
                    result.vendorId = '';
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'vendorId': {
                      'type': 'string',
                      'id': 1,
                      'options': {
                        '(wix.api.format)': 'GUID'
                      }
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetVendorRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetVendorRequest');
              },
              enumerable: false,
              configurable: false
            });
            return GetVendorRequest;
          }());
          v1.GetVendorResponse = (function() {

            class GetVendorResponse {

              constructor(props) {
                this.vendor = props && props.vendor;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.vendor != null) {
                    $root.com.wixpress.billing.api.v1.Vendor.verify(msg.vendor, helper, errors.field('vendor'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.vendor != null) {
                    json.vendor = $root.com.wixpress.billing.api.v1.Vendor.toJSON(obj.vendor, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.GetVendorResponse();

                if (json.vendor != null) {
                  result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromJSON(json.vendor, helper);
                } else {
                  delete result.vendor;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.vendor != null) {
                    grpc.vendor = $root.com.wixpress.billing.api.v1.Vendor.toGRPC(obj.vendor, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.GetVendorResponse();

                  if (grpc.vendor != null) {
                    result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromGRPC(grpc.vendor, helper);
                  } else {
                    delete result.vendor;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'vendor': {
                      'type': $root.com.wixpress.billing.api.v1.Vendor,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(GetVendorResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.GetVendorResponse');
              },
              enumerable: false,
              configurable: false
            });
            return GetVendorResponse;
          }());
          v1.UpdateVendorRequest = (function() {

            class UpdateVendorRequest {

              constructor(props) {
                this.vendor = props && props.vendor;
                this.fieldMask = props && props.fieldMask;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.vendor != null) {
                    $root.com.wixpress.billing.api.v1.Vendor.verify(msg.vendor, helper, errors.field('vendor'));
                  }
                  if (msg.fieldMask != null) {
                    $root.google.protobuf.FieldMask.verify(msg.fieldMask, helper, errors.field('fieldMask'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.vendor != null) {
                    json.vendor = $root.com.wixpress.billing.api.v1.Vendor.toJSON(obj.vendor, helper);
                  }
                  if (obj.fieldMask != null) {
                    json.fieldMask = $root.google.protobuf.FieldMask.toJSON(obj.fieldMask, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateVendorRequest();

                if (json.vendor != null) {
                  result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromJSON(json.vendor, helper);
                } else {
                  delete result.vendor;
                }
                if (json.fieldMask != null) {
                  result.fieldMask = $root.google.protobuf.FieldMask.fromJSON(json.fieldMask, helper);
                } else {
                  delete result.fieldMask;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.vendor != null) {
                    grpc.vendor = $root.com.wixpress.billing.api.v1.Vendor.toGRPC(obj.vendor, helper);
                  }
                  if (obj.fieldMask != null) {
                    grpc.fieldMask = $root.google.protobuf.FieldMask.toGRPC(obj.fieldMask, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateVendorRequest();

                  if (grpc.vendor != null) {
                    result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromGRPC(grpc.vendor, helper);
                  } else {
                    delete result.vendor;
                  }
                  if (grpc.fieldMask != null) {
                    result.fieldMask = $root.google.protobuf.FieldMask.fromGRPC(grpc.fieldMask, helper);
                  } else {
                    delete result.fieldMask;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'vendor': {
                      'type': $root.com.wixpress.billing.api.v1.Vendor,
                      'id': 1
                    },
                    'fieldMask': {
                      'type': $root.google.protobuf.FieldMask,
                      'id': 2
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateVendorRequest.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateVendorRequest');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateVendorRequest;
          }());
          v1.UpdateVendorResponse = (function() {

            class UpdateVendorResponse {

              constructor(props) {
                this.vendor = props && props.vendor;
              }

              static verify(msg, helper, errors = helper.verification.Errors.empty()) {
                if (typeof msg !== 'object' || msg == null) {
                  errors.error('object expected');
                } else {
                  if (msg.vendor != null) {
                    $root.com.wixpress.billing.api.v1.Vendor.verify(msg.vendor, helper, errors.field('vendor'));
                  }
                }
                return errors;
              }

              static toJSON(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const json = {};

                  if (obj.vendor != null) {
                    json.vendor = $root.com.wixpress.billing.api.v1.Vendor.toJSON(obj.vendor, helper);
                  }
                  return json;
                }
              }

              static fromJSON(json, helper) {
                const result = new $root.com.wixpress.billing.api.v1.UpdateVendorResponse();

                if (json.vendor != null) {
                  result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromJSON(json.vendor, helper);
                } else {
                  delete result.vendor;
                }
                return result;
              }

              static toGRPC(obj, helper) {
                if (obj == null) {
                  return null;
                } else {
                  const grpc = {};

                  if (obj.vendor != null) {
                    grpc.vendor = $root.com.wixpress.billing.api.v1.Vendor.toGRPC(obj.vendor, helper);
                  }
                  return grpc;
                }
              }

              static fromGRPC(grpc, helper) {
                if (grpc == null) {
                  return null;
                } else {
                  const result = new $root.com.wixpress.billing.api.v1.UpdateVendorResponse();

                  if (grpc.vendor != null) {
                    result.vendor = $root.com.wixpress.billing.api.v1.Vendor.fromGRPC(grpc.vendor, helper);
                  } else {
                    delete result.vendor;
                  }
                  return result;
                }
              }

              static describe() {
                return {
                  'fields': {
                    'vendor': {
                      'type': $root.com.wixpress.billing.api.v1.Vendor,
                      'id': 1
                    }
                  }
                };
              }
            }

            Object.defineProperty(UpdateVendorResponse.prototype, '__proto', {
              value: pbjs => {
                return $root.__lookup(pbjs)('com.wixpress.billing.api.v1.UpdateVendorResponse');
              },
              enumerable: false,
              configurable: false
            });
            return UpdateVendorResponse;
          }());
          return v1;
        }());
        return api;
      }());
      return billing;
    }());
    return wixpress;
  }());
  return com;
}());
$root.wix = (function() {
  const wix = {};

  wix.api = (function() {
    const api = {};

    api.Exposure = {
      verify: (value, helper, errors = helper.verification.Errors.empty()) => {
        switch (value) {
          default: {
            errors.error('enum expected');
          }
          case 0:
          case 1:
          case 2:
            break;
        }
        return errors;
      },
      'PRIVATE': 0,
      0: 'PRIVATE',
      'INTERNAL': 1,
      1: 'INTERNAL',
      'PUBLIC': 2,
      2: 'PUBLIC'
    };
    api.Maturity = {
      verify: (value, helper, errors = helper.verification.Errors.empty()) => {
        switch (value) {
          default: {
            errors.error('enum expected');
          }
          case 0:
          case 1:
          case 2:
          case 3:
            break;
        }
        return errors;
      },
      'ALPHA': 0,
      0: 'ALPHA',
      'BETA': 1,
      1: 'BETA',
      'IA': 2,
      2: 'IA',
      'GA': 3,
      3: 'GA'
    };
    api.Format = {
      verify: (value, helper, errors = helper.verification.Errors.empty()) => {
        switch (value) {
          default: {
            errors.error('enum expected');
          }
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            break;
        }
        return errors;
      },
      'EMAIL': 0,
      0: 'EMAIL',
      'HOSTNAME': 1,
      1: 'HOSTNAME',
      'IPV4': 2,
      2: 'IPV4',
      'IPV6': 3,
      3: 'IPV6',
      'URI': 4,
      4: 'URI',
      'PHONE': 7,
      7: 'PHONE',
      'CREDIT_CARD': 8,
      8: 'CREDIT_CARD',
      'GUID': 9,
      9: 'GUID',
      'COUNTRY': 10,
      10: 'COUNTRY',
      'LANGUAGE': 11,
      11: 'LANGUAGE',
      'DECIMAL_VALUE': 12,
      12: 'DECIMAL_VALUE',
      'CURRENCY': 13,
      13: 'CURRENCY'
    };
    api.Callback = (function() {

      class Callback {

        constructor(props) {
          this.topic = props && props.topic;
          this.payload = props && props.payload;
          this.permission = props && props.permission;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.topic != null) {
              if (typeof msg.topic !== 'string') {
                errors.field('topic').error('string expected');
              }
            }
            if (msg.payload != null) {
              if (typeof msg.payload !== 'string') {
                errors.field('payload').error('string expected');
              }
            }
            if (msg.permission != null) {
              if (typeof msg.permission !== 'string') {
                errors.field('permission').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.topic != null) {
              json.topic = obj.topic;
            }
            if (obj.payload != null) {
              json.payload = obj.payload;
            }
            if (obj.permission != null) {
              json.permission = obj.permission;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.api.Callback();

          if (json.topic != null) {
            result.topic = json.topic;
          } else {
            result.topic = '';
          }
          if (json.payload != null) {
            result.payload = json.payload;
          } else {
            result.payload = '';
          }
          if (json.permission != null) {
            result.permission = json.permission;
          } else {
            result.permission = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.topic != null) {
              grpc.topic = obj.topic;
            }
            if (obj.payload != null) {
              grpc.payload = obj.payload;
            }
            if (obj.permission != null) {
              grpc.permission = obj.permission;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.api.Callback();

            if (grpc.topic != null) {
              result.topic = grpc.topic;
            } else {
              result.topic = '';
            }
            if (grpc.payload != null) {
              result.payload = grpc.payload;
            } else {
              result.payload = '';
            }
            if (grpc.permission != null) {
              result.permission = grpc.permission;
            } else {
              result.permission = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'topic': {
                'rule': 'required',
                'type': 'string',
                'id': 1
              },
              'payload': {
                'rule': 'required',
                'type': 'string',
                'id': 2
              },
              'permission': {
                'type': 'string',
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(Callback.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.api.Callback');
        },
        enumerable: false,
        configurable: false
      });
      return Callback;
    }());
    api.PermissionRule = (function() {

      class PermissionRule {

        constructor(props) {
          this.name = props && props.name;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.name != null) {
              if (typeof msg.name !== 'string') {
                errors.field('name').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.name != null) {
              json.name = obj.name;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.api.PermissionRule();

          if (json.name != null) {
            result.name = json.name;
          } else {
            result.name = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.name != null) {
              grpc.name = obj.name;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.api.PermissionRule();

            if (grpc.name != null) {
              result.name = grpc.name;
            } else {
              result.name = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'name': {
                'type': 'string',
                'id': 1
              }
            }
          };
        }
      }

      Object.defineProperty(PermissionRule.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.api.PermissionRule');
        },
        enumerable: false,
        configurable: false
      });
      return PermissionRule;
    }());
    return api;
  }());
  wix.common = (function() {
    const common = {};

    common.Paging = (function() {

      class Paging {

        constructor(props) {
          this.limit = props && props.limit;
          this.offset = props && props.offset;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.limit != null) {
              $root.google.protobuf.Int32Value.verify(msg.limit, helper, errors.field('limit'));
            }
            if (msg.offset != null) {
              $root.google.protobuf.Int32Value.verify(msg.offset, helper, errors.field('offset'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.limit != null) {
              json.limit = $root.google.protobuf.Int32Value.toJSON(obj.limit, helper);
            }
            if (obj.offset != null) {
              json.offset = $root.google.protobuf.Int32Value.toJSON(obj.offset, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Paging();

          if (json.limit != null) {
            result.limit = $root.google.protobuf.Int32Value.fromJSON(json.limit, helper);
          } else {
            delete result.limit;
          }
          if (json.offset != null) {
            result.offset = $root.google.protobuf.Int32Value.fromJSON(json.offset, helper);
          } else {
            delete result.offset;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.limit != null) {
              grpc.limit = $root.google.protobuf.Int32Value.toGRPC(obj.limit, helper);
            }
            if (obj.offset != null) {
              grpc.offset = $root.google.protobuf.Int32Value.toGRPC(obj.offset, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Paging();

            if (grpc.limit != null) {
              result.limit = $root.google.protobuf.Int32Value.fromGRPC(grpc.limit, helper);
            } else {
              delete result.limit;
            }
            if (grpc.offset != null) {
              result.offset = $root.google.protobuf.Int32Value.fromGRPC(grpc.offset, helper);
            } else {
              delete result.offset;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'limit': {
                'type': $root.google.protobuf.Int32Value,
                'id': 1,
                'options': {
                  '(wix.api.min)': 0
                }
              },
              'offset': {
                'type': $root.google.protobuf.Int32Value,
                'id': 2,
                'options': {
                  '(wix.api.min)': 0
                }
              }
            }
          };
        }
      }

      Object.defineProperty(Paging.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Paging');
        },
        enumerable: false,
        configurable: false
      });
      return Paging;
    }());
    common.CursorPaging = (function() {

      class CursorPaging {

        constructor(props) {
          this.limit = props && props.limit;
          this.cursor = props && props.cursor;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.limit != null) {
              $root.google.protobuf.Int32Value.verify(msg.limit, helper, errors.field('limit'));
            }
            if (msg.cursor != null) {
              $root.google.protobuf.StringValue.verify(msg.cursor, helper, errors.field('cursor'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.limit != null) {
              json.limit = $root.google.protobuf.Int32Value.toJSON(obj.limit, helper);
            }
            if (obj.cursor != null) {
              json.cursor = $root.google.protobuf.StringValue.toJSON(obj.cursor, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.CursorPaging();

          if (json.limit != null) {
            result.limit = $root.google.protobuf.Int32Value.fromJSON(json.limit, helper);
          } else {
            delete result.limit;
          }
          if (json.cursor != null) {
            result.cursor = $root.google.protobuf.StringValue.fromJSON(json.cursor, helper);
          } else {
            delete result.cursor;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.limit != null) {
              grpc.limit = $root.google.protobuf.Int32Value.toGRPC(obj.limit, helper);
            }
            if (obj.cursor != null) {
              grpc.cursor = $root.google.protobuf.StringValue.toGRPC(obj.cursor, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.CursorPaging();

            if (grpc.limit != null) {
              result.limit = $root.google.protobuf.Int32Value.fromGRPC(grpc.limit, helper);
            } else {
              delete result.limit;
            }
            if (grpc.cursor != null) {
              result.cursor = $root.google.protobuf.StringValue.fromGRPC(grpc.cursor, helper);
            } else {
              delete result.cursor;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'limit': {
                'type': $root.google.protobuf.Int32Value,
                'id': 1,
                'options': {
                  '(wix.api.min)': 0
                }
              },
              'cursor': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(CursorPaging.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.CursorPaging');
        },
        enumerable: false,
        configurable: false
      });
      return CursorPaging;
    }());
    common.Query = (function() {

      class Query {

        constructor(props) {
          this.filter = props && props.filter;
          this.sort = props && props.sort;
          this.paging = props && props.paging;
          this.fields = props && props.fields;
          this.fieldsets = props && props.fieldsets;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.filter != null) {
              $root.google.protobuf.Value.verify(msg.filter, helper, errors.field('filter'));
            }
            if (msg.sort != null) {
              const fieldErrors = errors.field('sort');

              if (!Array.isArray(msg.sort)) {
                fieldErrors.error('array expected');
              } else {
                msg.sort.forEach((value, index) => {
                  $root.wix.common.Sorting.verify(value, helper, fieldErrors.index(index));
                });
              }
            }
            if (msg.paging != null) {
              $root.wix.common.Paging.verify(msg.paging, helper, errors.field('paging'));
            }
            if (msg.fields != null) {
              const fieldErrors = errors.field('fields');

              if (!Array.isArray(msg.fields)) {
                fieldErrors.error('array expected');
              } else {
                msg.fields.forEach((value, index) => {
                  if (typeof value !== 'string') {
                    fieldErrors.index(index).error('string expected');
                  }
                });
              }
            }
            if (msg.fieldsets != null) {
              const fieldErrors = errors.field('fieldsets');

              if (!Array.isArray(msg.fieldsets)) {
                fieldErrors.error('array expected');
              } else {
                msg.fieldsets.forEach((value, index) => {
                  if (typeof value !== 'string') {
                    fieldErrors.index(index).error('string expected');
                  }
                });
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.filter != null) {
              json.filter = $root.google.protobuf.Value.toJSON(obj.filter, helper);
            }
            if (obj.sort != null) {
              json.sort = obj.sort.map(e => {
                return $root.wix.common.Sorting.toJSON(e, helper);
              });
            }
            if (obj.paging != null) {
              json.paging = $root.wix.common.Paging.toJSON(obj.paging, helper);
            }
            if (obj.fields != null) {
              json.fields = obj.fields.map(e => {
                return e;
              });
            }
            if (obj.fieldsets != null) {
              json.fieldsets = obj.fieldsets.map(e => {
                return e;
              });
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Query();

          if (json.filter != null) {
            result.filter = $root.google.protobuf.Value.fromJSON(json.filter, helper);
          } else {
            delete result.filter;
          }
          if (json.sort != null) {
            result.sort = json.sort.map(e => {
              return $root.wix.common.Sorting.fromJSON(e, helper);
            });
          } else {
            result.sort = [];
          }
          if (json.paging != null) {
            result.paging = $root.wix.common.Paging.fromJSON(json.paging, helper);
          } else {
            delete result.paging;
          }
          if (json.fields != null) {
            result.fields = json.fields.map(e => {
              return e;
            });
          } else {
            result.fields = [];
          }
          if (json.fieldsets != null) {
            result.fieldsets = json.fieldsets.map(e => {
              return e;
            });
          } else {
            result.fieldsets = [];
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.filter != null) {
              grpc.filter = $root.google.protobuf.Value.toGRPC(obj.filter, helper);
            }
            if (obj.sort != null) {
              grpc.sort = obj.sort.map(e => {
                return $root.wix.common.Sorting.toGRPC(e, helper);
              });
            }
            if (obj.paging != null) {
              grpc.paging = $root.wix.common.Paging.toGRPC(obj.paging, helper);
            }
            if (obj.fields != null) {
              grpc.fields = obj.fields.map(e => {
                return e;
              });
            }
            if (obj.fieldsets != null) {
              grpc.fieldsets = obj.fieldsets.map(e => {
                return e;
              });
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Query();

            if (grpc.filter != null) {
              result.filter = $root.google.protobuf.Value.fromGRPC(grpc.filter, helper);
            } else {
              delete result.filter;
            }
            if (grpc.sort != null) {
              result.sort = grpc.sort.map(e => {
                return $root.wix.common.Sorting.fromGRPC(e, helper);
              });
            } else {
              result.sort = [];
            }
            if (grpc.paging != null) {
              result.paging = $root.wix.common.Paging.fromGRPC(grpc.paging, helper);
            } else {
              delete result.paging;
            }
            if (grpc.fields != null) {
              result.fields = grpc.fields.map(e => {
                return e;
              });
            } else {
              result.fields = [];
            }
            if (grpc.fieldsets != null) {
              result.fieldsets = grpc.fieldsets.map(e => {
                return e;
              });
            } else {
              result.fieldsets = [];
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'filter': {
                'type': $root.google.protobuf.Value,
                'id': 1
              },
              'sort': {
                'rule': 'repeated',
                'type': $root.wix.common.Sorting,
                'id': 2
              },
              'paging': {
                'type': $root.wix.common.Paging,
                'id': 3
              },
              'fields': {
                'rule': 'repeated',
                'type': 'string',
                'id': 4
              },
              'fieldsets': {
                'rule': 'repeated',
                'type': 'string',
                'id': 5
              }
            }
          };
        }
      }

      Object.defineProperty(Query.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Query');
        },
        enumerable: false,
        configurable: false
      });
      return Query;
    }());
    common.Sorting = (function() {

      class Sorting {

        constructor(props) {
          this.fieldName = props && props.fieldName;
          this.order = props && props.order;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.fieldName != null) {
              if (typeof msg.fieldName !== 'string') {
                errors.field('fieldName').error('string expected');
              }
            }
            if (msg.order != null) {
              $root.wix.common.SortOrder.verify(msg.order, helper, errors.field('order'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.fieldName != null) {
              json.fieldName = obj.fieldName;
            }
            if (obj.order != null) {
              json.order = $root.wix.common.SortOrder[obj.order];
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Sorting();

          if (json.fieldName != null) {
            result.fieldName = json.fieldName;
          } else {
            result.fieldName = '';
          }
          if (json.order != null) {
            result.order = $root.wix.common.SortOrder[json.order];
          } else {
            result.order = 0;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.fieldName != null) {
              grpc.fieldName = obj.fieldName;
            }
            if (obj.order != null) {
              grpc.order = obj.order;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Sorting();

            if (grpc.fieldName != null) {
              result.fieldName = grpc.fieldName;
            } else {
              result.fieldName = '';
            }
            if (grpc.order != null) {
              result.order = grpc.order;
            } else {
              result.order = 0;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'fieldName': {
                'type': 'string',
                'id': 1
              },
              'order': {
                'type': $root.wix.common.SortOrder,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(Sorting.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Sorting');
        },
        enumerable: false,
        configurable: false
      });
      return Sorting;
    }());
    common.SortOrder = {
      verify: (value, helper, errors = helper.verification.Errors.empty()) => {
        switch (value) {
          default: {
            errors.error('enum expected');
          }
          case 0:
          case 1:
            break;
        }
        return errors;
      },
      'ASC': 0,
      0: 'ASC',
      'DESC': 1,
      1: 'DESC'
    };
    common.Address = (function() {

      class Address {

        constructor(props) {
          this.country = props && props.country;
          this.subdivision = props && props.subdivision;
          this.city = props && props.city;
          this.postalCode = props && props.postalCode;
          this.streetAddress = props && props.streetAddress;
          this.addressLine = props && props.addressLine;
          this.addressLine_2 = props && props.addressLine_2;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            const oneOfMutex = {};

            if (msg.country != null) {
              $root.google.protobuf.StringValue.verify(msg.country, helper, errors.field('country'));
            }
            if (msg.subdivision != null) {
              $root.google.protobuf.StringValue.verify(msg.subdivision, helper, errors.field('subdivision'));
            }
            if (msg.city != null) {
              $root.google.protobuf.StringValue.verify(msg.city, helper, errors.field('city'));
            }
            if (msg.postalCode != null) {
              $root.google.protobuf.StringValue.verify(msg.postalCode, helper, errors.field('postalCode'));
            }
            if (msg.streetAddress != null) {
              if (oneOfMutex['street']) {
                errors.field('streetAddress').up().field('street').error('multiple values');
              } else {
                oneOfMutex['street'] = true;
                $root.wix.common.StreetAddress.verify(msg.streetAddress, helper, errors.field('streetAddress'));
              }
            }
            if (msg.addressLine != null) {
              if (oneOfMutex['street']) {
                errors.field('addressLine').up().field('street').error('multiple values');
              } else {
                oneOfMutex['street'] = true;
                $root.google.protobuf.StringValue.verify(msg.addressLine, helper, errors.field('addressLine'));
              }
            }
            if (msg.addressLine_2 != null) {
              $root.google.protobuf.StringValue.verify(msg.addressLine_2, helper, errors.field('addressLine_2'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.country != null) {
              json.country = $root.google.protobuf.StringValue.toJSON(obj.country, helper);
            }
            if (obj.subdivision != null) {
              json.subdivision = $root.google.protobuf.StringValue.toJSON(obj.subdivision, helper);
            }
            if (obj.city != null) {
              json.city = $root.google.protobuf.StringValue.toJSON(obj.city, helper);
            }
            if (obj.postalCode != null) {
              json.postalCode = $root.google.protobuf.StringValue.toJSON(obj.postalCode, helper);
            }
            if (obj.streetAddress != null) {
              json.streetAddress = $root.wix.common.StreetAddress.toJSON(obj.streetAddress, helper);
            }
            if (obj.addressLine != null) {
              json.addressLine = $root.google.protobuf.StringValue.toJSON(obj.addressLine, helper);
            }
            if (obj.addressLine_2 != null) {
              json.addressLine_2 = $root.google.protobuf.StringValue.toJSON(obj.addressLine_2, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Address();

          if (json.country != null) {
            result.country = $root.google.protobuf.StringValue.fromJSON(json.country, helper);
          } else {
            delete result.country;
          }
          if (json.subdivision != null) {
            result.subdivision = $root.google.protobuf.StringValue.fromJSON(json.subdivision, helper);
          } else {
            delete result.subdivision;
          }
          if (json.city != null) {
            result.city = $root.google.protobuf.StringValue.fromJSON(json.city, helper);
          } else {
            delete result.city;
          }
          if (json.postalCode != null) {
            result.postalCode = $root.google.protobuf.StringValue.fromJSON(json.postalCode, helper);
          } else {
            delete result.postalCode;
          }
          if (json.streetAddress != null) {
            result.streetAddress = $root.wix.common.StreetAddress.fromJSON(json.streetAddress, helper);
          } else {
            delete result.streetAddress;
          }
          if (json.addressLine != null) {
            result.addressLine = $root.google.protobuf.StringValue.fromJSON(json.addressLine, helper);
          } else {
            delete result.addressLine;
          }
          if (json.addressLine_2 != null) {
            result.addressLine_2 = $root.google.protobuf.StringValue.fromJSON(json.addressLine_2, helper);
          } else {
            delete result.addressLine_2;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.country != null) {
              grpc.country = $root.google.protobuf.StringValue.toGRPC(obj.country, helper);
            }
            if (obj.subdivision != null) {
              grpc.subdivision = $root.google.protobuf.StringValue.toGRPC(obj.subdivision, helper);
            }
            if (obj.city != null) {
              grpc.city = $root.google.protobuf.StringValue.toGRPC(obj.city, helper);
            }
            if (obj.postalCode != null) {
              grpc.postalCode = $root.google.protobuf.StringValue.toGRPC(obj.postalCode, helper);
            }
            if (obj.streetAddress != null) {
              grpc.streetAddress = $root.wix.common.StreetAddress.toGRPC(obj.streetAddress, helper);
            }
            if (obj.addressLine != null) {
              grpc.addressLine = $root.google.protobuf.StringValue.toGRPC(obj.addressLine, helper);
            }
            if (obj.addressLine_2 != null) {
              grpc.addressLine_2 = $root.google.protobuf.StringValue.toGRPC(obj.addressLine_2, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Address();

            if (grpc.country != null) {
              result.country = $root.google.protobuf.StringValue.fromGRPC(grpc.country, helper);
            } else {
              delete result.country;
            }
            if (grpc.subdivision != null) {
              result.subdivision = $root.google.protobuf.StringValue.fromGRPC(grpc.subdivision, helper);
            } else {
              delete result.subdivision;
            }
            if (grpc.city != null) {
              result.city = $root.google.protobuf.StringValue.fromGRPC(grpc.city, helper);
            } else {
              delete result.city;
            }
            if (grpc.postalCode != null) {
              result.postalCode = $root.google.protobuf.StringValue.fromGRPC(grpc.postalCode, helper);
            } else {
              delete result.postalCode;
            }
            if (grpc.streetAddress != null) {
              result.streetAddress = $root.wix.common.StreetAddress.fromGRPC(grpc.streetAddress, helper);
            } else {
              delete result.streetAddress;
            }
            if (grpc.addressLine != null) {
              result.addressLine = $root.google.protobuf.StringValue.fromGRPC(grpc.addressLine, helper);
            } else {
              delete result.addressLine;
            }
            if (grpc.addressLine_2 != null) {
              result.addressLine_2 = $root.google.protobuf.StringValue.fromGRPC(grpc.addressLine_2, helper);
            } else {
              delete result.addressLine_2;
            }
            return result;
          }
        }

        static describe() {
          return {
            'oneofs': {
              'street': {
                'oneof': [
                  'streetAddress',
                  'addressLine'
                ]
              }
            },
            'fields': {
              'country': {
                'type': $root.google.protobuf.StringValue,
                'id': 1,
                'options': {
                  '(wix.api.format)': 'COUNTRY'
                }
              },
              'subdivision': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              },
              'city': {
                'type': $root.google.protobuf.StringValue,
                'id': 3
              },
              'postalCode': {
                'type': $root.google.protobuf.StringValue,
                'id': 4
              },
              'streetAddress': {
                'type': $root.wix.common.StreetAddress,
                'id': 5
              },
              'addressLine': {
                'type': $root.google.protobuf.StringValue,
                'id': 6
              },
              'addressLine_2': {
                'type': $root.google.protobuf.StringValue,
                'id': 7
              }
            }
          };
        }
      }

      Object.defineProperty(Address.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Address');
        },
        enumerable: false,
        configurable: false
      });
      return Address;
    }());
    common.StreetAddress = (function() {

      class StreetAddress {

        constructor(props) {
          this.number = props && props.number;
          this.name = props && props.name;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.number != null) {
              if (typeof msg.number !== 'string') {
                errors.field('number').error('string expected');
              }
            }
            if (msg.name != null) {
              if (typeof msg.name !== 'string') {
                errors.field('name').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.number != null) {
              json.number = obj.number;
            }
            if (obj.name != null) {
              json.name = obj.name;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.StreetAddress();

          if (json.number != null) {
            result.number = json.number;
          } else {
            result.number = '';
          }
          if (json.name != null) {
            result.name = json.name;
          } else {
            result.name = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.number != null) {
              grpc.number = obj.number;
            }
            if (obj.name != null) {
              grpc.name = obj.name;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.StreetAddress();

            if (grpc.number != null) {
              result.number = grpc.number;
            } else {
              result.number = '';
            }
            if (grpc.name != null) {
              result.name = grpc.name;
            } else {
              result.name = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'number': {
                'type': 'string',
                'id': 1
              },
              'name': {
                'type': 'string',
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(StreetAddress.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.StreetAddress');
        },
        enumerable: false,
        configurable: false
      });
      return StreetAddress;
    }());
    common.AddressContactDetails = (function() {

      class AddressContactDetails {

        constructor(props) {
          this.fullName = props && props.fullName;
          this.phone = props && props.phone;
          this.company = props && props.company;
          this.email = props && props.email;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.fullName != null) {
              $root.google.protobuf.StringValue.verify(msg.fullName, helper, errors.field('fullName'));
            }
            if (msg.phone != null) {
              $root.google.protobuf.StringValue.verify(msg.phone, helper, errors.field('phone'));
            }
            if (msg.company != null) {
              $root.google.protobuf.StringValue.verify(msg.company, helper, errors.field('company'));
            }
            if (msg.email != null) {
              $root.google.protobuf.StringValue.verify(msg.email, helper, errors.field('email'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.fullName != null) {
              json.fullName = $root.google.protobuf.StringValue.toJSON(obj.fullName, helper);
            }
            if (obj.phone != null) {
              json.phone = $root.google.protobuf.StringValue.toJSON(obj.phone, helper);
            }
            if (obj.company != null) {
              json.company = $root.google.protobuf.StringValue.toJSON(obj.company, helper);
            }
            if (obj.email != null) {
              json.email = $root.google.protobuf.StringValue.toJSON(obj.email, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.AddressContactDetails();

          if (json.fullName != null) {
            result.fullName = $root.google.protobuf.StringValue.fromJSON(json.fullName, helper);
          } else {
            delete result.fullName;
          }
          if (json.phone != null) {
            result.phone = $root.google.protobuf.StringValue.fromJSON(json.phone, helper);
          } else {
            delete result.phone;
          }
          if (json.company != null) {
            result.company = $root.google.protobuf.StringValue.fromJSON(json.company, helper);
          } else {
            delete result.company;
          }
          if (json.email != null) {
            result.email = $root.google.protobuf.StringValue.fromJSON(json.email, helper);
          } else {
            delete result.email;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.fullName != null) {
              grpc.fullName = $root.google.protobuf.StringValue.toGRPC(obj.fullName, helper);
            }
            if (obj.phone != null) {
              grpc.phone = $root.google.protobuf.StringValue.toGRPC(obj.phone, helper);
            }
            if (obj.company != null) {
              grpc.company = $root.google.protobuf.StringValue.toGRPC(obj.company, helper);
            }
            if (obj.email != null) {
              grpc.email = $root.google.protobuf.StringValue.toGRPC(obj.email, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.AddressContactDetails();

            if (grpc.fullName != null) {
              result.fullName = $root.google.protobuf.StringValue.fromGRPC(grpc.fullName, helper);
            } else {
              delete result.fullName;
            }
            if (grpc.phone != null) {
              result.phone = $root.google.protobuf.StringValue.fromGRPC(grpc.phone, helper);
            } else {
              delete result.phone;
            }
            if (grpc.company != null) {
              result.company = $root.google.protobuf.StringValue.fromGRPC(grpc.company, helper);
            } else {
              delete result.company;
            }
            if (grpc.email != null) {
              result.email = $root.google.protobuf.StringValue.fromGRPC(grpc.email, helper);
            } else {
              delete result.email;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'fullName': {
                'type': $root.google.protobuf.StringValue,
                'id': 1
              },
              'phone': {
                'type': $root.google.protobuf.StringValue,
                'id': 2,
                'options': {
                  '(wix.api.format)': 'PHONE'
                }
              },
              'company': {
                'type': $root.google.protobuf.StringValue,
                'id': 3
              },
              'email': {
                'type': $root.google.protobuf.StringValue,
                'id': 4,
                'options': {
                  '(wix.api.format)': 'EMAIL'
                }
              }
            }
          };
        }
      }

      Object.defineProperty(AddressContactDetails.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.AddressContactDetails');
        },
        enumerable: false,
        configurable: false
      });
      return AddressContactDetails;
    }());
    common.FullAddressContactDetails = (function() {

      class FullAddressContactDetails {

        constructor(props) {
          this.firstName = props && props.firstName;
          this.lastName = props && props.lastName;
          this.phone = props && props.phone;
          this.company = props && props.company;
          this.email = props && props.email;
          this.vatId = props && props.vatId;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.firstName != null) {
              $root.google.protobuf.StringValue.verify(msg.firstName, helper, errors.field('firstName'));
            }
            if (msg.lastName != null) {
              $root.google.protobuf.StringValue.verify(msg.lastName, helper, errors.field('lastName'));
            }
            if (msg.phone != null) {
              $root.google.protobuf.StringValue.verify(msg.phone, helper, errors.field('phone'));
            }
            if (msg.company != null) {
              $root.google.protobuf.StringValue.verify(msg.company, helper, errors.field('company'));
            }
            if (msg.email != null) {
              $root.google.protobuf.StringValue.verify(msg.email, helper, errors.field('email'));
            }
            if (msg.vatId != null) {
              $root.wix.common.VatId.verify(msg.vatId, helper, errors.field('vatId'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.firstName != null) {
              json.firstName = $root.google.protobuf.StringValue.toJSON(obj.firstName, helper);
            }
            if (obj.lastName != null) {
              json.lastName = $root.google.protobuf.StringValue.toJSON(obj.lastName, helper);
            }
            if (obj.phone != null) {
              json.phone = $root.google.protobuf.StringValue.toJSON(obj.phone, helper);
            }
            if (obj.company != null) {
              json.company = $root.google.protobuf.StringValue.toJSON(obj.company, helper);
            }
            if (obj.email != null) {
              json.email = $root.google.protobuf.StringValue.toJSON(obj.email, helper);
            }
            if (obj.vatId != null) {
              json.vatId = $root.wix.common.VatId.toJSON(obj.vatId, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.FullAddressContactDetails();

          if (json.firstName != null) {
            result.firstName = $root.google.protobuf.StringValue.fromJSON(json.firstName, helper);
          } else {
            delete result.firstName;
          }
          if (json.lastName != null) {
            result.lastName = $root.google.protobuf.StringValue.fromJSON(json.lastName, helper);
          } else {
            delete result.lastName;
          }
          if (json.phone != null) {
            result.phone = $root.google.protobuf.StringValue.fromJSON(json.phone, helper);
          } else {
            delete result.phone;
          }
          if (json.company != null) {
            result.company = $root.google.protobuf.StringValue.fromJSON(json.company, helper);
          } else {
            delete result.company;
          }
          if (json.email != null) {
            result.email = $root.google.protobuf.StringValue.fromJSON(json.email, helper);
          } else {
            delete result.email;
          }
          if (json.vatId != null) {
            result.vatId = $root.wix.common.VatId.fromJSON(json.vatId, helper);
          } else {
            delete result.vatId;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.firstName != null) {
              grpc.firstName = $root.google.protobuf.StringValue.toGRPC(obj.firstName, helper);
            }
            if (obj.lastName != null) {
              grpc.lastName = $root.google.protobuf.StringValue.toGRPC(obj.lastName, helper);
            }
            if (obj.phone != null) {
              grpc.phone = $root.google.protobuf.StringValue.toGRPC(obj.phone, helper);
            }
            if (obj.company != null) {
              grpc.company = $root.google.protobuf.StringValue.toGRPC(obj.company, helper);
            }
            if (obj.email != null) {
              grpc.email = $root.google.protobuf.StringValue.toGRPC(obj.email, helper);
            }
            if (obj.vatId != null) {
              grpc.vatId = $root.wix.common.VatId.toGRPC(obj.vatId, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.FullAddressContactDetails();

            if (grpc.firstName != null) {
              result.firstName = $root.google.protobuf.StringValue.fromGRPC(grpc.firstName, helper);
            } else {
              delete result.firstName;
            }
            if (grpc.lastName != null) {
              result.lastName = $root.google.protobuf.StringValue.fromGRPC(grpc.lastName, helper);
            } else {
              delete result.lastName;
            }
            if (grpc.phone != null) {
              result.phone = $root.google.protobuf.StringValue.fromGRPC(grpc.phone, helper);
            } else {
              delete result.phone;
            }
            if (grpc.company != null) {
              result.company = $root.google.protobuf.StringValue.fromGRPC(grpc.company, helper);
            } else {
              delete result.company;
            }
            if (grpc.email != null) {
              result.email = $root.google.protobuf.StringValue.fromGRPC(grpc.email, helper);
            } else {
              delete result.email;
            }
            if (grpc.vatId != null) {
              result.vatId = $root.wix.common.VatId.fromGRPC(grpc.vatId, helper);
            } else {
              delete result.vatId;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'firstName': {
                'type': $root.google.protobuf.StringValue,
                'id': 1
              },
              'lastName': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              },
              'phone': {
                'type': $root.google.protobuf.StringValue,
                'id': 3,
                'options': {
                  '(wix.api.format)': 'PHONE'
                }
              },
              'company': {
                'type': $root.google.protobuf.StringValue,
                'id': 4
              },
              'email': {
                'type': $root.google.protobuf.StringValue,
                'id': 5,
                'options': {
                  '(wix.api.format)': 'EMAIL'
                }
              },
              'vatId': {
                'type': $root.wix.common.VatId,
                'id': 7
              }
            }
          };
        }
      }

      Object.defineProperty(FullAddressContactDetails.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.FullAddressContactDetails');
        },
        enumerable: false,
        configurable: false
      });
      return FullAddressContactDetails;
    }());
    common.VatId = (function() {

      class VatId {

        constructor(props) {
          this.id = props && props.id;
          this.type = props && props.type;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.id != null) {
              if (typeof msg.id !== 'string') {
                errors.field('id').error('string expected');
              }
            }
            if (msg.type != null) {
              $root.wix.common.VatType.verify(msg.type, helper, errors.field('type'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.id != null) {
              json.id = obj.id;
            }
            if (obj.type != null) {
              json.type = $root.wix.common.VatType[obj.type];
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.VatId();

          if (json.id != null) {
            result.id = json.id;
          } else {
            result.id = '';
          }
          if (json.type != null) {
            result.type = $root.wix.common.VatType[json.type];
          } else {
            result.type = 0;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.id != null) {
              grpc.id = obj.id;
            }
            if (obj.type != null) {
              grpc.type = obj.type;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.VatId();

            if (grpc.id != null) {
              result.id = grpc.id;
            } else {
              result.id = '';
            }
            if (grpc.type != null) {
              result.type = grpc.type;
            } else {
              result.type = 0;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'id': {
                'type': 'string',
                'id': 1
              },
              'type': {
                'type': $root.wix.common.VatType,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(VatId.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.VatId');
        },
        enumerable: false,
        configurable: false
      });
      return VatId;
    }());
    common.VatType = {
      verify: (value, helper, errors = helper.verification.Errors.empty()) => {
        switch (value) {
          default: {
            errors.error('enum expected');
          }
          case 0:
          case 1:
          case 2:
            break;
        }
        return errors;
      },
      'UNSPECIFIED': 0,
      0: 'UNSPECIFIED',
      'CPF': 1,
      1: 'CPF',
      'CNPJ': 2,
      2: 'CNPJ'
    };
    common.AddressLocation = (function() {

      class AddressLocation {

        constructor(props) {
          this.latitude = props && props.latitude;
          this.longitude = props && props.longitude;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.latitude != null) {
              $root.google.protobuf.DoubleValue.verify(msg.latitude, helper, errors.field('latitude'));
            }
            if (msg.longitude != null) {
              $root.google.protobuf.DoubleValue.verify(msg.longitude, helper, errors.field('longitude'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.latitude != null) {
              json.latitude = $root.google.protobuf.DoubleValue.toJSON(obj.latitude, helper);
            }
            if (obj.longitude != null) {
              json.longitude = $root.google.protobuf.DoubleValue.toJSON(obj.longitude, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.AddressLocation();

          if (json.latitude != null) {
            result.latitude = $root.google.protobuf.DoubleValue.fromJSON(json.latitude, helper);
          } else {
            delete result.latitude;
          }
          if (json.longitude != null) {
            result.longitude = $root.google.protobuf.DoubleValue.fromJSON(json.longitude, helper);
          } else {
            delete result.longitude;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.latitude != null) {
              grpc.latitude = $root.google.protobuf.DoubleValue.toGRPC(obj.latitude, helper);
            }
            if (obj.longitude != null) {
              grpc.longitude = $root.google.protobuf.DoubleValue.toGRPC(obj.longitude, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.AddressLocation();

            if (grpc.latitude != null) {
              result.latitude = $root.google.protobuf.DoubleValue.fromGRPC(grpc.latitude, helper);
            } else {
              delete result.latitude;
            }
            if (grpc.longitude != null) {
              result.longitude = $root.google.protobuf.DoubleValue.fromGRPC(grpc.longitude, helper);
            } else {
              delete result.longitude;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'latitude': {
                'type': $root.google.protobuf.DoubleValue,
                'id': 1
              },
              'longitude': {
                'type': $root.google.protobuf.DoubleValue,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(AddressLocation.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.AddressLocation');
        },
        enumerable: false,
        configurable: false
      });
      return AddressLocation;
    }());
    common.Image = (function() {

      class Image {

        constructor(props) {
          this.id = props && props.id;
          this.url = props && props.url;
          this.height = props && props.height;
          this.width = props && props.width;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.id != null) {
              if (typeof msg.id !== 'string') {
                errors.field('id').error('string expected');
              }
            }
            if (msg.url != null) {
              if (typeof msg.url !== 'string') {
                errors.field('url').error('string expected');
              }
            }
            if (msg.height != null) {
              if (!Number.isInteger(msg.height)) {
                errors.field('height').error('integer expected');
              }
            }
            if (msg.width != null) {
              if (!Number.isInteger(msg.width)) {
                errors.field('width').error('integer expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.id != null) {
              json.id = obj.id;
            }
            if (obj.url != null) {
              json.url = obj.url;
            }
            if (obj.height != null) {
              json.height = obj.height;
            }
            if (obj.width != null) {
              json.width = obj.width;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Image();

          if (json.id != null) {
            result.id = json.id;
          } else {
            result.id = '';
          }
          if (json.url != null) {
            result.url = json.url;
          } else {
            result.url = '';
          }
          if (json.height != null) {
            result.height = json.height;
          } else {
            result.height = 0;
          }
          if (json.width != null) {
            result.width = json.width;
          } else {
            result.width = 0;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.id != null) {
              grpc.id = obj.id;
            }
            if (obj.url != null) {
              grpc.url = obj.url;
            }
            if (obj.height != null) {
              grpc.height = obj.height;
            }
            if (obj.width != null) {
              grpc.width = obj.width;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Image();

            if (grpc.id != null) {
              result.id = grpc.id;
            } else {
              result.id = '';
            }
            if (grpc.url != null) {
              result.url = grpc.url;
            } else {
              result.url = '';
            }
            if (grpc.height != null) {
              result.height = grpc.height;
            } else {
              result.height = 0;
            }
            if (grpc.width != null) {
              result.width = grpc.width;
            } else {
              result.width = 0;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'id': {
                'type': 'string',
                'id': 1
              },
              'url': {
                'type': 'string',
                'id': 2
              },
              'height': {
                'type': 'int32',
                'id': 3
              },
              'width': {
                'type': 'int32',
                'id': 4
              }
            }
          };
        }
      }

      Object.defineProperty(Image.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Image');
        },
        enumerable: false,
        configurable: false
      });
      return Image;
    }());
    common.Video = (function() {

      class Video {

        constructor(props) {
          this.id = props && props.id;
          this.url = props && props.url;
          this.height = props && props.height;
          this.width = props && props.width;
          this.thumbnail = props && props.thumbnail;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.id != null) {
              if (typeof msg.id !== 'string') {
                errors.field('id').error('string expected');
              }
            }
            if (msg.url != null) {
              if (typeof msg.url !== 'string') {
                errors.field('url').error('string expected');
              }
            }
            if (msg.height != null) {
              if (!Number.isInteger(msg.height)) {
                errors.field('height').error('integer expected');
              }
            }
            if (msg.width != null) {
              if (!Number.isInteger(msg.width)) {
                errors.field('width').error('integer expected');
              }
            }
            if (msg.thumbnail != null) {
              $root.wix.common.Image.verify(msg.thumbnail, helper, errors.field('thumbnail'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.id != null) {
              json.id = obj.id;
            }
            if (obj.url != null) {
              json.url = obj.url;
            }
            if (obj.height != null) {
              json.height = obj.height;
            }
            if (obj.width != null) {
              json.width = obj.width;
            }
            if (obj.thumbnail != null) {
              json.thumbnail = $root.wix.common.Image.toJSON(obj.thumbnail, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Video();

          if (json.id != null) {
            result.id = json.id;
          } else {
            result.id = '';
          }
          if (json.url != null) {
            result.url = json.url;
          } else {
            result.url = '';
          }
          if (json.height != null) {
            result.height = json.height;
          } else {
            result.height = 0;
          }
          if (json.width != null) {
            result.width = json.width;
          } else {
            result.width = 0;
          }
          if (json.thumbnail != null) {
            result.thumbnail = $root.wix.common.Image.fromJSON(json.thumbnail, helper);
          } else {
            delete result.thumbnail;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.id != null) {
              grpc.id = obj.id;
            }
            if (obj.url != null) {
              grpc.url = obj.url;
            }
            if (obj.height != null) {
              grpc.height = obj.height;
            }
            if (obj.width != null) {
              grpc.width = obj.width;
            }
            if (obj.thumbnail != null) {
              grpc.thumbnail = $root.wix.common.Image.toGRPC(obj.thumbnail, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Video();

            if (grpc.id != null) {
              result.id = grpc.id;
            } else {
              result.id = '';
            }
            if (grpc.url != null) {
              result.url = grpc.url;
            } else {
              result.url = '';
            }
            if (grpc.height != null) {
              result.height = grpc.height;
            } else {
              result.height = 0;
            }
            if (grpc.width != null) {
              result.width = grpc.width;
            } else {
              result.width = 0;
            }
            if (grpc.thumbnail != null) {
              result.thumbnail = $root.wix.common.Image.fromGRPC(grpc.thumbnail, helper);
            } else {
              delete result.thumbnail;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'id': {
                'type': 'string',
                'id': 1
              },
              'url': {
                'type': 'string',
                'id': 2
              },
              'height': {
                'type': 'int32',
                'id': 3
              },
              'width': {
                'type': 'int32',
                'id': 4
              },
              'thumbnail': {
                'type': $root.wix.common.Image,
                'id': 5
              }
            }
          };
        }
      }

      Object.defineProperty(Video.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Video');
        },
        enumerable: false,
        configurable: false
      });
      return Video;
    }());
    common.Document = (function() {

      class Document {

        constructor(props) {
          this.id = props && props.id;
          this.url = props && props.url;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.id != null) {
              if (typeof msg.id !== 'string') {
                errors.field('id').error('string expected');
              }
            }
            if (msg.url != null) {
              if (typeof msg.url !== 'string') {
                errors.field('url').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.id != null) {
              json.id = obj.id;
            }
            if (obj.url != null) {
              json.url = obj.url;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.Document();

          if (json.id != null) {
            result.id = json.id;
          } else {
            result.id = '';
          }
          if (json.url != null) {
            result.url = json.url;
          } else {
            result.url = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.id != null) {
              grpc.id = obj.id;
            }
            if (obj.url != null) {
              grpc.url = obj.url;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.Document();

            if (grpc.id != null) {
              result.id = grpc.id;
            } else {
              result.id = '';
            }
            if (grpc.url != null) {
              result.url = grpc.url;
            } else {
              result.url = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'id': {
                'type': 'string',
                'id': 1
              },
              'url': {
                'type': 'string',
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(Document.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.Document');
        },
        enumerable: false,
        configurable: false
      });
      return Document;
    }());
    common.MediaItem = (function() {

      class MediaItem {

        constructor(props) {
          this.image = props && props.image;
          this.video = props && props.video;
          this.document = props && props.document;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            const oneOfMutex = {};

            if (msg.image != null) {
              if (oneOfMutex['media']) {
                errors.field('image').up().field('media').error('multiple values');
              } else {
                oneOfMutex['media'] = true;
                $root.wix.common.Image.verify(msg.image, helper, errors.field('image'));
              }
            }
            if (msg.video != null) {
              if (oneOfMutex['media']) {
                errors.field('video').up().field('media').error('multiple values');
              } else {
                oneOfMutex['media'] = true;
                $root.wix.common.Video.verify(msg.video, helper, errors.field('video'));
              }
            }
            if (msg.document != null) {
              if (oneOfMutex['media']) {
                errors.field('document').up().field('media').error('multiple values');
              } else {
                oneOfMutex['media'] = true;
                $root.wix.common.Document.verify(msg.document, helper, errors.field('document'));
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.image != null) {
              json.image = $root.wix.common.Image.toJSON(obj.image, helper);
            }
            if (obj.video != null) {
              json.video = $root.wix.common.Video.toJSON(obj.video, helper);
            }
            if (obj.document != null) {
              json.document = $root.wix.common.Document.toJSON(obj.document, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.MediaItem();

          if (json.image != null) {
            result.image = $root.wix.common.Image.fromJSON(json.image, helper);
          } else {
            delete result.image;
          }
          if (json.video != null) {
            result.video = $root.wix.common.Video.fromJSON(json.video, helper);
          } else {
            delete result.video;
          }
          if (json.document != null) {
            result.document = $root.wix.common.Document.fromJSON(json.document, helper);
          } else {
            delete result.document;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.image != null) {
              grpc.image = $root.wix.common.Image.toGRPC(obj.image, helper);
            }
            if (obj.video != null) {
              grpc.video = $root.wix.common.Video.toGRPC(obj.video, helper);
            }
            if (obj.document != null) {
              grpc.document = $root.wix.common.Document.toGRPC(obj.document, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.MediaItem();

            if (grpc.image != null) {
              result.image = $root.wix.common.Image.fromGRPC(grpc.image, helper);
            } else {
              delete result.image;
            }
            if (grpc.video != null) {
              result.video = $root.wix.common.Video.fromGRPC(grpc.video, helper);
            } else {
              delete result.video;
            }
            if (grpc.document != null) {
              result.document = $root.wix.common.Document.fromGRPC(grpc.document, helper);
            } else {
              delete result.document;
            }
            return result;
          }
        }

        static describe() {
          return {
            'oneofs': {
              'media': {
                'oneof': [
                  'image',
                  'video',
                  'document'
                ]
              }
            },
            'fields': {
              'image': {
                'type': $root.wix.common.Image,
                'id': 1
              },
              'video': {
                'type': $root.wix.common.Video,
                'id': 2
              },
              'document': {
                'type': $root.wix.common.Document,
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(MediaItem.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.MediaItem');
        },
        enumerable: false,
        configurable: false
      });
      return MediaItem;
    }());
    common.PageUrl = (function() {

      class PageUrl {

        constructor(props) {
          this.base = props && props.base;
          this.path = props && props.path;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.base != null) {
              if (typeof msg.base !== 'string') {
                errors.field('base').error('string expected');
              }
            }
            if (msg.path != null) {
              if (typeof msg.path !== 'string') {
                errors.field('path').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.base != null) {
              json.base = obj.base;
            }
            if (obj.path != null) {
              json.path = obj.path;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.PageUrl();

          if (json.base != null) {
            result.base = json.base;
          } else {
            result.base = '';
          }
          if (json.path != null) {
            result.path = json.path;
          } else {
            result.path = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.base != null) {
              grpc.base = obj.base;
            }
            if (obj.path != null) {
              grpc.path = obj.path;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.PageUrl();

            if (grpc.base != null) {
              result.base = grpc.base;
            } else {
              result.base = '';
            }
            if (grpc.path != null) {
              result.path = grpc.path;
            } else {
              result.path = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'base': {
                'type': 'string',
                'id': 1
              },
              'path': {
                'type': 'string',
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(PageUrl.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.PageUrl');
        },
        enumerable: false,
        configurable: false
      });
      return PageUrl;
    }());
    common.WixLink = (function() {

      class WixLink {

        constructor(props) {
          this.external = props && props.external;
          this.page = props && props.page;
          this.anchor = props && props.anchor;
          this.dynamicPage = props && props.dynamicPage;
          this.document = props && props.document;
          this.email = props && props.email;
          this.phone = props && props.phone;
          this.address = props && props.address;
          this.whatsApp = props && props.whatsApp;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            const oneOfMutex = {};

            if (msg.external != null) {
              if (oneOfMutex['Link']) {
                errors.field('external').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.ExternalLink.verify(msg.external, helper, errors.field('external'));
              }
            }
            if (msg.page != null) {
              if (oneOfMutex['Link']) {
                errors.field('page').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.PageLink.verify(msg.page, helper, errors.field('page'));
              }
            }
            if (msg.anchor != null) {
              if (oneOfMutex['Link']) {
                errors.field('anchor').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.AnchorLink.verify(msg.anchor, helper, errors.field('anchor'));
              }
            }
            if (msg.dynamicPage != null) {
              if (oneOfMutex['Link']) {
                errors.field('dynamicPage').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.DynamicPageLink.verify(msg.dynamicPage, helper, errors.field('dynamicPage'));
              }
            }
            if (msg.document != null) {
              if (oneOfMutex['Link']) {
                errors.field('document').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.DocumentLink.verify(msg.document, helper, errors.field('document'));
              }
            }
            if (msg.email != null) {
              if (oneOfMutex['Link']) {
                errors.field('email').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.EmailLink.verify(msg.email, helper, errors.field('email'));
              }
            }
            if (msg.phone != null) {
              if (oneOfMutex['Link']) {
                errors.field('phone').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.PhoneLink.verify(msg.phone, helper, errors.field('phone'));
              }
            }
            if (msg.address != null) {
              if (oneOfMutex['Link']) {
                errors.field('address').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.AddressLink.verify(msg.address, helper, errors.field('address'));
              }
            }
            if (msg.whatsApp != null) {
              if (oneOfMutex['Link']) {
                errors.field('whatsApp').up().field('Link').error('multiple values');
              } else {
                oneOfMutex['Link'] = true;
                $root.wix.common.WhatsAppLink.verify(msg.whatsApp, helper, errors.field('whatsApp'));
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.external != null) {
              json.external = $root.wix.common.ExternalLink.toJSON(obj.external, helper);
            }
            if (obj.page != null) {
              json.page = $root.wix.common.PageLink.toJSON(obj.page, helper);
            }
            if (obj.anchor != null) {
              json.anchor = $root.wix.common.AnchorLink.toJSON(obj.anchor, helper);
            }
            if (obj.dynamicPage != null) {
              json.dynamicPage = $root.wix.common.DynamicPageLink.toJSON(obj.dynamicPage, helper);
            }
            if (obj.document != null) {
              json.document = $root.wix.common.DocumentLink.toJSON(obj.document, helper);
            }
            if (obj.email != null) {
              json.email = $root.wix.common.EmailLink.toJSON(obj.email, helper);
            }
            if (obj.phone != null) {
              json.phone = $root.wix.common.PhoneLink.toJSON(obj.phone, helper);
            }
            if (obj.address != null) {
              json.address = $root.wix.common.AddressLink.toJSON(obj.address, helper);
            }
            if (obj.whatsApp != null) {
              json.whatsApp = $root.wix.common.WhatsAppLink.toJSON(obj.whatsApp, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.WixLink();

          if (json.external != null) {
            result.external = $root.wix.common.ExternalLink.fromJSON(json.external, helper);
          } else {
            delete result.external;
          }
          if (json.page != null) {
            result.page = $root.wix.common.PageLink.fromJSON(json.page, helper);
          } else {
            delete result.page;
          }
          if (json.anchor != null) {
            result.anchor = $root.wix.common.AnchorLink.fromJSON(json.anchor, helper);
          } else {
            delete result.anchor;
          }
          if (json.dynamicPage != null) {
            result.dynamicPage = $root.wix.common.DynamicPageLink.fromJSON(json.dynamicPage, helper);
          } else {
            delete result.dynamicPage;
          }
          if (json.document != null) {
            result.document = $root.wix.common.DocumentLink.fromJSON(json.document, helper);
          } else {
            delete result.document;
          }
          if (json.email != null) {
            result.email = $root.wix.common.EmailLink.fromJSON(json.email, helper);
          } else {
            delete result.email;
          }
          if (json.phone != null) {
            result.phone = $root.wix.common.PhoneLink.fromJSON(json.phone, helper);
          } else {
            delete result.phone;
          }
          if (json.address != null) {
            result.address = $root.wix.common.AddressLink.fromJSON(json.address, helper);
          } else {
            delete result.address;
          }
          if (json.whatsApp != null) {
            result.whatsApp = $root.wix.common.WhatsAppLink.fromJSON(json.whatsApp, helper);
          } else {
            delete result.whatsApp;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.external != null) {
              grpc.external = $root.wix.common.ExternalLink.toGRPC(obj.external, helper);
            }
            if (obj.page != null) {
              grpc.page = $root.wix.common.PageLink.toGRPC(obj.page, helper);
            }
            if (obj.anchor != null) {
              grpc.anchor = $root.wix.common.AnchorLink.toGRPC(obj.anchor, helper);
            }
            if (obj.dynamicPage != null) {
              grpc.dynamicPage = $root.wix.common.DynamicPageLink.toGRPC(obj.dynamicPage, helper);
            }
            if (obj.document != null) {
              grpc.document = $root.wix.common.DocumentLink.toGRPC(obj.document, helper);
            }
            if (obj.email != null) {
              grpc.email = $root.wix.common.EmailLink.toGRPC(obj.email, helper);
            }
            if (obj.phone != null) {
              grpc.phone = $root.wix.common.PhoneLink.toGRPC(obj.phone, helper);
            }
            if (obj.address != null) {
              grpc.address = $root.wix.common.AddressLink.toGRPC(obj.address, helper);
            }
            if (obj.whatsApp != null) {
              grpc.whatsApp = $root.wix.common.WhatsAppLink.toGRPC(obj.whatsApp, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.WixLink();

            if (grpc.external != null) {
              result.external = $root.wix.common.ExternalLink.fromGRPC(grpc.external, helper);
            } else {
              delete result.external;
            }
            if (grpc.page != null) {
              result.page = $root.wix.common.PageLink.fromGRPC(grpc.page, helper);
            } else {
              delete result.page;
            }
            if (grpc.anchor != null) {
              result.anchor = $root.wix.common.AnchorLink.fromGRPC(grpc.anchor, helper);
            } else {
              delete result.anchor;
            }
            if (grpc.dynamicPage != null) {
              result.dynamicPage = $root.wix.common.DynamicPageLink.fromGRPC(grpc.dynamicPage, helper);
            } else {
              delete result.dynamicPage;
            }
            if (grpc.document != null) {
              result.document = $root.wix.common.DocumentLink.fromGRPC(grpc.document, helper);
            } else {
              delete result.document;
            }
            if (grpc.email != null) {
              result.email = $root.wix.common.EmailLink.fromGRPC(grpc.email, helper);
            } else {
              delete result.email;
            }
            if (grpc.phone != null) {
              result.phone = $root.wix.common.PhoneLink.fromGRPC(grpc.phone, helper);
            } else {
              delete result.phone;
            }
            if (grpc.address != null) {
              result.address = $root.wix.common.AddressLink.fromGRPC(grpc.address, helper);
            } else {
              delete result.address;
            }
            if (grpc.whatsApp != null) {
              result.whatsApp = $root.wix.common.WhatsAppLink.fromGRPC(grpc.whatsApp, helper);
            } else {
              delete result.whatsApp;
            }
            return result;
          }
        }

        static describe() {
          return {
            'oneofs': {
              'Link': {
                'oneof': [
                  'external',
                  'page',
                  'anchor',
                  'dynamicPage',
                  'document',
                  'email',
                  'phone',
                  'address',
                  'whatsApp'
                ]
              }
            },
            'fields': {
              'external': {
                'type': $root.wix.common.ExternalLink,
                'id': 1
              },
              'page': {
                'type': $root.wix.common.PageLink,
                'id': 2
              },
              'anchor': {
                'type': $root.wix.common.AnchorLink,
                'id': 3
              },
              'dynamicPage': {
                'type': $root.wix.common.DynamicPageLink,
                'id': 4
              },
              'document': {
                'type': $root.wix.common.DocumentLink,
                'id': 5
              },
              'email': {
                'type': $root.wix.common.EmailLink,
                'id': 6
              },
              'phone': {
                'type': $root.wix.common.PhoneLink,
                'id': 7
              },
              'address': {
                'type': $root.wix.common.AddressLink,
                'id': 8
              },
              'whatsApp': {
                'type': $root.wix.common.WhatsAppLink,
                'id': 9
              }
            }
          };
        }
      }

      Object.defineProperty(WixLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.WixLink');
        },
        enumerable: false,
        configurable: false
      });
      return WixLink;
    }());
    common.ExternalLink = (function() {

      class ExternalLink {

        constructor(props) {
          this.url = props && props.url;
          this.target = props && props.target;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.url != null) {
              if (typeof msg.url !== 'string') {
                errors.field('url').error('string expected');
              }
            }
            if (msg.target != null) {
              $root.google.protobuf.StringValue.verify(msg.target, helper, errors.field('target'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.url != null) {
              json.url = obj.url;
            }
            if (obj.target != null) {
              json.target = $root.google.protobuf.StringValue.toJSON(obj.target, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.ExternalLink();

          if (json.url != null) {
            result.url = json.url;
          } else {
            result.url = '';
          }
          if (json.target != null) {
            result.target = $root.google.protobuf.StringValue.fromJSON(json.target, helper);
          } else {
            delete result.target;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.url != null) {
              grpc.url = obj.url;
            }
            if (obj.target != null) {
              grpc.target = $root.google.protobuf.StringValue.toGRPC(obj.target, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.ExternalLink();

            if (grpc.url != null) {
              result.url = grpc.url;
            } else {
              result.url = '';
            }
            if (grpc.target != null) {
              result.target = $root.google.protobuf.StringValue.fromGRPC(grpc.target, helper);
            } else {
              delete result.target;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'url': {
                'type': 'string',
                'id': 1,
                'options': {
                  '(wix.api.format)': 'URI'
                }
              },
              'target': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(ExternalLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.ExternalLink');
        },
        enumerable: false,
        configurable: false
      });
      return ExternalLink;
    }());
    common.PageLink = (function() {

      class PageLink {

        constructor(props) {
          this.pageId = props && props.pageId;
          this.target = props && props.target;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.pageId != null) {
              if (typeof msg.pageId !== 'string') {
                errors.field('pageId').error('string expected');
              }
            }
            if (msg.target != null) {
              $root.google.protobuf.StringValue.verify(msg.target, helper, errors.field('target'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.pageId != null) {
              json.pageId = obj.pageId;
            }
            if (obj.target != null) {
              json.target = $root.google.protobuf.StringValue.toJSON(obj.target, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.PageLink();

          if (json.pageId != null) {
            result.pageId = json.pageId;
          } else {
            result.pageId = '';
          }
          if (json.target != null) {
            result.target = $root.google.protobuf.StringValue.fromJSON(json.target, helper);
          } else {
            delete result.target;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.pageId != null) {
              grpc.pageId = obj.pageId;
            }
            if (obj.target != null) {
              grpc.target = $root.google.protobuf.StringValue.toGRPC(obj.target, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.PageLink();

            if (grpc.pageId != null) {
              result.pageId = grpc.pageId;
            } else {
              result.pageId = '';
            }
            if (grpc.target != null) {
              result.target = $root.google.protobuf.StringValue.fromGRPC(grpc.target, helper);
            } else {
              delete result.target;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'pageId': {
                'type': 'string',
                'id': 1
              },
              'target': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(PageLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.PageLink');
        },
        enumerable: false,
        configurable: false
      });
      return PageLink;
    }());
    common.AnchorLink = (function() {

      class AnchorLink {

        constructor(props) {
          this.anchorName = props && props.anchorName;
          this.anchorDataId = props && props.anchorDataId;
          this.pageId = props && props.pageId;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.anchorName != null) {
              if (typeof msg.anchorName !== 'string') {
                errors.field('anchorName').error('string expected');
              }
            }
            if (msg.anchorDataId != null) {
              if (typeof msg.anchorDataId !== 'string') {
                errors.field('anchorDataId').error('string expected');
              }
            }
            if (msg.pageId != null) {
              if (typeof msg.pageId !== 'string') {
                errors.field('pageId').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.anchorName != null) {
              json.anchorName = obj.anchorName;
            }
            if (obj.anchorDataId != null) {
              json.anchorDataId = obj.anchorDataId;
            }
            if (obj.pageId != null) {
              json.pageId = obj.pageId;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.AnchorLink();

          if (json.anchorName != null) {
            result.anchorName = json.anchorName;
          } else {
            result.anchorName = '';
          }
          if (json.anchorDataId != null) {
            result.anchorDataId = json.anchorDataId;
          } else {
            result.anchorDataId = '';
          }
          if (json.pageId != null) {
            result.pageId = json.pageId;
          } else {
            result.pageId = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.anchorName != null) {
              grpc.anchorName = obj.anchorName;
            }
            if (obj.anchorDataId != null) {
              grpc.anchorDataId = obj.anchorDataId;
            }
            if (obj.pageId != null) {
              grpc.pageId = obj.pageId;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.AnchorLink();

            if (grpc.anchorName != null) {
              result.anchorName = grpc.anchorName;
            } else {
              result.anchorName = '';
            }
            if (grpc.anchorDataId != null) {
              result.anchorDataId = grpc.anchorDataId;
            } else {
              result.anchorDataId = '';
            }
            if (grpc.pageId != null) {
              result.pageId = grpc.pageId;
            } else {
              result.pageId = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'anchorName': {
                'type': 'string',
                'id': 1
              },
              'anchorDataId': {
                'type': 'string',
                'id': 2
              },
              'pageId': {
                'type': 'string',
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(AnchorLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.AnchorLink');
        },
        enumerable: false,
        configurable: false
      });
      return AnchorLink;
    }());
    common.DynamicPageLink = (function() {

      class DynamicPageLink {

        constructor(props) {
          this.routerId = props && props.routerId;
          this.innerRoute = props && props.innerRoute;
          this.anchorDataId = props && props.anchorDataId;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.routerId != null) {
              if (typeof msg.routerId !== 'string') {
                errors.field('routerId').error('string expected');
              }
            }
            if (msg.innerRoute != null) {
              if (typeof msg.innerRoute !== 'string') {
                errors.field('innerRoute').error('string expected');
              }
            }
            if (msg.anchorDataId != null) {
              $root.google.protobuf.StringValue.verify(msg.anchorDataId, helper, errors.field('anchorDataId'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.routerId != null) {
              json.routerId = obj.routerId;
            }
            if (obj.innerRoute != null) {
              json.innerRoute = obj.innerRoute;
            }
            if (obj.anchorDataId != null) {
              json.anchorDataId = $root.google.protobuf.StringValue.toJSON(obj.anchorDataId, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.DynamicPageLink();

          if (json.routerId != null) {
            result.routerId = json.routerId;
          } else {
            result.routerId = '';
          }
          if (json.innerRoute != null) {
            result.innerRoute = json.innerRoute;
          } else {
            result.innerRoute = '';
          }
          if (json.anchorDataId != null) {
            result.anchorDataId = $root.google.protobuf.StringValue.fromJSON(json.anchorDataId, helper);
          } else {
            delete result.anchorDataId;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.routerId != null) {
              grpc.routerId = obj.routerId;
            }
            if (obj.innerRoute != null) {
              grpc.innerRoute = obj.innerRoute;
            }
            if (obj.anchorDataId != null) {
              grpc.anchorDataId = $root.google.protobuf.StringValue.toGRPC(obj.anchorDataId, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.DynamicPageLink();

            if (grpc.routerId != null) {
              result.routerId = grpc.routerId;
            } else {
              result.routerId = '';
            }
            if (grpc.innerRoute != null) {
              result.innerRoute = grpc.innerRoute;
            } else {
              result.innerRoute = '';
            }
            if (grpc.anchorDataId != null) {
              result.anchorDataId = $root.google.protobuf.StringValue.fromGRPC(grpc.anchorDataId, helper);
            } else {
              delete result.anchorDataId;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'routerId': {
                'type': 'string',
                'id': 1
              },
              'innerRoute': {
                'type': 'string',
                'id': 2
              },
              'anchorDataId': {
                'type': $root.google.protobuf.StringValue,
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(DynamicPageLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.DynamicPageLink');
        },
        enumerable: false,
        configurable: false
      });
      return DynamicPageLink;
    }());
    common.DocumentLink = (function() {

      class DocumentLink {

        constructor(props) {
          this.docId = props && props.docId;
          this.name = props && props.name;
          this.indexable = props && props.indexable;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.docId != null) {
              if (typeof msg.docId !== 'string') {
                errors.field('docId').error('string expected');
              }
            }
            if (msg.name != null) {
              $root.google.protobuf.StringValue.verify(msg.name, helper, errors.field('name'));
            }
            if (msg.indexable != null) {
              if (typeof msg.indexable !== 'boolean') {
                errors.field('indexable').error('boolean expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.docId != null) {
              json.docId = obj.docId;
            }
            if (obj.name != null) {
              json.name = $root.google.protobuf.StringValue.toJSON(obj.name, helper);
            }
            if (obj.indexable != null) {
              json.indexable = obj.indexable;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.DocumentLink();

          if (json.docId != null) {
            result.docId = json.docId;
          } else {
            result.docId = '';
          }
          if (json.name != null) {
            result.name = $root.google.protobuf.StringValue.fromJSON(json.name, helper);
          } else {
            delete result.name;
          }
          if (json.indexable != null) {
            result.indexable = json.indexable;
          } else {
            result.indexable = false;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.docId != null) {
              grpc.docId = obj.docId;
            }
            if (obj.name != null) {
              grpc.name = $root.google.protobuf.StringValue.toGRPC(obj.name, helper);
            }
            if (obj.indexable != null) {
              grpc.indexable = obj.indexable;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.DocumentLink();

            if (grpc.docId != null) {
              result.docId = grpc.docId;
            } else {
              result.docId = '';
            }
            if (grpc.name != null) {
              result.name = $root.google.protobuf.StringValue.fromGRPC(grpc.name, helper);
            } else {
              delete result.name;
            }
            if (grpc.indexable != null) {
              result.indexable = grpc.indexable;
            } else {
              result.indexable = false;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'docId': {
                'type': 'string',
                'id': 1
              },
              'name': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              },
              'indexable': {
                'type': 'bool',
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(DocumentLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.DocumentLink');
        },
        enumerable: false,
        configurable: false
      });
      return DocumentLink;
    }());
    common.EmailLink = (function() {

      class EmailLink {

        constructor(props) {
          this.recipient = props && props.recipient;
          this.subject = props && props.subject;
          this.body = props && props.body;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.recipient != null) {
              if (typeof msg.recipient !== 'string') {
                errors.field('recipient').error('string expected');
              }
            }
            if (msg.subject != null) {
              $root.google.protobuf.StringValue.verify(msg.subject, helper, errors.field('subject'));
            }
            if (msg.body != null) {
              $root.google.protobuf.StringValue.verify(msg.body, helper, errors.field('body'));
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.recipient != null) {
              json.recipient = obj.recipient;
            }
            if (obj.subject != null) {
              json.subject = $root.google.protobuf.StringValue.toJSON(obj.subject, helper);
            }
            if (obj.body != null) {
              json.body = $root.google.protobuf.StringValue.toJSON(obj.body, helper);
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.EmailLink();

          if (json.recipient != null) {
            result.recipient = json.recipient;
          } else {
            result.recipient = '';
          }
          if (json.subject != null) {
            result.subject = $root.google.protobuf.StringValue.fromJSON(json.subject, helper);
          } else {
            delete result.subject;
          }
          if (json.body != null) {
            result.body = $root.google.protobuf.StringValue.fromJSON(json.body, helper);
          } else {
            delete result.body;
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.recipient != null) {
              grpc.recipient = obj.recipient;
            }
            if (obj.subject != null) {
              grpc.subject = $root.google.protobuf.StringValue.toGRPC(obj.subject, helper);
            }
            if (obj.body != null) {
              grpc.body = $root.google.protobuf.StringValue.toGRPC(obj.body, helper);
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.EmailLink();

            if (grpc.recipient != null) {
              result.recipient = grpc.recipient;
            } else {
              result.recipient = '';
            }
            if (grpc.subject != null) {
              result.subject = $root.google.protobuf.StringValue.fromGRPC(grpc.subject, helper);
            } else {
              delete result.subject;
            }
            if (grpc.body != null) {
              result.body = $root.google.protobuf.StringValue.fromGRPC(grpc.body, helper);
            } else {
              delete result.body;
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'recipient': {
                'type': 'string',
                'id': 1,
                'options': {
                  '(wix.api.format)': 'EMAIL'
                }
              },
              'subject': {
                'type': $root.google.protobuf.StringValue,
                'id': 2
              },
              'body': {
                'type': $root.google.protobuf.StringValue,
                'id': 3
              }
            }
          };
        }
      }

      Object.defineProperty(EmailLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.EmailLink');
        },
        enumerable: false,
        configurable: false
      });
      return EmailLink;
    }());
    common.PhoneLink = (function() {

      class PhoneLink {

        constructor(props) {
          this.phoneNumber = props && props.phoneNumber;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.phoneNumber != null) {
              if (typeof msg.phoneNumber !== 'string') {
                errors.field('phoneNumber').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.phoneNumber != null) {
              json.phoneNumber = obj.phoneNumber;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.PhoneLink();

          if (json.phoneNumber != null) {
            result.phoneNumber = json.phoneNumber;
          } else {
            result.phoneNumber = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.phoneNumber != null) {
              grpc.phoneNumber = obj.phoneNumber;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.PhoneLink();

            if (grpc.phoneNumber != null) {
              result.phoneNumber = grpc.phoneNumber;
            } else {
              result.phoneNumber = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'phoneNumber': {
                'type': 'string',
                'id': 1,
                'options': {
                  '(wix.api.format)': 'PHONE',
                  '(wix.api.maxLength)': 100
                }
              }
            }
          };
        }
      }

      Object.defineProperty(PhoneLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.PhoneLink');
        },
        enumerable: false,
        configurable: false
      });
      return PhoneLink;
    }());
    common.AddressLink = (function() {

      class AddressLink {

        constructor(props) {
          this.address = props && props.address;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.address != null) {
              if (typeof msg.address !== 'string') {
                errors.field('address').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.address != null) {
              json.address = obj.address;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.AddressLink();

          if (json.address != null) {
            result.address = json.address;
          } else {
            result.address = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.address != null) {
              grpc.address = obj.address;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.AddressLink();

            if (grpc.address != null) {
              result.address = grpc.address;
            } else {
              result.address = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'address': {
                'type': 'string',
                'id': 1
              }
            }
          };
        }
      }

      Object.defineProperty(AddressLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.AddressLink');
        },
        enumerable: false,
        configurable: false
      });
      return AddressLink;
    }());
    common.WhatsAppLink = (function() {

      class WhatsAppLink {

        constructor(props) {
          this.phoneNumber = props && props.phoneNumber;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.phoneNumber != null) {
              if (typeof msg.phoneNumber !== 'string') {
                errors.field('phoneNumber').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.phoneNumber != null) {
              json.phoneNumber = obj.phoneNumber;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.wix.common.WhatsAppLink();

          if (json.phoneNumber != null) {
            result.phoneNumber = json.phoneNumber;
          } else {
            result.phoneNumber = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.phoneNumber != null) {
              grpc.phoneNumber = obj.phoneNumber;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.wix.common.WhatsAppLink();

            if (grpc.phoneNumber != null) {
              result.phoneNumber = grpc.phoneNumber;
            } else {
              result.phoneNumber = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'phoneNumber': {
                'type': 'string',
                'id': 1,
                'options': {
                  '(wix.api.format)': 'PHONE'
                }
              }
            }
          };
        }
      }

      Object.defineProperty(WhatsAppLink.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('wix.common.WhatsAppLink');
        },
        enumerable: false,
        configurable: false
      });
      return WhatsAppLink;
    }());
    return common;
  }());
  return wix;
}());
$root.google = (function() {
  const google = {};

  google.protobuf = (function() {
    const protobuf = {};

    protobuf.DoubleValue = (function() {

      class DoubleValue {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'number') {
            errors.error('number expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj == null ? obj : isNaN(obj) ? 'NaN' : isFinite(obj) ? obj : obj.toString();
        }

        static fromJSON(json, helper) {
          return json === 'NaN' ? NaN : json === 'Infinity' ? Infinity : json === '-Infinity' ? -Infinity : json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(DoubleValue.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.DoubleValue');
        },
        enumerable: false,
        configurable: false
      });
      return DoubleValue;
    }());
    protobuf.FloatValue = (function() {

      class FloatValue {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'number') {
            errors.error('number expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj == null ? obj : isNaN(obj) ? 'NaN' : isFinite(obj) ? obj : obj.toString();
        }

        static fromJSON(json, helper) {
          return json === 'NaN' ? NaN : json === 'Infinity' ? Infinity : json === '-Infinity' ? -Infinity : json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(FloatValue.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.FloatValue');
        },
        enumerable: false,
        configurable: false
      });
      return FloatValue;
    }());
    protobuf.Int64Value = (function() {

      class Int64Value {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (!Number.isInteger(msg) && !Long.isLong(msg)) {
            errors.error('long or integer expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj == null ? obj : obj.toString();
        }

        static fromJSON(json, helper) {
          return json == null ? json : Long.fromValue(json);
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj.toString()
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && Long.fromValue(grpc.value);
        }
      }

      Object.defineProperty(Int64Value.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.Int64Value');
        },
        enumerable: false,
        configurable: false
      });
      return Int64Value;
    }());
    protobuf.UInt64Value = (function() {

      class UInt64Value {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (!((Number.isInteger(msg) || Long.isLong(msg)) && Long.fromValue(msg).greaterThanOrEqual(0))) {
            errors.error('non-negative long or integer expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj == null ? obj : obj.toString();
        }

        static fromJSON(json, helper) {
          return json == null ? json : Long.fromValue(json);
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj.toString()
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && Long.fromValue(grpc.value);
        }
      }

      Object.defineProperty(UInt64Value.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.UInt64Value');
        },
        enumerable: false,
        configurable: false
      });
      return UInt64Value;
    }());
    protobuf.Int32Value = (function() {

      class Int32Value {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (!Number.isInteger(msg)) {
            errors.error('integer expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(Int32Value.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.Int32Value');
        },
        enumerable: false,
        configurable: false
      });
      return Int32Value;
    }());
    protobuf.UInt32Value = (function() {

      class UInt32Value {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (!Number.isInteger(msg) || msg < 0) {
            errors.error('non-negative integer expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(UInt32Value.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.UInt32Value');
        },
        enumerable: false,
        configurable: false
      });
      return UInt32Value;
    }());
    protobuf.BoolValue = (function() {

      class BoolValue {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'boolean') {
            errors.error('boolean expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(BoolValue.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.BoolValue');
        },
        enumerable: false,
        configurable: false
      });
      return BoolValue;
    }());
    protobuf.StringValue = (function() {

      class StringValue {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'string') {
            errors.error('string expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(StringValue.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.StringValue');
        },
        enumerable: false,
        configurable: false
      });
      return StringValue;
    }());
    protobuf.BytesValue = (function() {

      class BytesValue {

        constructor(props) {
          this.value = props && props.value;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (!Buffer.isBuffer(msg)) {
            errors.error('buffer expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj && obj.toString('base64');
        }

        static fromJSON(json, helper) {
          return json && function tryParseBytes(val) {
              try {
                return Buffer.from(val, 'base64');
              } catch (e) {
                return val;
              } finally {}
            }(json);
        }

        static toGRPC(obj, helper) {
          return obj == null ? obj : {
            'value': obj
          };
        }

        static fromGRPC(grpc, helper) {
          return grpc && grpc.value;
        }
      }

      Object.defineProperty(BytesValue.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.BytesValue');
        },
        enumerable: false,
        configurable: false
      });
      return BytesValue;
    }());
    protobuf.Timestamp = (function() {

      class Timestamp {

        constructor(props) {
          this.seconds = props && props.seconds;
          this.nanos = props && props.nanos;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (msg != null && !(msg instanceof Date)) {
            errors.error('Date expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj && obj.toISOString();
        }

        static fromJSON(json, helper) {
          return json && new Date(json);
        }

        static toGRPC(obj, helper) {
          return helper.grpc.timestampToGRPC(obj);
        }

        static fromGRPC(grpc, helper) {
          return helper.grpc.timestampFromGRPC(grpc);
        }

        static describe() {
          return {
            'fields': {
              'seconds': {
                'type': 'int64',
                'id': 1
              },
              'nanos': {
                'type': 'int32',
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(Timestamp.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.Timestamp');
        },
        enumerable: false,
        configurable: false
      });
      return Timestamp;
    }());
    protobuf.FieldMask = (function() {

      class FieldMask {

        constructor(props) {
          this.paths = props && props.paths;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (msg != null && !Array.isArray(msg)) {
            errors.error('array expected');
          } else {
            msg.forEach((value, index) => {
              if (typeof value !== 'string') {
                errors.index(index).error('string expected');
              }
            });
          }
        }

        static toJSON(obj, helper) {
          return obj && obj.join();
        }

        static fromJSON(json, helper) {
          return json && json.split(',');
        }

        static toGRPC(obj, helper) {
          return helper.grpc.fieldmaskToGRPC(obj);
        }

        static fromGRPC(grpc, helper) {
          return helper.grpc.fieldmaskFromGRPC(grpc);
        }

        static describe() {
          return {
            'fields': {
              'paths': {
                'rule': 'repeated',
                'type': 'string',
                'id': 1
              }
            }
          };
        }
      }

      Object.defineProperty(FieldMask.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.FieldMask');
        },
        enumerable: false,
        configurable: false
      });
      return FieldMask;
    }());
    protobuf.Struct = (function() {

      class Struct {

        constructor(props) {
          this.fields = props && props.fields;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (msg != null && (!(typeof msg === 'object') || Array.isArray(msg))) {
            errors.error('object expected');
          }
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return helper.grpc.structToGRPC(obj);
        }

        static fromGRPC(grpc, helper) {
          return helper.grpc.structFromGRPC(grpc);
        }

        static describe() {
          return {
            'fields': {
              'fields': {
                'keyType': 'string',
                'type': $root.google.protobuf.Value,
                'id': 1
              }
            }
          };
        }
      }

      Object.defineProperty(Struct.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.Struct');
        },
        enumerable: false,
        configurable: false
      });
      return Struct;
    }());
    protobuf.Value = (function() {

      class Value {

        constructor(props) {
          this.nullValue = props && props.nullValue;
          this.numberValue = props && props.numberValue;
          this.stringValue = props && props.stringValue;
          this.boolValue = props && props.boolValue;
          this.structValue = props && props.structValue;
          this.listValue = props && props.listValue;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          return errors;
        }

        static toJSON(obj, helper) {
          return obj;
        }

        static fromJSON(json, helper) {
          return json;
        }

        static toGRPC(obj, helper) {
          return helper.grpc.valueToGRPC(obj);
        }

        static fromGRPC(grpc, helper) {
          return helper.grpc.valueFromGRPC(grpc);
        }

        static describe() {
          return {
            'oneofs': {
              'kind': {
                'oneof': [
                  'nullValue',
                  'numberValue',
                  'stringValue',
                  'boolValue',
                  'structValue',
                  'listValue'
                ]
              }
            },
            'fields': {
              'nullValue': {
                'type': $root.google.protobuf.NullValue,
                'id': 1
              },
              'numberValue': {
                'type': 'double',
                'id': 2
              },
              'stringValue': {
                'type': 'string',
                'id': 3
              },
              'boolValue': {
                'type': 'bool',
                'id': 4
              },
              'structValue': {
                'type': $root.google.protobuf.Struct,
                'id': 5
              },
              'listValue': {
                'type': $root.google.protobuf.ListValue,
                'id': 6
              }
            }
          };
        }
      }

      Object.defineProperty(Value.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.protobuf.Value');
        },
        enumerable: false,
        configurable: false
      });
      return Value;
    }());
    return protobuf;
  }());
  google.api = (function() {
    const api = {};

    api.Http = (function() {

      class Http {

        constructor(props) {
          this.rules = props && props.rules;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.rules != null) {
              const fieldErrors = errors.field('rules');

              if (!Array.isArray(msg.rules)) {
                fieldErrors.error('array expected');
              } else {
                msg.rules.forEach((value, index) => {
                  $root.google.api.HttpRule.verify(value, helper, fieldErrors.index(index));
                });
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.rules != null) {
              json.rules = obj.rules.map(e => {
                return $root.google.api.HttpRule.toJSON(e, helper);
              });
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.google.api.Http();

          if (json.rules != null) {
            result.rules = json.rules.map(e => {
              return $root.google.api.HttpRule.fromJSON(e, helper);
            });
          } else {
            result.rules = [];
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.rules != null) {
              grpc.rules = obj.rules.map(e => {
                return $root.google.api.HttpRule.toGRPC(e, helper);
              });
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.google.api.Http();

            if (grpc.rules != null) {
              result.rules = grpc.rules.map(e => {
                return $root.google.api.HttpRule.fromGRPC(e, helper);
              });
            } else {
              result.rules = [];
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'rules': {
                'rule': 'repeated',
                'type': $root.google.api.HttpRule,
                'id': 1
              }
            }
          };
        }
      }

      Object.defineProperty(Http.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.api.Http');
        },
        enumerable: false,
        configurable: false
      });
      return Http;
    }());
    api.HttpRule = (function() {

      class HttpRule {

        constructor(props) {
          this.selector = props && props.selector;
          this.get = props && props.get;
          this.put = props && props.put;
          this.post = props && props.post;
          this.delete = props && props.delete;
          this.patch = props && props.patch;
          this.custom = props && props.custom;
          this.body = props && props.body;
          this.additionalBindings = props && props.additionalBindings;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            const oneOfMutex = {};

            if (msg.selector != null) {
              if (typeof msg.selector !== 'string') {
                errors.field('selector').error('string expected');
              }
            }
            if (msg.get != null) {
              if (oneOfMutex['pattern']) {
                errors.field('get').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                if (typeof msg.get !== 'string') {
                  errors.field('get').error('string expected');
                }
              }
            }
            if (msg.put != null) {
              if (oneOfMutex['pattern']) {
                errors.field('put').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                if (typeof msg.put !== 'string') {
                  errors.field('put').error('string expected');
                }
              }
            }
            if (msg.post != null) {
              if (oneOfMutex['pattern']) {
                errors.field('post').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                if (typeof msg.post !== 'string') {
                  errors.field('post').error('string expected');
                }
              }
            }
            if (msg.delete != null) {
              if (oneOfMutex['pattern']) {
                errors.field('delete').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                if (typeof msg.delete !== 'string') {
                  errors.field('delete').error('string expected');
                }
              }
            }
            if (msg.patch != null) {
              if (oneOfMutex['pattern']) {
                errors.field('patch').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                if (typeof msg.patch !== 'string') {
                  errors.field('patch').error('string expected');
                }
              }
            }
            if (msg.custom != null) {
              if (oneOfMutex['pattern']) {
                errors.field('custom').up().field('pattern').error('multiple values');
              } else {
                oneOfMutex['pattern'] = true;
                $root.google.api.CustomHttpPattern.verify(msg.custom, helper, errors.field('custom'));
              }
            }
            if (msg.body != null) {
              if (typeof msg.body !== 'string') {
                errors.field('body').error('string expected');
              }
            }
            if (msg.additionalBindings != null) {
              const fieldErrors = errors.field('additionalBindings');

              if (!Array.isArray(msg.additionalBindings)) {
                fieldErrors.error('array expected');
              } else {
                msg.additionalBindings.forEach((value, index) => {
                  $root.google.api.HttpRule.verify(value, helper, fieldErrors.index(index));
                });
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.selector != null) {
              json.selector = obj.selector;
            }
            if (obj.get != null) {
              json.get = obj.get;
            }
            if (obj.put != null) {
              json.put = obj.put;
            }
            if (obj.post != null) {
              json.post = obj.post;
            }
            if (obj.delete != null) {
              json.delete = obj.delete;
            }
            if (obj.patch != null) {
              json.patch = obj.patch;
            }
            if (obj.custom != null) {
              json.custom = $root.google.api.CustomHttpPattern.toJSON(obj.custom, helper);
            }
            if (obj.body != null) {
              json.body = obj.body;
            }
            if (obj.additionalBindings != null) {
              json.additionalBindings = obj.additionalBindings.map(e => {
                return $root.google.api.HttpRule.toJSON(e, helper);
              });
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.google.api.HttpRule();

          if (json.selector != null) {
            result.selector = json.selector;
          } else {
            result.selector = '';
          }
          if (json.get != null) {
            result.get = json.get;
          } else {
            delete result.get;
          }
          if (json.put != null) {
            result.put = json.put;
          } else {
            delete result.put;
          }
          if (json.post != null) {
            result.post = json.post;
          } else {
            delete result.post;
          }
          if (json.delete != null) {
            result.delete = json.delete;
          } else {
            delete result.delete;
          }
          if (json.patch != null) {
            result.patch = json.patch;
          } else {
            delete result.patch;
          }
          if (json.custom != null) {
            result.custom = $root.google.api.CustomHttpPattern.fromJSON(json.custom, helper);
          } else {
            delete result.custom;
          }
          if (json.body != null) {
            result.body = json.body;
          } else {
            result.body = '';
          }
          if (json.additionalBindings != null) {
            result.additionalBindings = json.additionalBindings.map(e => {
              return $root.google.api.HttpRule.fromJSON(e, helper);
            });
          } else {
            result.additionalBindings = [];
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.selector != null) {
              grpc.selector = obj.selector;
            }
            if (obj.get != null) {
              grpc.get = obj.get;
            }
            if (obj.put != null) {
              grpc.put = obj.put;
            }
            if (obj.post != null) {
              grpc.post = obj.post;
            }
            if (obj.delete != null) {
              grpc.delete = obj.delete;
            }
            if (obj.patch != null) {
              grpc.patch = obj.patch;
            }
            if (obj.custom != null) {
              grpc.custom = $root.google.api.CustomHttpPattern.toGRPC(obj.custom, helper);
            }
            if (obj.body != null) {
              grpc.body = obj.body;
            }
            if (obj.additionalBindings != null) {
              grpc.additionalBindings = obj.additionalBindings.map(e => {
                return $root.google.api.HttpRule.toGRPC(e, helper);
              });
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.google.api.HttpRule();

            if (grpc.selector != null) {
              result.selector = grpc.selector;
            } else {
              result.selector = '';
            }
            if (grpc.get != null) {
              result.get = grpc.get;
            } else {
              delete result.get;
            }
            if (grpc.put != null) {
              result.put = grpc.put;
            } else {
              delete result.put;
            }
            if (grpc.post != null) {
              result.post = grpc.post;
            } else {
              delete result.post;
            }
            if (grpc.delete != null) {
              result.delete = grpc.delete;
            } else {
              delete result.delete;
            }
            if (grpc.patch != null) {
              result.patch = grpc.patch;
            } else {
              delete result.patch;
            }
            if (grpc.custom != null) {
              result.custom = $root.google.api.CustomHttpPattern.fromGRPC(grpc.custom, helper);
            } else {
              delete result.custom;
            }
            if (grpc.body != null) {
              result.body = grpc.body;
            } else {
              result.body = '';
            }
            if (grpc.additionalBindings != null) {
              result.additionalBindings = grpc.additionalBindings.map(e => {
                return $root.google.api.HttpRule.fromGRPC(e, helper);
              });
            } else {
              result.additionalBindings = [];
            }
            return result;
          }
        }

        static describe() {
          return {
            'oneofs': {
              'pattern': {
                'oneof': [
                  'get',
                  'put',
                  'post',
                  'delete',
                  'patch',
                  'custom'
                ]
              }
            },
            'fields': {
              'selector': {
                'type': 'string',
                'id': 1
              },
              'get': {
                'type': 'string',
                'id': 2
              },
              'put': {
                'type': 'string',
                'id': 3
              },
              'post': {
                'type': 'string',
                'id': 4
              },
              'delete': {
                'type': 'string',
                'id': 5
              },
              'patch': {
                'type': 'string',
                'id': 6
              },
              'custom': {
                'type': $root.google.api.CustomHttpPattern,
                'id': 8
              },
              'body': {
                'type': 'string',
                'id': 7
              },
              'additionalBindings': {
                'rule': 'repeated',
                'type': $root.google.api.HttpRule,
                'id': 11
              }
            }
          };
        }
      }

      Object.defineProperty(HttpRule.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.api.HttpRule');
        },
        enumerable: false,
        configurable: false
      });
      return HttpRule;
    }());
    api.CustomHttpPattern = (function() {

      class CustomHttpPattern {

        constructor(props) {
          this.kind = props && props.kind;
          this.path = props && props.path;
        }

        static verify(msg, helper, errors = helper.verification.Errors.empty()) {
          if (typeof msg !== 'object' || msg == null) {
            errors.error('object expected');
          } else {
            if (msg.kind != null) {
              if (typeof msg.kind !== 'string') {
                errors.field('kind').error('string expected');
              }
            }
            if (msg.path != null) {
              if (typeof msg.path !== 'string') {
                errors.field('path').error('string expected');
              }
            }
          }
          return errors;
        }

        static toJSON(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const json = {};

            if (obj.kind != null) {
              json.kind = obj.kind;
            }
            if (obj.path != null) {
              json.path = obj.path;
            }
            return json;
          }
        }

        static fromJSON(json, helper) {
          const result = new $root.google.api.CustomHttpPattern();

          if (json.kind != null) {
            result.kind = json.kind;
          } else {
            result.kind = '';
          }
          if (json.path != null) {
            result.path = json.path;
          } else {
            result.path = '';
          }
          return result;
        }

        static toGRPC(obj, helper) {
          if (obj == null) {
            return null;
          } else {
            const grpc = {};

            if (obj.kind != null) {
              grpc.kind = obj.kind;
            }
            if (obj.path != null) {
              grpc.path = obj.path;
            }
            return grpc;
          }
        }

        static fromGRPC(grpc, helper) {
          if (grpc == null) {
            return null;
          } else {
            const result = new $root.google.api.CustomHttpPattern();

            if (grpc.kind != null) {
              result.kind = grpc.kind;
            } else {
              result.kind = '';
            }
            if (grpc.path != null) {
              result.path = grpc.path;
            } else {
              result.path = '';
            }
            return result;
          }
        }

        static describe() {
          return {
            'fields': {
              'kind': {
                'type': 'string',
                'id': 1
              },
              'path': {
                'type': 'string',
                'id': 2
              }
            }
          };
        }
      }

      Object.defineProperty(CustomHttpPattern.prototype, '__proto', {
        value: pbjs => {
          return $root.__lookup(pbjs)('google.api.CustomHttpPattern');
        },
        enumerable: false,
        configurable: false
      });
      return CustomHttpPattern;
    }());
    return api;
  }());
  return google;
}());
module.exports = $root;